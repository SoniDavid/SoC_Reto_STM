
stm32CRTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000665c  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800671c  0800671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069cc  080069cc  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  080069cc  080069cc  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069cc  080069cc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069cc  080069cc  000079cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069d0  080069d0  000079d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080069d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df0  20000060  08006a34  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  08006a34  00008e50  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130e0  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000306e  00000000  00000000  0001b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0001e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9e  00000000  00000000  0001f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ec9  00000000  00000000  00020376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151d0  00000000  00000000  0003623f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d2e  00000000  00000000  0004b40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d113d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  000d1180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d5e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006704 	.word	0x08006704

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006704 	.word	0x08006704

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 f8eb 	bl	8000604 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 f82b 	bl	8000494 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 f8dd 	bl	8000604 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 f8d3 	bl	8000604 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 f855 	bl	800051c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 f84b 	bl	800051c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__eqdf2>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	46de      	mov	lr, fp
 800049a:	464e      	mov	r6, r9
 800049c:	4645      	mov	r5, r8
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	000d      	movs	r5, r1
 80004a2:	0004      	movs	r4, r0
 80004a4:	0fe8      	lsrs	r0, r5, #31
 80004a6:	4683      	mov	fp, r0
 80004a8:	0309      	lsls	r1, r1, #12
 80004aa:	0fd8      	lsrs	r0, r3, #31
 80004ac:	0b09      	lsrs	r1, r1, #12
 80004ae:	4682      	mov	sl, r0
 80004b0:	4819      	ldr	r0, [pc, #100]	@ (8000518 <__eqdf2+0x84>)
 80004b2:	468c      	mov	ip, r1
 80004b4:	031f      	lsls	r7, r3, #12
 80004b6:	0069      	lsls	r1, r5, #1
 80004b8:	005e      	lsls	r6, r3, #1
 80004ba:	0d49      	lsrs	r1, r1, #21
 80004bc:	0b3f      	lsrs	r7, r7, #12
 80004be:	0d76      	lsrs	r6, r6, #21
 80004c0:	4281      	cmp	r1, r0
 80004c2:	d018      	beq.n	80004f6 <__eqdf2+0x62>
 80004c4:	4286      	cmp	r6, r0
 80004c6:	d00f      	beq.n	80004e8 <__eqdf2+0x54>
 80004c8:	2001      	movs	r0, #1
 80004ca:	42b1      	cmp	r1, r6
 80004cc:	d10d      	bne.n	80004ea <__eqdf2+0x56>
 80004ce:	45bc      	cmp	ip, r7
 80004d0:	d10b      	bne.n	80004ea <__eqdf2+0x56>
 80004d2:	4294      	cmp	r4, r2
 80004d4:	d109      	bne.n	80004ea <__eqdf2+0x56>
 80004d6:	45d3      	cmp	fp, sl
 80004d8:	d01c      	beq.n	8000514 <__eqdf2+0x80>
 80004da:	2900      	cmp	r1, #0
 80004dc:	d105      	bne.n	80004ea <__eqdf2+0x56>
 80004de:	4660      	mov	r0, ip
 80004e0:	4320      	orrs	r0, r4
 80004e2:	1e43      	subs	r3, r0, #1
 80004e4:	4198      	sbcs	r0, r3
 80004e6:	e000      	b.n	80004ea <__eqdf2+0x56>
 80004e8:	2001      	movs	r0, #1
 80004ea:	bcf0      	pop	{r4, r5, r6, r7}
 80004ec:	46bb      	mov	fp, r7
 80004ee:	46b2      	mov	sl, r6
 80004f0:	46a9      	mov	r9, r5
 80004f2:	46a0      	mov	r8, r4
 80004f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f6:	2001      	movs	r0, #1
 80004f8:	428e      	cmp	r6, r1
 80004fa:	d1f6      	bne.n	80004ea <__eqdf2+0x56>
 80004fc:	4661      	mov	r1, ip
 80004fe:	4339      	orrs	r1, r7
 8000500:	000f      	movs	r7, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	4327      	orrs	r7, r4
 8000506:	d1f0      	bne.n	80004ea <__eqdf2+0x56>
 8000508:	465b      	mov	r3, fp
 800050a:	4652      	mov	r2, sl
 800050c:	1a98      	subs	r0, r3, r2
 800050e:	1e43      	subs	r3, r0, #1
 8000510:	4198      	sbcs	r0, r3
 8000512:	e7ea      	b.n	80004ea <__eqdf2+0x56>
 8000514:	2000      	movs	r0, #0
 8000516:	e7e8      	b.n	80004ea <__eqdf2+0x56>
 8000518:	000007ff 	.word	0x000007ff

0800051c <__gedf2>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	4657      	mov	r7, sl
 8000520:	464e      	mov	r6, r9
 8000522:	4645      	mov	r5, r8
 8000524:	46de      	mov	lr, fp
 8000526:	b5e0      	push	{r5, r6, r7, lr}
 8000528:	000d      	movs	r5, r1
 800052a:	030f      	lsls	r7, r1, #12
 800052c:	0b39      	lsrs	r1, r7, #12
 800052e:	b083      	sub	sp, #12
 8000530:	0004      	movs	r4, r0
 8000532:	4680      	mov	r8, r0
 8000534:	9101      	str	r1, [sp, #4]
 8000536:	0058      	lsls	r0, r3, #1
 8000538:	0fe9      	lsrs	r1, r5, #31
 800053a:	4f31      	ldr	r7, [pc, #196]	@ (8000600 <__gedf2+0xe4>)
 800053c:	0d40      	lsrs	r0, r0, #21
 800053e:	468c      	mov	ip, r1
 8000540:	006e      	lsls	r6, r5, #1
 8000542:	0319      	lsls	r1, r3, #12
 8000544:	4682      	mov	sl, r0
 8000546:	4691      	mov	r9, r2
 8000548:	0d76      	lsrs	r6, r6, #21
 800054a:	0b09      	lsrs	r1, r1, #12
 800054c:	0fd8      	lsrs	r0, r3, #31
 800054e:	42be      	cmp	r6, r7
 8000550:	d01f      	beq.n	8000592 <__gedf2+0x76>
 8000552:	45ba      	cmp	sl, r7
 8000554:	d00f      	beq.n	8000576 <__gedf2+0x5a>
 8000556:	2e00      	cmp	r6, #0
 8000558:	d12f      	bne.n	80005ba <__gedf2+0x9e>
 800055a:	4655      	mov	r5, sl
 800055c:	9e01      	ldr	r6, [sp, #4]
 800055e:	4334      	orrs	r4, r6
 8000560:	2d00      	cmp	r5, #0
 8000562:	d127      	bne.n	80005b4 <__gedf2+0x98>
 8000564:	430a      	orrs	r2, r1
 8000566:	d03a      	beq.n	80005de <__gedf2+0xc2>
 8000568:	2c00      	cmp	r4, #0
 800056a:	d145      	bne.n	80005f8 <__gedf2+0xdc>
 800056c:	2800      	cmp	r0, #0
 800056e:	d11a      	bne.n	80005a6 <__gedf2+0x8a>
 8000570:	2001      	movs	r0, #1
 8000572:	4240      	negs	r0, r0
 8000574:	e017      	b.n	80005a6 <__gedf2+0x8a>
 8000576:	4311      	orrs	r1, r2
 8000578:	d13b      	bne.n	80005f2 <__gedf2+0xd6>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d102      	bne.n	8000584 <__gedf2+0x68>
 800057e:	9f01      	ldr	r7, [sp, #4]
 8000580:	4327      	orrs	r7, r4
 8000582:	d0f3      	beq.n	800056c <__gedf2+0x50>
 8000584:	4584      	cmp	ip, r0
 8000586:	d109      	bne.n	800059c <__gedf2+0x80>
 8000588:	4663      	mov	r3, ip
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0f0      	beq.n	8000570 <__gedf2+0x54>
 800058e:	4660      	mov	r0, ip
 8000590:	e009      	b.n	80005a6 <__gedf2+0x8a>
 8000592:	9f01      	ldr	r7, [sp, #4]
 8000594:	4327      	orrs	r7, r4
 8000596:	d12c      	bne.n	80005f2 <__gedf2+0xd6>
 8000598:	45b2      	cmp	sl, r6
 800059a:	d024      	beq.n	80005e6 <__gedf2+0xca>
 800059c:	4663      	mov	r3, ip
 800059e:	2002      	movs	r0, #2
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4018      	ands	r0, r3
 80005a4:	3801      	subs	r0, #1
 80005a6:	b003      	add	sp, #12
 80005a8:	bcf0      	pop	{r4, r5, r6, r7}
 80005aa:	46bb      	mov	fp, r7
 80005ac:	46b2      	mov	sl, r6
 80005ae:	46a9      	mov	r9, r5
 80005b0:	46a0      	mov	r8, r4
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b4:	2c00      	cmp	r4, #0
 80005b6:	d0d9      	beq.n	800056c <__gedf2+0x50>
 80005b8:	e7e4      	b.n	8000584 <__gedf2+0x68>
 80005ba:	4654      	mov	r4, sl
 80005bc:	2c00      	cmp	r4, #0
 80005be:	d0ed      	beq.n	800059c <__gedf2+0x80>
 80005c0:	4584      	cmp	ip, r0
 80005c2:	d1eb      	bne.n	800059c <__gedf2+0x80>
 80005c4:	4556      	cmp	r6, sl
 80005c6:	dce9      	bgt.n	800059c <__gedf2+0x80>
 80005c8:	dbde      	blt.n	8000588 <__gedf2+0x6c>
 80005ca:	9b01      	ldr	r3, [sp, #4]
 80005cc:	428b      	cmp	r3, r1
 80005ce:	d8e5      	bhi.n	800059c <__gedf2+0x80>
 80005d0:	d1da      	bne.n	8000588 <__gedf2+0x6c>
 80005d2:	45c8      	cmp	r8, r9
 80005d4:	d8e2      	bhi.n	800059c <__gedf2+0x80>
 80005d6:	2000      	movs	r0, #0
 80005d8:	45c8      	cmp	r8, r9
 80005da:	d2e4      	bcs.n	80005a6 <__gedf2+0x8a>
 80005dc:	e7d4      	b.n	8000588 <__gedf2+0x6c>
 80005de:	2000      	movs	r0, #0
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d0e0      	beq.n	80005a6 <__gedf2+0x8a>
 80005e4:	e7da      	b.n	800059c <__gedf2+0x80>
 80005e6:	4311      	orrs	r1, r2
 80005e8:	d103      	bne.n	80005f2 <__gedf2+0xd6>
 80005ea:	4584      	cmp	ip, r0
 80005ec:	d1d6      	bne.n	800059c <__gedf2+0x80>
 80005ee:	2000      	movs	r0, #0
 80005f0:	e7d9      	b.n	80005a6 <__gedf2+0x8a>
 80005f2:	2002      	movs	r0, #2
 80005f4:	4240      	negs	r0, r0
 80005f6:	e7d6      	b.n	80005a6 <__gedf2+0x8a>
 80005f8:	4584      	cmp	ip, r0
 80005fa:	d0e6      	beq.n	80005ca <__gedf2+0xae>
 80005fc:	e7ce      	b.n	800059c <__gedf2+0x80>
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	000007ff 	.word	0x000007ff

08000604 <__ledf2>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	4657      	mov	r7, sl
 8000608:	464e      	mov	r6, r9
 800060a:	4645      	mov	r5, r8
 800060c:	46de      	mov	lr, fp
 800060e:	b5e0      	push	{r5, r6, r7, lr}
 8000610:	000d      	movs	r5, r1
 8000612:	030f      	lsls	r7, r1, #12
 8000614:	0004      	movs	r4, r0
 8000616:	4680      	mov	r8, r0
 8000618:	0fe8      	lsrs	r0, r5, #31
 800061a:	0b39      	lsrs	r1, r7, #12
 800061c:	4684      	mov	ip, r0
 800061e:	b083      	sub	sp, #12
 8000620:	0058      	lsls	r0, r3, #1
 8000622:	4f30      	ldr	r7, [pc, #192]	@ (80006e4 <__ledf2+0xe0>)
 8000624:	0d40      	lsrs	r0, r0, #21
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	031e      	lsls	r6, r3, #12
 800062a:	0069      	lsls	r1, r5, #1
 800062c:	4682      	mov	sl, r0
 800062e:	4691      	mov	r9, r2
 8000630:	0d49      	lsrs	r1, r1, #21
 8000632:	0b36      	lsrs	r6, r6, #12
 8000634:	0fd8      	lsrs	r0, r3, #31
 8000636:	42b9      	cmp	r1, r7
 8000638:	d020      	beq.n	800067c <__ledf2+0x78>
 800063a:	45ba      	cmp	sl, r7
 800063c:	d00f      	beq.n	800065e <__ledf2+0x5a>
 800063e:	2900      	cmp	r1, #0
 8000640:	d12b      	bne.n	800069a <__ledf2+0x96>
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	430c      	orrs	r4, r1
 8000646:	4651      	mov	r1, sl
 8000648:	2900      	cmp	r1, #0
 800064a:	d137      	bne.n	80006bc <__ledf2+0xb8>
 800064c:	4332      	orrs	r2, r6
 800064e:	d038      	beq.n	80006c2 <__ledf2+0xbe>
 8000650:	2c00      	cmp	r4, #0
 8000652:	d144      	bne.n	80006de <__ledf2+0xda>
 8000654:	2800      	cmp	r0, #0
 8000656:	d119      	bne.n	800068c <__ledf2+0x88>
 8000658:	2001      	movs	r0, #1
 800065a:	4240      	negs	r0, r0
 800065c:	e016      	b.n	800068c <__ledf2+0x88>
 800065e:	4316      	orrs	r6, r2
 8000660:	d113      	bne.n	800068a <__ledf2+0x86>
 8000662:	2900      	cmp	r1, #0
 8000664:	d102      	bne.n	800066c <__ledf2+0x68>
 8000666:	9f01      	ldr	r7, [sp, #4]
 8000668:	4327      	orrs	r7, r4
 800066a:	d0f3      	beq.n	8000654 <__ledf2+0x50>
 800066c:	4584      	cmp	ip, r0
 800066e:	d020      	beq.n	80006b2 <__ledf2+0xae>
 8000670:	4663      	mov	r3, ip
 8000672:	2002      	movs	r0, #2
 8000674:	3b01      	subs	r3, #1
 8000676:	4018      	ands	r0, r3
 8000678:	3801      	subs	r0, #1
 800067a:	e007      	b.n	800068c <__ledf2+0x88>
 800067c:	9f01      	ldr	r7, [sp, #4]
 800067e:	4327      	orrs	r7, r4
 8000680:	d103      	bne.n	800068a <__ledf2+0x86>
 8000682:	458a      	cmp	sl, r1
 8000684:	d1f4      	bne.n	8000670 <__ledf2+0x6c>
 8000686:	4316      	orrs	r6, r2
 8000688:	d01f      	beq.n	80006ca <__ledf2+0xc6>
 800068a:	2002      	movs	r0, #2
 800068c:	b003      	add	sp, #12
 800068e:	bcf0      	pop	{r4, r5, r6, r7}
 8000690:	46bb      	mov	fp, r7
 8000692:	46b2      	mov	sl, r6
 8000694:	46a9      	mov	r9, r5
 8000696:	46a0      	mov	r8, r4
 8000698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069a:	4654      	mov	r4, sl
 800069c:	2c00      	cmp	r4, #0
 800069e:	d0e7      	beq.n	8000670 <__ledf2+0x6c>
 80006a0:	4584      	cmp	ip, r0
 80006a2:	d1e5      	bne.n	8000670 <__ledf2+0x6c>
 80006a4:	4551      	cmp	r1, sl
 80006a6:	dce3      	bgt.n	8000670 <__ledf2+0x6c>
 80006a8:	db03      	blt.n	80006b2 <__ledf2+0xae>
 80006aa:	9b01      	ldr	r3, [sp, #4]
 80006ac:	42b3      	cmp	r3, r6
 80006ae:	d8df      	bhi.n	8000670 <__ledf2+0x6c>
 80006b0:	d00f      	beq.n	80006d2 <__ledf2+0xce>
 80006b2:	4663      	mov	r3, ip
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0cf      	beq.n	8000658 <__ledf2+0x54>
 80006b8:	4660      	mov	r0, ip
 80006ba:	e7e7      	b.n	800068c <__ledf2+0x88>
 80006bc:	2c00      	cmp	r4, #0
 80006be:	d0c9      	beq.n	8000654 <__ledf2+0x50>
 80006c0:	e7d4      	b.n	800066c <__ledf2+0x68>
 80006c2:	2000      	movs	r0, #0
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d0e1      	beq.n	800068c <__ledf2+0x88>
 80006c8:	e7d2      	b.n	8000670 <__ledf2+0x6c>
 80006ca:	4584      	cmp	ip, r0
 80006cc:	d1d0      	bne.n	8000670 <__ledf2+0x6c>
 80006ce:	2000      	movs	r0, #0
 80006d0:	e7dc      	b.n	800068c <__ledf2+0x88>
 80006d2:	45c8      	cmp	r8, r9
 80006d4:	d8cc      	bhi.n	8000670 <__ledf2+0x6c>
 80006d6:	2000      	movs	r0, #0
 80006d8:	45c8      	cmp	r8, r9
 80006da:	d2d7      	bcs.n	800068c <__ledf2+0x88>
 80006dc:	e7e9      	b.n	80006b2 <__ledf2+0xae>
 80006de:	4584      	cmp	ip, r0
 80006e0:	d0e3      	beq.n	80006aa <__ledf2+0xa6>
 80006e2:	e7c5      	b.n	8000670 <__ledf2+0x6c>
 80006e4:	000007ff 	.word	0x000007ff

080006e8 <__aeabi_dmul>:
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	4657      	mov	r7, sl
 80006ec:	46de      	mov	lr, fp
 80006ee:	464e      	mov	r6, r9
 80006f0:	4645      	mov	r5, r8
 80006f2:	b5e0      	push	{r5, r6, r7, lr}
 80006f4:	001f      	movs	r7, r3
 80006f6:	030b      	lsls	r3, r1, #12
 80006f8:	0b1b      	lsrs	r3, r3, #12
 80006fa:	0016      	movs	r6, r2
 80006fc:	469a      	mov	sl, r3
 80006fe:	0fca      	lsrs	r2, r1, #31
 8000700:	004b      	lsls	r3, r1, #1
 8000702:	0004      	movs	r4, r0
 8000704:	4693      	mov	fp, r2
 8000706:	b087      	sub	sp, #28
 8000708:	0d5b      	lsrs	r3, r3, #21
 800070a:	d100      	bne.n	800070e <__aeabi_dmul+0x26>
 800070c:	e0d5      	b.n	80008ba <__aeabi_dmul+0x1d2>
 800070e:	4abb      	ldr	r2, [pc, #748]	@ (80009fc <__aeabi_dmul+0x314>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d100      	bne.n	8000716 <__aeabi_dmul+0x2e>
 8000714:	e0f8      	b.n	8000908 <__aeabi_dmul+0x220>
 8000716:	4651      	mov	r1, sl
 8000718:	0f42      	lsrs	r2, r0, #29
 800071a:	00c9      	lsls	r1, r1, #3
 800071c:	430a      	orrs	r2, r1
 800071e:	2180      	movs	r1, #128	@ 0x80
 8000720:	0409      	lsls	r1, r1, #16
 8000722:	4311      	orrs	r1, r2
 8000724:	00c2      	lsls	r2, r0, #3
 8000726:	4691      	mov	r9, r2
 8000728:	4ab5      	ldr	r2, [pc, #724]	@ (8000a00 <__aeabi_dmul+0x318>)
 800072a:	468a      	mov	sl, r1
 800072c:	189d      	adds	r5, r3, r2
 800072e:	2300      	movs	r3, #0
 8000730:	4698      	mov	r8, r3
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	033c      	lsls	r4, r7, #12
 8000736:	007b      	lsls	r3, r7, #1
 8000738:	0ffa      	lsrs	r2, r7, #31
 800073a:	0030      	movs	r0, r6
 800073c:	0b24      	lsrs	r4, r4, #12
 800073e:	0d5b      	lsrs	r3, r3, #21
 8000740:	9200      	str	r2, [sp, #0]
 8000742:	d100      	bne.n	8000746 <__aeabi_dmul+0x5e>
 8000744:	e096      	b.n	8000874 <__aeabi_dmul+0x18c>
 8000746:	4aad      	ldr	r2, [pc, #692]	@ (80009fc <__aeabi_dmul+0x314>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d031      	beq.n	80007b0 <__aeabi_dmul+0xc8>
 800074c:	0f72      	lsrs	r2, r6, #29
 800074e:	00e4      	lsls	r4, r4, #3
 8000750:	4322      	orrs	r2, r4
 8000752:	2480      	movs	r4, #128	@ 0x80
 8000754:	0424      	lsls	r4, r4, #16
 8000756:	4314      	orrs	r4, r2
 8000758:	4aa9      	ldr	r2, [pc, #676]	@ (8000a00 <__aeabi_dmul+0x318>)
 800075a:	00f0      	lsls	r0, r6, #3
 800075c:	4694      	mov	ip, r2
 800075e:	4463      	add	r3, ip
 8000760:	195b      	adds	r3, r3, r5
 8000762:	1c5a      	adds	r2, r3, #1
 8000764:	9201      	str	r2, [sp, #4]
 8000766:	4642      	mov	r2, r8
 8000768:	2600      	movs	r6, #0
 800076a:	2a0a      	cmp	r2, #10
 800076c:	dc42      	bgt.n	80007f4 <__aeabi_dmul+0x10c>
 800076e:	465a      	mov	r2, fp
 8000770:	9900      	ldr	r1, [sp, #0]
 8000772:	404a      	eors	r2, r1
 8000774:	4693      	mov	fp, r2
 8000776:	4642      	mov	r2, r8
 8000778:	2a02      	cmp	r2, #2
 800077a:	dc32      	bgt.n	80007e2 <__aeabi_dmul+0xfa>
 800077c:	3a01      	subs	r2, #1
 800077e:	2a01      	cmp	r2, #1
 8000780:	d900      	bls.n	8000784 <__aeabi_dmul+0x9c>
 8000782:	e149      	b.n	8000a18 <__aeabi_dmul+0x330>
 8000784:	2e02      	cmp	r6, #2
 8000786:	d100      	bne.n	800078a <__aeabi_dmul+0xa2>
 8000788:	e0ca      	b.n	8000920 <__aeabi_dmul+0x238>
 800078a:	2e01      	cmp	r6, #1
 800078c:	d13d      	bne.n	800080a <__aeabi_dmul+0x122>
 800078e:	2300      	movs	r3, #0
 8000790:	2400      	movs	r4, #0
 8000792:	2200      	movs	r2, #0
 8000794:	0010      	movs	r0, r2
 8000796:	465a      	mov	r2, fp
 8000798:	051b      	lsls	r3, r3, #20
 800079a:	4323      	orrs	r3, r4
 800079c:	07d2      	lsls	r2, r2, #31
 800079e:	4313      	orrs	r3, r2
 80007a0:	0019      	movs	r1, r3
 80007a2:	b007      	add	sp, #28
 80007a4:	bcf0      	pop	{r4, r5, r6, r7}
 80007a6:	46bb      	mov	fp, r7
 80007a8:	46b2      	mov	sl, r6
 80007aa:	46a9      	mov	r9, r5
 80007ac:	46a0      	mov	r8, r4
 80007ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b0:	4b92      	ldr	r3, [pc, #584]	@ (80009fc <__aeabi_dmul+0x314>)
 80007b2:	4326      	orrs	r6, r4
 80007b4:	18eb      	adds	r3, r5, r3
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dmul+0xd4>
 80007ba:	e0bb      	b.n	8000934 <__aeabi_dmul+0x24c>
 80007bc:	2203      	movs	r2, #3
 80007be:	4641      	mov	r1, r8
 80007c0:	4311      	orrs	r1, r2
 80007c2:	465a      	mov	r2, fp
 80007c4:	4688      	mov	r8, r1
 80007c6:	9900      	ldr	r1, [sp, #0]
 80007c8:	404a      	eors	r2, r1
 80007ca:	2180      	movs	r1, #128	@ 0x80
 80007cc:	0109      	lsls	r1, r1, #4
 80007ce:	468c      	mov	ip, r1
 80007d0:	0029      	movs	r1, r5
 80007d2:	4461      	add	r1, ip
 80007d4:	9101      	str	r1, [sp, #4]
 80007d6:	4641      	mov	r1, r8
 80007d8:	290a      	cmp	r1, #10
 80007da:	dd00      	ble.n	80007de <__aeabi_dmul+0xf6>
 80007dc:	e233      	b.n	8000c46 <__aeabi_dmul+0x55e>
 80007de:	4693      	mov	fp, r2
 80007e0:	2603      	movs	r6, #3
 80007e2:	4642      	mov	r2, r8
 80007e4:	2701      	movs	r7, #1
 80007e6:	4097      	lsls	r7, r2
 80007e8:	21a6      	movs	r1, #166	@ 0xa6
 80007ea:	003a      	movs	r2, r7
 80007ec:	00c9      	lsls	r1, r1, #3
 80007ee:	400a      	ands	r2, r1
 80007f0:	420f      	tst	r7, r1
 80007f2:	d031      	beq.n	8000858 <__aeabi_dmul+0x170>
 80007f4:	9e02      	ldr	r6, [sp, #8]
 80007f6:	2e02      	cmp	r6, #2
 80007f8:	d100      	bne.n	80007fc <__aeabi_dmul+0x114>
 80007fa:	e235      	b.n	8000c68 <__aeabi_dmul+0x580>
 80007fc:	2e03      	cmp	r6, #3
 80007fe:	d100      	bne.n	8000802 <__aeabi_dmul+0x11a>
 8000800:	e1d2      	b.n	8000ba8 <__aeabi_dmul+0x4c0>
 8000802:	4654      	mov	r4, sl
 8000804:	4648      	mov	r0, r9
 8000806:	2e01      	cmp	r6, #1
 8000808:	d0c1      	beq.n	800078e <__aeabi_dmul+0xa6>
 800080a:	9a01      	ldr	r2, [sp, #4]
 800080c:	4b7d      	ldr	r3, [pc, #500]	@ (8000a04 <__aeabi_dmul+0x31c>)
 800080e:	4694      	mov	ip, r2
 8000810:	4463      	add	r3, ip
 8000812:	2b00      	cmp	r3, #0
 8000814:	dc00      	bgt.n	8000818 <__aeabi_dmul+0x130>
 8000816:	e0c0      	b.n	800099a <__aeabi_dmul+0x2b2>
 8000818:	0742      	lsls	r2, r0, #29
 800081a:	d009      	beq.n	8000830 <__aeabi_dmul+0x148>
 800081c:	220f      	movs	r2, #15
 800081e:	4002      	ands	r2, r0
 8000820:	2a04      	cmp	r2, #4
 8000822:	d005      	beq.n	8000830 <__aeabi_dmul+0x148>
 8000824:	1d02      	adds	r2, r0, #4
 8000826:	4282      	cmp	r2, r0
 8000828:	4180      	sbcs	r0, r0
 800082a:	4240      	negs	r0, r0
 800082c:	1824      	adds	r4, r4, r0
 800082e:	0010      	movs	r0, r2
 8000830:	01e2      	lsls	r2, r4, #7
 8000832:	d506      	bpl.n	8000842 <__aeabi_dmul+0x15a>
 8000834:	4b74      	ldr	r3, [pc, #464]	@ (8000a08 <__aeabi_dmul+0x320>)
 8000836:	9a01      	ldr	r2, [sp, #4]
 8000838:	401c      	ands	r4, r3
 800083a:	2380      	movs	r3, #128	@ 0x80
 800083c:	4694      	mov	ip, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4463      	add	r3, ip
 8000842:	4a72      	ldr	r2, [pc, #456]	@ (8000a0c <__aeabi_dmul+0x324>)
 8000844:	4293      	cmp	r3, r2
 8000846:	dc6b      	bgt.n	8000920 <__aeabi_dmul+0x238>
 8000848:	0762      	lsls	r2, r4, #29
 800084a:	08c0      	lsrs	r0, r0, #3
 800084c:	0264      	lsls	r4, r4, #9
 800084e:	055b      	lsls	r3, r3, #21
 8000850:	4302      	orrs	r2, r0
 8000852:	0b24      	lsrs	r4, r4, #12
 8000854:	0d5b      	lsrs	r3, r3, #21
 8000856:	e79d      	b.n	8000794 <__aeabi_dmul+0xac>
 8000858:	2190      	movs	r1, #144	@ 0x90
 800085a:	0089      	lsls	r1, r1, #2
 800085c:	420f      	tst	r7, r1
 800085e:	d163      	bne.n	8000928 <__aeabi_dmul+0x240>
 8000860:	2288      	movs	r2, #136	@ 0x88
 8000862:	423a      	tst	r2, r7
 8000864:	d100      	bne.n	8000868 <__aeabi_dmul+0x180>
 8000866:	e0d7      	b.n	8000a18 <__aeabi_dmul+0x330>
 8000868:	9b00      	ldr	r3, [sp, #0]
 800086a:	46a2      	mov	sl, r4
 800086c:	469b      	mov	fp, r3
 800086e:	4681      	mov	r9, r0
 8000870:	9602      	str	r6, [sp, #8]
 8000872:	e7bf      	b.n	80007f4 <__aeabi_dmul+0x10c>
 8000874:	0023      	movs	r3, r4
 8000876:	4333      	orrs	r3, r6
 8000878:	d100      	bne.n	800087c <__aeabi_dmul+0x194>
 800087a:	e07f      	b.n	800097c <__aeabi_dmul+0x294>
 800087c:	2c00      	cmp	r4, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_dmul+0x19a>
 8000880:	e1ad      	b.n	8000bde <__aeabi_dmul+0x4f6>
 8000882:	0020      	movs	r0, r4
 8000884:	f000 fa1c 	bl	8000cc0 <__clzsi2>
 8000888:	0002      	movs	r2, r0
 800088a:	0003      	movs	r3, r0
 800088c:	3a0b      	subs	r2, #11
 800088e:	201d      	movs	r0, #29
 8000890:	0019      	movs	r1, r3
 8000892:	1a82      	subs	r2, r0, r2
 8000894:	0030      	movs	r0, r6
 8000896:	3908      	subs	r1, #8
 8000898:	40d0      	lsrs	r0, r2
 800089a:	408c      	lsls	r4, r1
 800089c:	4304      	orrs	r4, r0
 800089e:	0030      	movs	r0, r6
 80008a0:	4088      	lsls	r0, r1
 80008a2:	4a5b      	ldr	r2, [pc, #364]	@ (8000a10 <__aeabi_dmul+0x328>)
 80008a4:	1aeb      	subs	r3, r5, r3
 80008a6:	4694      	mov	ip, r2
 80008a8:	4463      	add	r3, ip
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	9201      	str	r2, [sp, #4]
 80008ae:	4642      	mov	r2, r8
 80008b0:	2600      	movs	r6, #0
 80008b2:	2a0a      	cmp	r2, #10
 80008b4:	dc00      	bgt.n	80008b8 <__aeabi_dmul+0x1d0>
 80008b6:	e75a      	b.n	800076e <__aeabi_dmul+0x86>
 80008b8:	e79c      	b.n	80007f4 <__aeabi_dmul+0x10c>
 80008ba:	4653      	mov	r3, sl
 80008bc:	4303      	orrs	r3, r0
 80008be:	4699      	mov	r9, r3
 80008c0:	d054      	beq.n	800096c <__aeabi_dmul+0x284>
 80008c2:	4653      	mov	r3, sl
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_dmul+0x1e2>
 80008c8:	e177      	b.n	8000bba <__aeabi_dmul+0x4d2>
 80008ca:	4650      	mov	r0, sl
 80008cc:	f000 f9f8 	bl	8000cc0 <__clzsi2>
 80008d0:	230b      	movs	r3, #11
 80008d2:	425b      	negs	r3, r3
 80008d4:	469c      	mov	ip, r3
 80008d6:	0002      	movs	r2, r0
 80008d8:	4484      	add	ip, r0
 80008da:	0011      	movs	r1, r2
 80008dc:	4650      	mov	r0, sl
 80008de:	3908      	subs	r1, #8
 80008e0:	4088      	lsls	r0, r1
 80008e2:	231d      	movs	r3, #29
 80008e4:	4680      	mov	r8, r0
 80008e6:	4660      	mov	r0, ip
 80008e8:	1a1b      	subs	r3, r3, r0
 80008ea:	0020      	movs	r0, r4
 80008ec:	40d8      	lsrs	r0, r3
 80008ee:	0003      	movs	r3, r0
 80008f0:	4640      	mov	r0, r8
 80008f2:	4303      	orrs	r3, r0
 80008f4:	469a      	mov	sl, r3
 80008f6:	0023      	movs	r3, r4
 80008f8:	408b      	lsls	r3, r1
 80008fa:	4699      	mov	r9, r3
 80008fc:	2300      	movs	r3, #0
 80008fe:	4d44      	ldr	r5, [pc, #272]	@ (8000a10 <__aeabi_dmul+0x328>)
 8000900:	4698      	mov	r8, r3
 8000902:	1aad      	subs	r5, r5, r2
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	e715      	b.n	8000734 <__aeabi_dmul+0x4c>
 8000908:	4652      	mov	r2, sl
 800090a:	4302      	orrs	r2, r0
 800090c:	4691      	mov	r9, r2
 800090e:	d126      	bne.n	800095e <__aeabi_dmul+0x276>
 8000910:	2200      	movs	r2, #0
 8000912:	001d      	movs	r5, r3
 8000914:	2302      	movs	r3, #2
 8000916:	4692      	mov	sl, r2
 8000918:	3208      	adds	r2, #8
 800091a:	4690      	mov	r8, r2
 800091c:	9302      	str	r3, [sp, #8]
 800091e:	e709      	b.n	8000734 <__aeabi_dmul+0x4c>
 8000920:	2400      	movs	r4, #0
 8000922:	2200      	movs	r2, #0
 8000924:	4b35      	ldr	r3, [pc, #212]	@ (80009fc <__aeabi_dmul+0x314>)
 8000926:	e735      	b.n	8000794 <__aeabi_dmul+0xac>
 8000928:	2300      	movs	r3, #0
 800092a:	2480      	movs	r4, #128	@ 0x80
 800092c:	469b      	mov	fp, r3
 800092e:	0324      	lsls	r4, r4, #12
 8000930:	4b32      	ldr	r3, [pc, #200]	@ (80009fc <__aeabi_dmul+0x314>)
 8000932:	e72f      	b.n	8000794 <__aeabi_dmul+0xac>
 8000934:	2202      	movs	r2, #2
 8000936:	4641      	mov	r1, r8
 8000938:	4311      	orrs	r1, r2
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	4694      	mov	ip, r2
 8000940:	002a      	movs	r2, r5
 8000942:	4462      	add	r2, ip
 8000944:	4688      	mov	r8, r1
 8000946:	9201      	str	r2, [sp, #4]
 8000948:	290a      	cmp	r1, #10
 800094a:	dd00      	ble.n	800094e <__aeabi_dmul+0x266>
 800094c:	e752      	b.n	80007f4 <__aeabi_dmul+0x10c>
 800094e:	465a      	mov	r2, fp
 8000950:	2000      	movs	r0, #0
 8000952:	9900      	ldr	r1, [sp, #0]
 8000954:	0004      	movs	r4, r0
 8000956:	404a      	eors	r2, r1
 8000958:	4693      	mov	fp, r2
 800095a:	2602      	movs	r6, #2
 800095c:	e70b      	b.n	8000776 <__aeabi_dmul+0x8e>
 800095e:	220c      	movs	r2, #12
 8000960:	001d      	movs	r5, r3
 8000962:	2303      	movs	r3, #3
 8000964:	4681      	mov	r9, r0
 8000966:	4690      	mov	r8, r2
 8000968:	9302      	str	r3, [sp, #8]
 800096a:	e6e3      	b.n	8000734 <__aeabi_dmul+0x4c>
 800096c:	2300      	movs	r3, #0
 800096e:	469a      	mov	sl, r3
 8000970:	3304      	adds	r3, #4
 8000972:	4698      	mov	r8, r3
 8000974:	3b03      	subs	r3, #3
 8000976:	2500      	movs	r5, #0
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	e6db      	b.n	8000734 <__aeabi_dmul+0x4c>
 800097c:	4642      	mov	r2, r8
 800097e:	3301      	adds	r3, #1
 8000980:	431a      	orrs	r2, r3
 8000982:	002b      	movs	r3, r5
 8000984:	4690      	mov	r8, r2
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	9201      	str	r2, [sp, #4]
 800098a:	4642      	mov	r2, r8
 800098c:	2400      	movs	r4, #0
 800098e:	2000      	movs	r0, #0
 8000990:	2601      	movs	r6, #1
 8000992:	2a0a      	cmp	r2, #10
 8000994:	dc00      	bgt.n	8000998 <__aeabi_dmul+0x2b0>
 8000996:	e6ea      	b.n	800076e <__aeabi_dmul+0x86>
 8000998:	e72c      	b.n	80007f4 <__aeabi_dmul+0x10c>
 800099a:	2201      	movs	r2, #1
 800099c:	1ad2      	subs	r2, r2, r3
 800099e:	2a38      	cmp	r2, #56	@ 0x38
 80009a0:	dd00      	ble.n	80009a4 <__aeabi_dmul+0x2bc>
 80009a2:	e6f4      	b.n	800078e <__aeabi_dmul+0xa6>
 80009a4:	2a1f      	cmp	r2, #31
 80009a6:	dc00      	bgt.n	80009aa <__aeabi_dmul+0x2c2>
 80009a8:	e12a      	b.n	8000c00 <__aeabi_dmul+0x518>
 80009aa:	211f      	movs	r1, #31
 80009ac:	4249      	negs	r1, r1
 80009ae:	1acb      	subs	r3, r1, r3
 80009b0:	0021      	movs	r1, r4
 80009b2:	40d9      	lsrs	r1, r3
 80009b4:	000b      	movs	r3, r1
 80009b6:	2a20      	cmp	r2, #32
 80009b8:	d005      	beq.n	80009c6 <__aeabi_dmul+0x2de>
 80009ba:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <__aeabi_dmul+0x32c>)
 80009bc:	9d01      	ldr	r5, [sp, #4]
 80009be:	4694      	mov	ip, r2
 80009c0:	4465      	add	r5, ip
 80009c2:	40ac      	lsls	r4, r5
 80009c4:	4320      	orrs	r0, r4
 80009c6:	1e42      	subs	r2, r0, #1
 80009c8:	4190      	sbcs	r0, r2
 80009ca:	4318      	orrs	r0, r3
 80009cc:	2307      	movs	r3, #7
 80009ce:	0019      	movs	r1, r3
 80009d0:	2400      	movs	r4, #0
 80009d2:	4001      	ands	r1, r0
 80009d4:	4203      	tst	r3, r0
 80009d6:	d00c      	beq.n	80009f2 <__aeabi_dmul+0x30a>
 80009d8:	230f      	movs	r3, #15
 80009da:	4003      	ands	r3, r0
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d100      	bne.n	80009e2 <__aeabi_dmul+0x2fa>
 80009e0:	e140      	b.n	8000c64 <__aeabi_dmul+0x57c>
 80009e2:	1d03      	adds	r3, r0, #4
 80009e4:	4283      	cmp	r3, r0
 80009e6:	41a4      	sbcs	r4, r4
 80009e8:	0018      	movs	r0, r3
 80009ea:	4264      	negs	r4, r4
 80009ec:	0761      	lsls	r1, r4, #29
 80009ee:	0264      	lsls	r4, r4, #9
 80009f0:	0b24      	lsrs	r4, r4, #12
 80009f2:	08c2      	lsrs	r2, r0, #3
 80009f4:	2300      	movs	r3, #0
 80009f6:	430a      	orrs	r2, r1
 80009f8:	e6cc      	b.n	8000794 <__aeabi_dmul+0xac>
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	000007ff 	.word	0x000007ff
 8000a00:	fffffc01 	.word	0xfffffc01
 8000a04:	000003ff 	.word	0x000003ff
 8000a08:	feffffff 	.word	0xfeffffff
 8000a0c:	000007fe 	.word	0x000007fe
 8000a10:	fffffc0d 	.word	0xfffffc0d
 8000a14:	0000043e 	.word	0x0000043e
 8000a18:	4649      	mov	r1, r9
 8000a1a:	464a      	mov	r2, r9
 8000a1c:	0409      	lsls	r1, r1, #16
 8000a1e:	0c09      	lsrs	r1, r1, #16
 8000a20:	000d      	movs	r5, r1
 8000a22:	0c16      	lsrs	r6, r2, #16
 8000a24:	0c02      	lsrs	r2, r0, #16
 8000a26:	0400      	lsls	r0, r0, #16
 8000a28:	0c00      	lsrs	r0, r0, #16
 8000a2a:	4345      	muls	r5, r0
 8000a2c:	46ac      	mov	ip, r5
 8000a2e:	0005      	movs	r5, r0
 8000a30:	4375      	muls	r5, r6
 8000a32:	46a8      	mov	r8, r5
 8000a34:	0015      	movs	r5, r2
 8000a36:	000f      	movs	r7, r1
 8000a38:	4375      	muls	r5, r6
 8000a3a:	9200      	str	r2, [sp, #0]
 8000a3c:	9502      	str	r5, [sp, #8]
 8000a3e:	002a      	movs	r2, r5
 8000a40:	9d00      	ldr	r5, [sp, #0]
 8000a42:	436f      	muls	r7, r5
 8000a44:	4665      	mov	r5, ip
 8000a46:	0c2d      	lsrs	r5, r5, #16
 8000a48:	46a9      	mov	r9, r5
 8000a4a:	4447      	add	r7, r8
 8000a4c:	444f      	add	r7, r9
 8000a4e:	45b8      	cmp	r8, r7
 8000a50:	d905      	bls.n	8000a5e <__aeabi_dmul+0x376>
 8000a52:	0015      	movs	r5, r2
 8000a54:	2280      	movs	r2, #128	@ 0x80
 8000a56:	0252      	lsls	r2, r2, #9
 8000a58:	4690      	mov	r8, r2
 8000a5a:	4445      	add	r5, r8
 8000a5c:	9502      	str	r5, [sp, #8]
 8000a5e:	0c3d      	lsrs	r5, r7, #16
 8000a60:	9503      	str	r5, [sp, #12]
 8000a62:	4665      	mov	r5, ip
 8000a64:	042d      	lsls	r5, r5, #16
 8000a66:	043f      	lsls	r7, r7, #16
 8000a68:	0c2d      	lsrs	r5, r5, #16
 8000a6a:	46ac      	mov	ip, r5
 8000a6c:	003d      	movs	r5, r7
 8000a6e:	4465      	add	r5, ip
 8000a70:	9504      	str	r5, [sp, #16]
 8000a72:	0c25      	lsrs	r5, r4, #16
 8000a74:	0424      	lsls	r4, r4, #16
 8000a76:	0c24      	lsrs	r4, r4, #16
 8000a78:	46ac      	mov	ip, r5
 8000a7a:	0025      	movs	r5, r4
 8000a7c:	4375      	muls	r5, r6
 8000a7e:	46a8      	mov	r8, r5
 8000a80:	4665      	mov	r5, ip
 8000a82:	000f      	movs	r7, r1
 8000a84:	4369      	muls	r1, r5
 8000a86:	4441      	add	r1, r8
 8000a88:	4689      	mov	r9, r1
 8000a8a:	4367      	muls	r7, r4
 8000a8c:	0c39      	lsrs	r1, r7, #16
 8000a8e:	4449      	add	r1, r9
 8000a90:	436e      	muls	r6, r5
 8000a92:	4588      	cmp	r8, r1
 8000a94:	d903      	bls.n	8000a9e <__aeabi_dmul+0x3b6>
 8000a96:	2280      	movs	r2, #128	@ 0x80
 8000a98:	0252      	lsls	r2, r2, #9
 8000a9a:	4690      	mov	r8, r2
 8000a9c:	4446      	add	r6, r8
 8000a9e:	0c0d      	lsrs	r5, r1, #16
 8000aa0:	46a8      	mov	r8, r5
 8000aa2:	0035      	movs	r5, r6
 8000aa4:	4445      	add	r5, r8
 8000aa6:	9505      	str	r5, [sp, #20]
 8000aa8:	9d03      	ldr	r5, [sp, #12]
 8000aaa:	043f      	lsls	r7, r7, #16
 8000aac:	46a8      	mov	r8, r5
 8000aae:	0c3f      	lsrs	r7, r7, #16
 8000ab0:	0409      	lsls	r1, r1, #16
 8000ab2:	19c9      	adds	r1, r1, r7
 8000ab4:	4488      	add	r8, r1
 8000ab6:	4645      	mov	r5, r8
 8000ab8:	9503      	str	r5, [sp, #12]
 8000aba:	4655      	mov	r5, sl
 8000abc:	042e      	lsls	r6, r5, #16
 8000abe:	0c36      	lsrs	r6, r6, #16
 8000ac0:	0c2f      	lsrs	r7, r5, #16
 8000ac2:	0035      	movs	r5, r6
 8000ac4:	4345      	muls	r5, r0
 8000ac6:	4378      	muls	r0, r7
 8000ac8:	4681      	mov	r9, r0
 8000aca:	0038      	movs	r0, r7
 8000acc:	46a8      	mov	r8, r5
 8000ace:	0c2d      	lsrs	r5, r5, #16
 8000ad0:	46aa      	mov	sl, r5
 8000ad2:	9a00      	ldr	r2, [sp, #0]
 8000ad4:	4350      	muls	r0, r2
 8000ad6:	4372      	muls	r2, r6
 8000ad8:	444a      	add	r2, r9
 8000ada:	4452      	add	r2, sl
 8000adc:	4591      	cmp	r9, r2
 8000ade:	d903      	bls.n	8000ae8 <__aeabi_dmul+0x400>
 8000ae0:	2580      	movs	r5, #128	@ 0x80
 8000ae2:	026d      	lsls	r5, r5, #9
 8000ae4:	46a9      	mov	r9, r5
 8000ae6:	4448      	add	r0, r9
 8000ae8:	0c15      	lsrs	r5, r2, #16
 8000aea:	46a9      	mov	r9, r5
 8000aec:	4645      	mov	r5, r8
 8000aee:	042d      	lsls	r5, r5, #16
 8000af0:	0c2d      	lsrs	r5, r5, #16
 8000af2:	46a8      	mov	r8, r5
 8000af4:	4665      	mov	r5, ip
 8000af6:	437d      	muls	r5, r7
 8000af8:	0412      	lsls	r2, r2, #16
 8000afa:	4448      	add	r0, r9
 8000afc:	4490      	add	r8, r2
 8000afe:	46a9      	mov	r9, r5
 8000b00:	0032      	movs	r2, r6
 8000b02:	4665      	mov	r5, ip
 8000b04:	4362      	muls	r2, r4
 8000b06:	436e      	muls	r6, r5
 8000b08:	437c      	muls	r4, r7
 8000b0a:	0c17      	lsrs	r7, r2, #16
 8000b0c:	1936      	adds	r6, r6, r4
 8000b0e:	19bf      	adds	r7, r7, r6
 8000b10:	42bc      	cmp	r4, r7
 8000b12:	d903      	bls.n	8000b1c <__aeabi_dmul+0x434>
 8000b14:	2480      	movs	r4, #128	@ 0x80
 8000b16:	0264      	lsls	r4, r4, #9
 8000b18:	46a4      	mov	ip, r4
 8000b1a:	44e1      	add	r9, ip
 8000b1c:	9c02      	ldr	r4, [sp, #8]
 8000b1e:	9e03      	ldr	r6, [sp, #12]
 8000b20:	46a4      	mov	ip, r4
 8000b22:	9d05      	ldr	r5, [sp, #20]
 8000b24:	4466      	add	r6, ip
 8000b26:	428e      	cmp	r6, r1
 8000b28:	4189      	sbcs	r1, r1
 8000b2a:	46ac      	mov	ip, r5
 8000b2c:	0412      	lsls	r2, r2, #16
 8000b2e:	043c      	lsls	r4, r7, #16
 8000b30:	0c12      	lsrs	r2, r2, #16
 8000b32:	18a2      	adds	r2, r4, r2
 8000b34:	4462      	add	r2, ip
 8000b36:	4249      	negs	r1, r1
 8000b38:	1854      	adds	r4, r2, r1
 8000b3a:	4446      	add	r6, r8
 8000b3c:	46a4      	mov	ip, r4
 8000b3e:	4546      	cmp	r6, r8
 8000b40:	41a4      	sbcs	r4, r4
 8000b42:	4682      	mov	sl, r0
 8000b44:	4264      	negs	r4, r4
 8000b46:	46a0      	mov	r8, r4
 8000b48:	42aa      	cmp	r2, r5
 8000b4a:	4192      	sbcs	r2, r2
 8000b4c:	458c      	cmp	ip, r1
 8000b4e:	4189      	sbcs	r1, r1
 8000b50:	44e2      	add	sl, ip
 8000b52:	44d0      	add	r8, sl
 8000b54:	4249      	negs	r1, r1
 8000b56:	4252      	negs	r2, r2
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	45a0      	cmp	r8, r4
 8000b5c:	41a4      	sbcs	r4, r4
 8000b5e:	4582      	cmp	sl, r0
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4264      	negs	r4, r4
 8000b64:	4249      	negs	r1, r1
 8000b66:	430c      	orrs	r4, r1
 8000b68:	4641      	mov	r1, r8
 8000b6a:	0c3f      	lsrs	r7, r7, #16
 8000b6c:	19d2      	adds	r2, r2, r7
 8000b6e:	1912      	adds	r2, r2, r4
 8000b70:	0dcc      	lsrs	r4, r1, #23
 8000b72:	9904      	ldr	r1, [sp, #16]
 8000b74:	0270      	lsls	r0, r6, #9
 8000b76:	4308      	orrs	r0, r1
 8000b78:	1e41      	subs	r1, r0, #1
 8000b7a:	4188      	sbcs	r0, r1
 8000b7c:	4641      	mov	r1, r8
 8000b7e:	444a      	add	r2, r9
 8000b80:	0df6      	lsrs	r6, r6, #23
 8000b82:	0252      	lsls	r2, r2, #9
 8000b84:	4330      	orrs	r0, r6
 8000b86:	0249      	lsls	r1, r1, #9
 8000b88:	4314      	orrs	r4, r2
 8000b8a:	4308      	orrs	r0, r1
 8000b8c:	01d2      	lsls	r2, r2, #7
 8000b8e:	d535      	bpl.n	8000bfc <__aeabi_dmul+0x514>
 8000b90:	2201      	movs	r2, #1
 8000b92:	0843      	lsrs	r3, r0, #1
 8000b94:	4002      	ands	r2, r0
 8000b96:	4313      	orrs	r3, r2
 8000b98:	07e0      	lsls	r0, r4, #31
 8000b9a:	4318      	orrs	r0, r3
 8000b9c:	0864      	lsrs	r4, r4, #1
 8000b9e:	e634      	b.n	800080a <__aeabi_dmul+0x122>
 8000ba0:	9b00      	ldr	r3, [sp, #0]
 8000ba2:	46a2      	mov	sl, r4
 8000ba4:	469b      	mov	fp, r3
 8000ba6:	4681      	mov	r9, r0
 8000ba8:	2480      	movs	r4, #128	@ 0x80
 8000baa:	4653      	mov	r3, sl
 8000bac:	0324      	lsls	r4, r4, #12
 8000bae:	431c      	orrs	r4, r3
 8000bb0:	0324      	lsls	r4, r4, #12
 8000bb2:	464a      	mov	r2, r9
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c70 <__aeabi_dmul+0x588>)
 8000bb6:	0b24      	lsrs	r4, r4, #12
 8000bb8:	e5ec      	b.n	8000794 <__aeabi_dmul+0xac>
 8000bba:	f000 f881 	bl	8000cc0 <__clzsi2>
 8000bbe:	2315      	movs	r3, #21
 8000bc0:	469c      	mov	ip, r3
 8000bc2:	4484      	add	ip, r0
 8000bc4:	0002      	movs	r2, r0
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	3220      	adds	r2, #32
 8000bca:	2b1c      	cmp	r3, #28
 8000bcc:	dc00      	bgt.n	8000bd0 <__aeabi_dmul+0x4e8>
 8000bce:	e684      	b.n	80008da <__aeabi_dmul+0x1f2>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	0023      	movs	r3, r4
 8000bd6:	3808      	subs	r0, #8
 8000bd8:	4083      	lsls	r3, r0
 8000bda:	469a      	mov	sl, r3
 8000bdc:	e68e      	b.n	80008fc <__aeabi_dmul+0x214>
 8000bde:	f000 f86f 	bl	8000cc0 <__clzsi2>
 8000be2:	0002      	movs	r2, r0
 8000be4:	0003      	movs	r3, r0
 8000be6:	3215      	adds	r2, #21
 8000be8:	3320      	adds	r3, #32
 8000bea:	2a1c      	cmp	r2, #28
 8000bec:	dc00      	bgt.n	8000bf0 <__aeabi_dmul+0x508>
 8000bee:	e64e      	b.n	800088e <__aeabi_dmul+0x1a6>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	0034      	movs	r4, r6
 8000bf4:	3a08      	subs	r2, #8
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	e652      	b.n	80008a2 <__aeabi_dmul+0x1ba>
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	e604      	b.n	800080a <__aeabi_dmul+0x122>
 8000c00:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <__aeabi_dmul+0x58c>)
 8000c02:	0021      	movs	r1, r4
 8000c04:	469c      	mov	ip, r3
 8000c06:	0003      	movs	r3, r0
 8000c08:	9d01      	ldr	r5, [sp, #4]
 8000c0a:	40d3      	lsrs	r3, r2
 8000c0c:	4465      	add	r5, ip
 8000c0e:	40a9      	lsls	r1, r5
 8000c10:	4319      	orrs	r1, r3
 8000c12:	0003      	movs	r3, r0
 8000c14:	40ab      	lsls	r3, r5
 8000c16:	1e58      	subs	r0, r3, #1
 8000c18:	4183      	sbcs	r3, r0
 8000c1a:	4319      	orrs	r1, r3
 8000c1c:	0008      	movs	r0, r1
 8000c1e:	40d4      	lsrs	r4, r2
 8000c20:	074b      	lsls	r3, r1, #29
 8000c22:	d009      	beq.n	8000c38 <__aeabi_dmul+0x550>
 8000c24:	230f      	movs	r3, #15
 8000c26:	400b      	ands	r3, r1
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d005      	beq.n	8000c38 <__aeabi_dmul+0x550>
 8000c2c:	1d0b      	adds	r3, r1, #4
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	4180      	sbcs	r0, r0
 8000c32:	4240      	negs	r0, r0
 8000c34:	1824      	adds	r4, r4, r0
 8000c36:	0018      	movs	r0, r3
 8000c38:	0223      	lsls	r3, r4, #8
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_dmul+0x556>
 8000c3c:	e6d6      	b.n	80009ec <__aeabi_dmul+0x304>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	2400      	movs	r4, #0
 8000c42:	2200      	movs	r2, #0
 8000c44:	e5a6      	b.n	8000794 <__aeabi_dmul+0xac>
 8000c46:	290f      	cmp	r1, #15
 8000c48:	d1aa      	bne.n	8000ba0 <__aeabi_dmul+0x4b8>
 8000c4a:	2380      	movs	r3, #128	@ 0x80
 8000c4c:	4652      	mov	r2, sl
 8000c4e:	031b      	lsls	r3, r3, #12
 8000c50:	421a      	tst	r2, r3
 8000c52:	d0a9      	beq.n	8000ba8 <__aeabi_dmul+0x4c0>
 8000c54:	421c      	tst	r4, r3
 8000c56:	d1a7      	bne.n	8000ba8 <__aeabi_dmul+0x4c0>
 8000c58:	431c      	orrs	r4, r3
 8000c5a:	9b00      	ldr	r3, [sp, #0]
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	469b      	mov	fp, r3
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <__aeabi_dmul+0x588>)
 8000c62:	e597      	b.n	8000794 <__aeabi_dmul+0xac>
 8000c64:	2400      	movs	r4, #0
 8000c66:	e6c1      	b.n	80009ec <__aeabi_dmul+0x304>
 8000c68:	2400      	movs	r4, #0
 8000c6a:	4b01      	ldr	r3, [pc, #4]	@ (8000c70 <__aeabi_dmul+0x588>)
 8000c6c:	0022      	movs	r2, r4
 8000c6e:	e591      	b.n	8000794 <__aeabi_dmul+0xac>
 8000c70:	000007ff 	.word	0x000007ff
 8000c74:	0000041e 	.word	0x0000041e

08000c78 <__aeabi_ui2d>:
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	1e04      	subs	r4, r0, #0
 8000c7c:	d010      	beq.n	8000ca0 <__aeabi_ui2d+0x28>
 8000c7e:	f000 f81f 	bl	8000cc0 <__clzsi2>
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <__aeabi_ui2d+0x44>)
 8000c84:	1a1b      	subs	r3, r3, r0
 8000c86:	055b      	lsls	r3, r3, #21
 8000c88:	0d5b      	lsrs	r3, r3, #21
 8000c8a:	280a      	cmp	r0, #10
 8000c8c:	dc0f      	bgt.n	8000cae <__aeabi_ui2d+0x36>
 8000c8e:	220b      	movs	r2, #11
 8000c90:	0021      	movs	r1, r4
 8000c92:	1a12      	subs	r2, r2, r0
 8000c94:	40d1      	lsrs	r1, r2
 8000c96:	3015      	adds	r0, #21
 8000c98:	030a      	lsls	r2, r1, #12
 8000c9a:	4084      	lsls	r4, r0
 8000c9c:	0b12      	lsrs	r2, r2, #12
 8000c9e:	e001      	b.n	8000ca4 <__aeabi_ui2d+0x2c>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	051b      	lsls	r3, r3, #20
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	0020      	movs	r0, r4
 8000caa:	0019      	movs	r1, r3
 8000cac:	bd10      	pop	{r4, pc}
 8000cae:	0022      	movs	r2, r4
 8000cb0:	380b      	subs	r0, #11
 8000cb2:	4082      	lsls	r2, r0
 8000cb4:	0312      	lsls	r2, r2, #12
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	0b12      	lsrs	r2, r2, #12
 8000cba:	e7f3      	b.n	8000ca4 <__aeabi_ui2d+0x2c>
 8000cbc:	0000041e 	.word	0x0000041e

08000cc0 <__clzsi2>:
 8000cc0:	211c      	movs	r1, #28
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	041b      	lsls	r3, r3, #16
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d301      	bcc.n	8000cce <__clzsi2+0xe>
 8000cca:	0c00      	lsrs	r0, r0, #16
 8000ccc:	3910      	subs	r1, #16
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	4298      	cmp	r0, r3
 8000cd2:	d301      	bcc.n	8000cd8 <__clzsi2+0x18>
 8000cd4:	0a00      	lsrs	r0, r0, #8
 8000cd6:	3908      	subs	r1, #8
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d301      	bcc.n	8000ce2 <__clzsi2+0x22>
 8000cde:	0900      	lsrs	r0, r0, #4
 8000ce0:	3904      	subs	r1, #4
 8000ce2:	a202      	add	r2, pc, #8	@ (adr r2, 8000cec <__clzsi2+0x2c>)
 8000ce4:	5c10      	ldrb	r0, [r2, r0]
 8000ce6:	1840      	adds	r0, r0, r1
 8000ce8:	4770      	bx	lr
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	02020304 	.word	0x02020304
 8000cf0:	01010101 	.word	0x01010101
	...

08000cfc <LCD_Init>:
		{ 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};
//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
 * Habilitamos las señales de reloj para los puertos I/O
	*/
	RCC->IOPENR		|=	( 0x1UL <<  1U );
 8000d02:	4ba7      	ldr	r3, [pc, #668]	@ (8000fa0 <LCD_Init+0x2a4>)
 8000d04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d06:	4ba6      	ldr	r3, [pc, #664]	@ (8000fa0 <LCD_Init+0x2a4>)
 8000d08:	2102      	movs	r1, #2
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	635a      	str	r2, [r3, #52]	@ 0x34
/**
 * Configuración de los pines de control (RS, RW, EN) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 18U );
 8000d0e:	4ba5      	ldr	r3, [pc, #660]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	4ba4      	ldr	r3, [pc, #656]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d14:	49a4      	ldr	r1, [pc, #656]	@ (8000fa8 <LCD_Init+0x2ac>)
 8000d16:	400a      	ands	r2, r1
 8000d18:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL <<  9U );
 8000d1a:	4ba2      	ldr	r3, [pc, #648]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	4ba1      	ldr	r3, [pc, #644]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d20:	49a2      	ldr	r1, [pc, #648]	@ (8000fac <LCD_Init+0x2b0>)
 8000d22:	400a      	ands	r2, r1
 8000d24:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 18U );
 8000d26:	4b9f      	ldr	r3, [pc, #636]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b9e      	ldr	r3, [pc, #632]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d2c:	49a0      	ldr	r1, [pc, #640]	@ (8000fb0 <LCD_Init+0x2b4>)
 8000d2e:	400a      	ands	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 18U );
 8000d32:	4b9c      	ldr	r3, [pc, #624]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4b9b      	ldr	r3, [pc, #620]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d38:	2180      	movs	r1, #128	@ 0x80
 8000d3a:	02c9      	lsls	r1, r1, #11
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
	GPIOB->PUPDR  &= ~( 0x3UL << 20U );
 8000d40:	4b98      	ldr	r3, [pc, #608]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	4b97      	ldr	r3, [pc, #604]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d46:	499b      	ldr	r1, [pc, #620]	@ (8000fb4 <LCD_Init+0x2b8>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 10U );
 8000d4c:	4b95      	ldr	r3, [pc, #596]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4b94      	ldr	r3, [pc, #592]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d52:	4999      	ldr	r1, [pc, #612]	@ (8000fb8 <LCD_Init+0x2bc>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 20U );
 8000d58:	4b92      	ldr	r3, [pc, #584]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b91      	ldr	r3, [pc, #580]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d5e:	4997      	ldr	r1, [pc, #604]	@ (8000fbc <LCD_Init+0x2c0>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 20U );
 8000d64:	4b8f      	ldr	r3, [pc, #572]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b8e      	ldr	r3, [pc, #568]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d6a:	2180      	movs	r1, #128	@ 0x80
 8000d6c:	0349      	lsls	r1, r1, #13
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
	GPIOB->PUPDR  &= ~( 0x3UL << 22U );
 8000d72:	4b8c      	ldr	r3, [pc, #560]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	4b8b      	ldr	r3, [pc, #556]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d78:	4991      	ldr	r1, [pc, #580]	@ (8000fc0 <LCD_Init+0x2c4>)
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 11U );
 8000d7e:	4b89      	ldr	r3, [pc, #548]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4b88      	ldr	r3, [pc, #544]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d84:	498f      	ldr	r1, [pc, #572]	@ (8000fc4 <LCD_Init+0x2c8>)
 8000d86:	400a      	ands	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 22U );
 8000d8a:	4b86      	ldr	r3, [pc, #536]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b85      	ldr	r3, [pc, #532]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d90:	498d      	ldr	r1, [pc, #564]	@ (8000fc8 <LCD_Init+0x2cc>)
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 22U );
 8000d96:	4b83      	ldr	r3, [pc, #524]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b82      	ldr	r3, [pc, #520]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000d9c:	2180      	movs	r1, #128	@ 0x80
 8000d9e:	03c9      	lsls	r1, r1, #15
 8000da0:	430a      	orrs	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
/**
 * Configuración de los pines de datos (D4-D7) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 0U );
 8000da4:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000daa:	2103      	movs	r1, #3
 8000dac:	438a      	bics	r2, r1
 8000dae:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 0U );
 8000db0:	4b7c      	ldr	r3, [pc, #496]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4b7b      	ldr	r3, [pc, #492]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	438a      	bics	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 0U );
 8000dbc:	4b79      	ldr	r3, [pc, #484]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b78      	ldr	r3, [pc, #480]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dc2:	2102      	movs	r1, #2
 8000dc4:	438a      	bics	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 0U );
 8000dc8:	4b76      	ldr	r3, [pc, #472]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b75      	ldr	r3, [pc, #468]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]
	GPIOB->PUPDR  &= ~( 0x3UL << 2U );
 8000dd4:	4b73      	ldr	r3, [pc, #460]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	4b72      	ldr	r3, [pc, #456]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dda:	210c      	movs	r1, #12
 8000ddc:	438a      	bics	r2, r1
 8000dde:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 1U );
 8000de0:	4b70      	ldr	r3, [pc, #448]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4b6f      	ldr	r3, [pc, #444]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000de6:	2102      	movs	r1, #2
 8000de8:	438a      	bics	r2, r1
 8000dea:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 2U );
 8000dec:	4b6d      	ldr	r3, [pc, #436]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b6c      	ldr	r3, [pc, #432]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000df2:	2108      	movs	r1, #8
 8000df4:	438a      	bics	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 2U );
 8000df8:	4b6a      	ldr	r3, [pc, #424]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b69      	ldr	r3, [pc, #420]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000dfe:	2104      	movs	r1, #4
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
	GPIOB->PUPDR  &= ~( 0x3UL << 4U );
 8000e04:	4b67      	ldr	r3, [pc, #412]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	4b66      	ldr	r3, [pc, #408]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e0a:	2130      	movs	r1, #48	@ 0x30
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 2U );
 8000e10:	4b64      	ldr	r3, [pc, #400]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	4b63      	ldr	r3, [pc, #396]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e16:	2104      	movs	r1, #4
 8000e18:	438a      	bics	r2, r1
 8000e1a:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 4U );
 8000e1c:	4b61      	ldr	r3, [pc, #388]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b60      	ldr	r3, [pc, #384]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e22:	2120      	movs	r1, #32
 8000e24:	438a      	bics	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 4U );
 8000e28:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b5d      	ldr	r3, [pc, #372]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e2e:	2110      	movs	r1, #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
	GPIOB->PUPDR  &= ~( 0x3UL << 6U );
 8000e34:	4b5b      	ldr	r3, [pc, #364]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	4b5a      	ldr	r3, [pc, #360]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e3a:	21c0      	movs	r1, #192	@ 0xc0
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 3U );
 8000e40:	4b58      	ldr	r3, [pc, #352]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	4b57      	ldr	r3, [pc, #348]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e46:	2108      	movs	r1, #8
 8000e48:	438a      	bics	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 6U );
 8000e4c:	4b55      	ldr	r3, [pc, #340]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b54      	ldr	r3, [pc, #336]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	438a      	bics	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 6U );
 8000e58:	4b52      	ldr	r3, [pc, #328]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b51      	ldr	r3, [pc, #324]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e5e:	2140      	movs	r1, #64	@ 0x40
 8000e60:	430a      	orrs	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
/**
 * Inicialización del LCD
 * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
 * Power ON
 */
	GPIOB->BSRR	 =	 LCD_RS_PIN_LOW;
 8000e64:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e66:	2280      	movs	r2, #128	@ 0x80
 8000e68:	0492      	lsls	r2, r2, #18
 8000e6a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_RW_PIN_LOW;
 8000e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e6e:	2280      	movs	r2, #128	@ 0x80
 8000e70:	04d2      	lsls	r2, r2, #19
 8000e72:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_EN_PIN_LOW;
 8000e74:	4b4b      	ldr	r3, [pc, #300]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	0512      	lsls	r2, r2, #20
 8000e7a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 8000e7c:	4b49      	ldr	r3, [pc, #292]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	0252      	lsls	r2, r2, #9
 8000e82:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_LOW;
 8000e84:	4b47      	ldr	r3, [pc, #284]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e86:	2280      	movs	r2, #128	@ 0x80
 8000e88:	0292      	lsls	r2, r2, #10
 8000e8a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000e8c:	4b45      	ldr	r3, [pc, #276]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	02d2      	lsls	r2, r2, #11
 8000e92:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000e94:	4b43      	ldr	r3, [pc, #268]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	0312      	lsls	r2, r2, #12
 8000e9a:	619a      	str	r2, [r3, #24]
	delay_ms(50);// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 40ms
 8000e9c:	2032      	movs	r0, #50	@ 0x32
 8000e9e:	f000 faad 	bl	80013fc <delay_ms>
	/* Special case of 'Function Set'	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8000ea2:	4b40      	ldr	r3, [pc, #256]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000eae:	4b3d      	ldr	r3, [pc, #244]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000eb0:	2280      	movs	r2, #128	@ 0x80
 8000eb2:	02d2      	lsls	r2, r2, #11
 8000eb4:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	0312      	lsls	r2, r2, #12
 8000ebc:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000ebe:	f000 fa81 	bl	80013c4 <LCD_Pulse_EN>
	delay_ms(5);// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 4.1ms
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f000 fa9a 	bl	80013fc <delay_ms>
	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8000ec8:	4b36      	ldr	r3, [pc, #216]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8000ece:	4b35      	ldr	r3, [pc, #212]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000ed4:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	02d2      	lsls	r2, r2, #11
 8000eda:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000edc:	4b31      	ldr	r3, [pc, #196]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	0312      	lsls	r2, r2, #12
 8000ee2:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000ee4:	f000 fa6e 	bl	80013c4 <LCD_Pulse_EN>
	delay_us(60);// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	wait > 53us
 8000ee8:	203c      	movs	r0, #60	@ 0x3c
 8000eea:	f000 faa3 	bl	8001434 <delay_us>
	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000efa:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	02d2      	lsls	r2, r2, #11
 8000f00:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000f04:	2280      	movs	r2, #128	@ 0x80
 8000f06:	0312      	lsls	r2, r2, #12
 8000f08:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000f0a:	f000 fa5b 	bl	80013c4 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	f000 f9ee 	bl	80012f0 <LCD_Busy>
 8000f14:	1e03      	subs	r3, r0, #0
 8000f16:	d1fb      	bne.n	8000f10 <LCD_Init+0x214>
	/* Initial 'Function Set' to change 4-bit mode	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000f1a:	2280      	movs	r2, #128	@ 0x80
 8000f1c:	0252      	lsls	r2, r2, #9
 8000f1e:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	02d2      	lsls	r2, r2, #11
 8000f2c:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <LCD_Init+0x2a8>)
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	0312      	lsls	r2, r2, #12
 8000f34:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000f36:	f000 fa45 	bl	80013c4 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	f000 f9d8 	bl	80012f0 <LCD_Busy>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d1fb      	bne.n	8000f3c <LCD_Init+0x240>
	/* 'Function Set' (I=1, N and F as required)	*/
	LCD_Write_Cmd( 0x28U );
 8000f44:	2028      	movs	r0, #40	@ 0x28
 8000f46:	f000 f8a7 	bl	8001098 <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/
	LCD_Write_Cmd( 0x08U );
 8000f4a:	2008      	movs	r0, #8
 8000f4c:	f000 f8a4 	bl	8001098 <LCD_Write_Cmd>
	/* 'Clear Display'	*/
	LCD_Write_Cmd( 0x01U );//
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 f8a1 	bl	8001098 <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)	*/
	LCD_Write_Cmd( 0x06U );
 8000f56:	2006      	movs	r0, #6
 8000f58:	f000 f89e 	bl	8001098 <LCD_Write_Cmd>
	/* Initialization Ends	*/
	LCD_Write_Cmd( 0x0FU );
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f000 f89b 	bl	8001098 <LCD_Write_Cmd>
	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );
 8000f62:	2040      	movs	r0, #64	@ 0x40
 8000f64:	f000 f898 	bl	8001098 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <LCD_Init+0x2d0>)
 8000f6a:	607b      	str	r3, [r7, #4]
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	e00c      	b.n	8000f8c <LCD_Init+0x290>
		LCD_Put_Char( *p );
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 f8a4 	bl	80010c8 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f90:	d9ef      	bls.n	8000f72 <LCD_Init+0x276>
	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8000f92:	2080      	movs	r0, #128	@ 0x80
 8000f94:	f000 f880 	bl	8001098 <LCD_Write_Cmd>
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	50000400 	.word	0x50000400
 8000fa8:	fff3ffff 	.word	0xfff3ffff
 8000fac:	fffffdff 	.word	0xfffffdff
 8000fb0:	fff7ffff 	.word	0xfff7ffff
 8000fb4:	ffcfffff 	.word	0xffcfffff
 8000fb8:	fffffbff 	.word	0xfffffbff
 8000fbc:	ffdfffff 	.word	0xffdfffff
 8000fc0:	ff3fffff 	.word	0xff3fffff
 8000fc4:	fffff7ff 	.word	0xfffff7ff
 8000fc8:	ff7fffff 	.word	0xff7fffff
 8000fcc:	080067b4 	.word	0x080067b4

08000fd0 <LCD_Out_Data4>:
//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	701a      	strb	r2, [r3, #0]
	if( ( val & 0x01U ) == 0x01U )
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	d003      	beq.n	8000fee <LCD_Out_Data4+0x1e>
		GPIOB->BSRR	=	LCD_D4_PIN_HIGH;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <LCD_Out_Data4+0x7c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	619a      	str	r2, [r3, #24]
 8000fec:	e003      	b.n	8000ff6 <LCD_Out_Data4+0x26>
	else
		GPIOB->BSRR	=	LCD_D4_PIN_LOW;
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <LCD_Out_Data4+0x7c>)
 8000ff0:	2280      	movs	r2, #128	@ 0x80
 8000ff2:	0252      	lsls	r2, r2, #9
 8000ff4:	619a      	str	r2, [r3, #24]
	if( ( val & 0x02U ) == 0x02U )
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d003      	beq.n	8001008 <LCD_Out_Data4+0x38>
		GPIOB->BSRR	=	LCD_D5_PIN_HIGH;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <LCD_Out_Data4+0x7c>)
 8001002:	2202      	movs	r2, #2
 8001004:	619a      	str	r2, [r3, #24]
 8001006:	e003      	b.n	8001010 <LCD_Out_Data4+0x40>
	else
		GPIOB->BSRR	=	LCD_D5_PIN_LOW;
 8001008:	4b10      	ldr	r3, [pc, #64]	@ (800104c <LCD_Out_Data4+0x7c>)
 800100a:	2280      	movs	r2, #128	@ 0x80
 800100c:	0292      	lsls	r2, r2, #10
 800100e:	619a      	str	r2, [r3, #24]
	if( ( val & 0x04U ) == 0x04U )
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2204      	movs	r2, #4
 8001016:	4013      	ands	r3, r2
 8001018:	d003      	beq.n	8001022 <LCD_Out_Data4+0x52>
		GPIOB->BSRR	=	LCD_D6_PIN_HIGH;
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <LCD_Out_Data4+0x7c>)
 800101c:	2204      	movs	r2, #4
 800101e:	619a      	str	r2, [r3, #24]
 8001020:	e003      	b.n	800102a <LCD_Out_Data4+0x5a>
	else
		GPIOB->BSRR	=	LCD_D6_PIN_LOW;
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <LCD_Out_Data4+0x7c>)
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	02d2      	lsls	r2, r2, #11
 8001028:	619a      	str	r2, [r3, #24]
	if( ( val & 0x08U ) == 0x08U )
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2208      	movs	r2, #8
 8001030:	4013      	ands	r3, r2
 8001032:	d003      	beq.n	800103c <LCD_Out_Data4+0x6c>
		GPIOB->BSRR	=	LCD_D7_PIN_HIGH;
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <LCD_Out_Data4+0x7c>)
 8001036:	2208      	movs	r2, #8
 8001038:	619a      	str	r2, [r3, #24]
	else
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
}
 800103a:	e003      	b.n	8001044 <LCD_Out_Data4+0x74>
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <LCD_Out_Data4+0x7c>)
 800103e:	2280      	movs	r2, #128	@ 0x80
 8001040:	0312      	lsls	r2, r2, #12
 8001042:	619a      	str	r2, [r3, #24]
}
 8001044:	46c0      	nop			@ (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}
 800104c:	50000400 	.word	0x50000400

08001050 <LCD_Write_Byte>:
//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	0002      	movs	r2, r0
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	701a      	strb	r2, [r3, #0]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ffb3 	bl	8000fd0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800106a:	f000 f9ab 	bl	80013c4 <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	220f      	movs	r2, #15
 8001074:	4013      	ands	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff ffa9 	bl	8000fd0 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800107e:	f000 f9a1 	bl	80013c4 <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	f000 f934 	bl	80012f0 <LCD_Busy>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d1fb      	bne.n	8001084 <LCD_Write_Byte+0x34>
}
 800108c:	46c0      	nop			@ (mov r8, r8)
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <LCD_Write_Cmd>:
//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	|=	LCD_RS_PIN_LOW;
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <LCD_Write_Cmd+0x2c>)
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <LCD_Write_Cmd+0x2c>)
 80010aa:	2180      	movs	r1, #128	@ 0x80
 80010ac:	0489      	lsls	r1, r1, #18
 80010ae:	430a      	orrs	r2, r1
 80010b0:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( val );
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff ffca 	bl	8001050 <LCD_Write_Byte>
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	50000400 	.word	0x50000400

080010c8 <LCD_Put_Char>:
//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_HIGH;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <LCD_Put_Char+0x28>)
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( c );
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff ffb5 	bl	8001050 <LCD_Write_Byte>
}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	50000400 	.word	0x50000400

080010f4 <LCD_Set_Cursor>:
//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	0002      	movs	r2, r0
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	1c0a      	adds	r2, r1, #0
 8001104:	701a      	strb	r2, [r3, #0]
	uint8_t address;
	column--;
 8001106:	1dbb      	adds	r3, r7, #6
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	1dbb      	adds	r3, r7, #6
 800110c:	3a01      	subs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
	line--;
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	3a01      	subs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
	address = ( line * 0x40U ) + column;
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	019b      	lsls	r3, r3, #6
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	200f      	movs	r0, #15
 8001124:	183b      	adds	r3, r7, r0
 8001126:	1dba      	adds	r2, r7, #6
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	188a      	adds	r2, r1, r2
 800112c:	701a      	strb	r2, [r3, #0]
	address = 0x80U + ( address & 0x7FU );
 800112e:	0001      	movs	r1, r0
 8001130:	187b      	adds	r3, r7, r1
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	227f      	movs	r2, #127	@ 0x7f
 8001136:	4013      	ands	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	187b      	adds	r3, r7, r1
 800113c:	3a80      	subs	r2, #128	@ 0x80
 800113e:	701a      	strb	r2, [r3, #0]
	LCD_Write_Cmd( address );
 8001140:	187b      	adds	r3, r7, r1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ffa7 	bl	8001098 <LCD_Write_Cmd>
}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b004      	add	sp, #16
 8001150:	bd80      	pop	{r7, pc}

08001152 <LCD_Put_Str>:
//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 8001152:	b590      	push	{r4, r7, lr}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 800115a:	230e      	movs	r3, #14
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
 8001162:	e012      	b.n	800118a <LCD_Put_Str+0x38>
		LCD_Put_Char( str[ i ] );
 8001164:	240e      	movs	r4, #14
 8001166:	193b      	adds	r3, r7, r4
 8001168:	2200      	movs	r2, #0
 800116a:	5e9b      	ldrsh	r3, [r3, r2]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0018      	movs	r0, r3
 8001174:	f7ff ffa8 	bl	80010c8 <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8001178:	0021      	movs	r1, r4
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2200      	movs	r2, #0
 800117e:	5e9b      	ldrsh	r3, [r3, r2]
 8001180:	b29b      	uxth	r3, r3
 8001182:	3301      	adds	r3, #1
 8001184:	b29a      	uxth	r2, r3
 8001186:	187b      	adds	r3, r7, r1
 8001188:	801a      	strh	r2, [r3, #0]
 800118a:	220e      	movs	r2, #14
 800118c:	18bb      	adds	r3, r7, r2
 800118e:	2100      	movs	r1, #0
 8001190:	5e5b      	ldrsh	r3, [r3, r1]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	dc07      	bgt.n	80011a6 <LCD_Put_Str+0x54>
 8001196:	18bb      	adds	r3, r7, r2
 8001198:	2200      	movs	r2, #0
 800119a:	5e9b      	ldrsh	r3, [r3, r2]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	18d3      	adds	r3, r2, r3
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1de      	bne.n	8001164 <LCD_Put_Str+0x12>
}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b005      	add	sp, #20
 80011ac:	bd90      	pop	{r4, r7, pc}

080011ae <LCD_Put_Num>:
//Funcion que envia un caracter numerico al LCD
//El número debe ser entero y de 5 dígitos máximo
void LCD_Put_Num(int16_t num){
 80011ae:	b590      	push	{r4, r7, lr}
 80011b0:	b087      	sub	sp, #28
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	0002      	movs	r2, r0
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	801a      	strh	r2, [r3, #0]
	int16_t p;
	int16_t f = 0;
 80011ba:	2314      	movs	r3, #20
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	801a      	strh	r2, [r3, #0]
	int8_t ch[ 5 ];
	for( int16_t i = 0; i < 5; i++ ){
 80011c2:	2312      	movs	r3, #18
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	e085      	b.n	80012d8 <LCD_Put_Num+0x12a>
		p = 1;
 80011cc:	2316      	movs	r3, #22
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2201      	movs	r2, #1
 80011d2:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 80011d4:	2312      	movs	r3, #18
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	2204      	movs	r2, #4
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b29a      	uxth	r2, r3
 80011e0:	2310      	movs	r3, #16
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	e012      	b.n	800120e <LCD_Put_Num+0x60>
			p = p * 10;
 80011e8:	2116      	movs	r1, #22
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	1c1a      	adds	r2, r3, #0
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	18db      	adds	r3, r3, r3
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 80011fc:	2110      	movs	r1, #16
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2200      	movs	r2, #0
 8001202:	5e9b      	ldrsh	r3, [r3, r2]
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	187b      	adds	r3, r7, r1
 800120c:	801a      	strh	r2, [r3, #0]
 800120e:	2310      	movs	r3, #16
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	2200      	movs	r2, #0
 8001214:	5e9b      	ldrsh	r3, [r3, r2]
 8001216:	2b00      	cmp	r3, #0
 8001218:	dce6      	bgt.n	80011e8 <LCD_Put_Num+0x3a>
		ch[ i ] = ( num / p );
 800121a:	1dbb      	adds	r3, r7, #6
 800121c:	2200      	movs	r2, #0
 800121e:	5e9a      	ldrsh	r2, [r3, r2]
 8001220:	2416      	movs	r4, #22
 8001222:	193b      	adds	r3, r7, r4
 8001224:	2100      	movs	r1, #0
 8001226:	5e5b      	ldrsh	r3, [r3, r1]
 8001228:	0019      	movs	r1, r3
 800122a:	0010      	movs	r0, r2
 800122c:	f7ff f808 	bl	8000240 <__divsi3>
 8001230:	0003      	movs	r3, r0
 8001232:	001a      	movs	r2, r3
 8001234:	2312      	movs	r3, #18
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2100      	movs	r1, #0
 800123a:	5e5b      	ldrsh	r3, [r3, r1]
 800123c:	b251      	sxtb	r1, r2
 800123e:	2208      	movs	r2, #8
 8001240:	18ba      	adds	r2, r7, r2
 8001242:	54d1      	strb	r1, [r2, r3]
		if( num >= p && !f )
 8001244:	1dba      	adds	r2, r7, #6
 8001246:	193b      	adds	r3, r7, r4
 8001248:	2100      	movs	r1, #0
 800124a:	5e52      	ldrsh	r2, [r2, r1]
 800124c:	2100      	movs	r1, #0
 800124e:	5e5b      	ldrsh	r3, [r3, r1]
 8001250:	429a      	cmp	r2, r3
 8001252:	db08      	blt.n	8001266 <LCD_Put_Num+0xb8>
 8001254:	2214      	movs	r2, #20
 8001256:	18bb      	adds	r3, r7, r2
 8001258:	2100      	movs	r1, #0
 800125a:	5e5b      	ldrsh	r3, [r3, r1]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <LCD_Put_Num+0xb8>
			f = 1;
 8001260:	18bb      	adds	r3, r7, r2
 8001262:	2201      	movs	r2, #1
 8001264:	801a      	strh	r2, [r3, #0]
		num = num - ch[ i ] * p;
 8001266:	1dbb      	adds	r3, r7, #6
 8001268:	881a      	ldrh	r2, [r3, #0]
 800126a:	2012      	movs	r0, #18
 800126c:	183b      	adds	r3, r7, r0
 800126e:	2100      	movs	r1, #0
 8001270:	5e5b      	ldrsh	r3, [r3, r1]
 8001272:	2408      	movs	r4, #8
 8001274:	1939      	adds	r1, r7, r4
 8001276:	56cb      	ldrsb	r3, [r1, r3]
 8001278:	b29b      	uxth	r3, r3
 800127a:	2116      	movs	r1, #22
 800127c:	1879      	adds	r1, r7, r1
 800127e:	8809      	ldrh	r1, [r1, #0]
 8001280:	434b      	muls	r3, r1
 8001282:	b29b      	uxth	r3, r3
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b29a      	uxth	r2, r3
 8001288:	1dbb      	adds	r3, r7, #6
 800128a:	801a      	strh	r2, [r3, #0]
		ch[ i ] = ch[ i ] + 48;
 800128c:	183b      	adds	r3, r7, r0
 800128e:	2200      	movs	r2, #0
 8001290:	5e9b      	ldrsh	r3, [r3, r2]
 8001292:	193a      	adds	r2, r7, r4
 8001294:	56d3      	ldrsb	r3, [r2, r3]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	3330      	adds	r3, #48	@ 0x30
 800129a:	b2da      	uxtb	r2, r3
 800129c:	183b      	adds	r3, r7, r0
 800129e:	2100      	movs	r1, #0
 80012a0:	5e5b      	ldrsh	r3, [r3, r1]
 80012a2:	b251      	sxtb	r1, r2
 80012a4:	193a      	adds	r2, r7, r4
 80012a6:	54d1      	strb	r1, [r2, r3]
		if( f )
 80012a8:	2314      	movs	r3, #20
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	5e9b      	ldrsh	r3, [r3, r2]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d008      	beq.n	80012c6 <LCD_Put_Num+0x118>
			LCD_Put_Char( ch[ i ] );
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	2200      	movs	r2, #0
 80012b8:	5e9b      	ldrsh	r3, [r3, r2]
 80012ba:	193a      	adds	r2, r7, r4
 80012bc:	56d3      	ldrsb	r3, [r2, r3]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	0018      	movs	r0, r3
 80012c2:	f7ff ff01 	bl	80010c8 <LCD_Put_Char>
	for( int16_t i = 0; i < 5; i++ ){
 80012c6:	2112      	movs	r1, #18
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2200      	movs	r2, #0
 80012cc:	5e9b      	ldrsh	r3, [r3, r2]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	801a      	strh	r2, [r3, #0]
 80012d8:	2312      	movs	r3, #18
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	5e9b      	ldrsh	r3, [r3, r2]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	dc00      	bgt.n	80012e6 <LCD_Put_Num+0x138>
 80012e4:	e772      	b.n	80011cc <LCD_Put_Num+0x1e>
	}
}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b007      	add	sp, #28
 80012ee:	bd90      	pop	{r4, r7, pc}

080012f0 <LCD_Busy>:
//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
/**
 * Configuracion de D7 as input floating
 */
	GPIOB->PUPDR &= ~( 0x3UL << 6U );
 80012f4:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <LCD_Busy+0xd0>)
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <LCD_Busy+0xd0>)
 80012fa:	21c0      	movs	r1, #192	@ 0xc0
 80012fc:	438a      	bics	r2, r1
 80012fe:	60da      	str	r2, [r3, #12]
	GPIOB->MODER &= ~( 0x3UL << 6U );
 8001300:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <LCD_Busy+0xd0>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <LCD_Busy+0xd0>)
 8001306:	21c0      	movs	r1, #192	@ 0xc0
 8001308:	438a      	bics	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
	GPIOB->BSRR	  =	 LCD_RS_PIN_LOW;
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <LCD_Busy+0xd0>)
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	0492      	lsls	r2, r2, #18
 8001312:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_RW_PIN_HIGH;
 8001314:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <LCD_Busy+0xd0>)
 8001316:	2280      	movs	r2, #128	@ 0x80
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_EN_PIN_HIGH;
 800131c:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <LCD_Busy+0xd0>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	619a      	str	r2, [r3, #24]
	delay_us(100); // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for 100us
 8001324:	2064      	movs	r0, #100	@ 0x64
 8001326:	f000 f885 	bl	8001434 <delay_us>
	if(( GPIOB->IDR	&  LCD_D7_PIN_HIGH )) {
 800132a:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <LCD_Busy+0xd0>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2208      	movs	r2, #8
 8001330:	4013      	ands	r3, r2
 8001332:	d021      	beq.n	8001378 <LCD_Busy+0x88>
		GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 8001334:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <LCD_Busy+0xd0>)
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	0512      	lsls	r2, r2, #20
 800133a:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR	=  LCD_RW_PIN_LOW;
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <LCD_Busy+0xd0>)
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	04d2      	lsls	r2, r2, #19
 8001342:	619a      	str	r2, [r3, #24]
/**
 * Configuracion de D7 as output push-pull
 */
	GPIOB->PUPDR  &= ~( 0x3UL << 6U );
 8001344:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <LCD_Busy+0xd0>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <LCD_Busy+0xd0>)
 800134a:	21c0      	movs	r1, #192	@ 0xc0
 800134c:	438a      	bics	r2, r1
 800134e:	60da      	str	r2, [r3, #12]
 	GPIOB->OTYPER &= ~( 0x1UL << 3U );
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <LCD_Busy+0xd0>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <LCD_Busy+0xd0>)
 8001356:	2108      	movs	r1, #8
 8001358:	438a      	bics	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
 	GPIOB->MODER  &= ~( 0x2UL << 6U );
 800135c:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <LCD_Busy+0xd0>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <LCD_Busy+0xd0>)
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	438a      	bics	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 	GPIOB->MODER  |=  ( 0x1UL << 6U );
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <LCD_Busy+0xd0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <LCD_Busy+0xd0>)
 800136e:	2140      	movs	r1, #64	@ 0x40
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
		return 1;
 8001374:	2301      	movs	r3, #1
 8001376:	e020      	b.n	80013ba <LCD_Busy+0xca>
	} else {
		GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <LCD_Busy+0xd0>)
 800137a:	2280      	movs	r2, #128	@ 0x80
 800137c:	0512      	lsls	r2, r2, #20
 800137e:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR	=  LCD_RW_PIN_LOW;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <LCD_Busy+0xd0>)
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	04d2      	lsls	r2, r2, #19
 8001386:	619a      	str	r2, [r3, #24]
/**
 * Configuracion de D7 as output push-pull
 */
	GPIOB->PUPDR  &= ~( 0x3UL << 6U );
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <LCD_Busy+0xd0>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <LCD_Busy+0xd0>)
 800138e:	21c0      	movs	r1, #192	@ 0xc0
 8001390:	438a      	bics	r2, r1
 8001392:	60da      	str	r2, [r3, #12]
 	GPIOB->OTYPER &= ~( 0x1UL << 3U );
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <LCD_Busy+0xd0>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <LCD_Busy+0xd0>)
 800139a:	2108      	movs	r1, #8
 800139c:	438a      	bics	r2, r1
 800139e:	605a      	str	r2, [r3, #4]
 	GPIOB->MODER  &= ~( 0x2UL << 6U );
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <LCD_Busy+0xd0>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <LCD_Busy+0xd0>)
 80013a6:	2180      	movs	r1, #128	@ 0x80
 80013a8:	438a      	bics	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 	GPIOB->MODER  |=  ( 0x1UL << 6U );
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <LCD_Busy+0xd0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <LCD_Busy+0xd0>)
 80013b2:	2140      	movs	r1, #64	@ 0x40
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
//	GPIOA->PUPDR  &= ~( 0x3UL << 6U );
//	GPIOA->OTYPER &= ~( 0x1UL << 3U );
//	GPIOA->MODER  &= ~( 0x2UL << 6U );
//	GPIOA->MODER  |=  ( 0x1UL << 12U );
		return 0;
 80013b8:	2300      	movs	r3, #0
	}
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	50000400 	.word	0x50000400

080013c4 <LCD_Pulse_EN>:
//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;//
 80013c8:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <LCD_Pulse_EN+0x34>)
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	0512      	lsls	r2, r2, #20
 80013ce:	619a      	str	r2, [r3, #24]
	delay_us(10); // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	10us
 80013d0:	200a      	movs	r0, #10
 80013d2:	f000 f82f 	bl	8001434 <delay_us>
	GPIOB->BSRR	=	LCD_EN_PIN_HIGH;
 80013d6:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <LCD_Pulse_EN+0x34>)
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	619a      	str	r2, [r3, #24]
	delay_us(10);// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	10us
 80013de:	200a      	movs	r0, #10
 80013e0:	f000 f828 	bl	8001434 <delay_us>
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <LCD_Pulse_EN+0x34>)
 80013e6:	2280      	movs	r2, #128	@ 0x80
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	619a      	str	r2, [r3, #24]
	delay_ms(1); // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! wait for	1ms
 80013ec:	2001      	movs	r0, #1
 80013ee:	f000 f805 	bl	80013fc <delay_ms>
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	50000400 	.word	0x50000400

080013fc <delay_ms>:
		}
	}
}


void delay_ms(uint32_t ms) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < ms * 4800; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e003      	b.n	8001412 <delay_ms+0x16>
    __asm__("nop");
 800140a:	46c0      	nop			@ (mov r8, r8)
  for (uint32_t i = 0; i < ms * 4800; i++) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	0013      	movs	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	189b      	adds	r3, r3, r2
 800141a:	011a      	lsls	r2, r3, #4
 800141c:	1ad2      	subs	r2, r2, r3
 800141e:	0193      	lsls	r3, r2, #6
 8001420:	001a      	movs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4293      	cmp	r3, r2
 8001426:	d3f0      	bcc.n	800140a <delay_ms+0xe>
  }
}
 8001428:	46c0      	nop			@ (mov r8, r8)
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <delay_us>:
void delay_us(uint32_t us) {
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < us * 4.8; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	e003      	b.n	800144a <delay_us+0x16>
    __asm__("nop");
 8001442:	46c0      	nop			@ (mov r8, r8)
  for (uint32_t i = 0; i < us * 4.8; i++) {
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fc14 	bl	8000c78 <__aeabi_ui2d>
 8001450:	0004      	movs	r4, r0
 8001452:	000d      	movs	r5, r1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fc0f 	bl	8000c78 <__aeabi_ui2d>
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <delay_us+0x48>)
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <delay_us+0x4c>)
 800145e:	f7ff f943 	bl	80006e8 <__aeabi_dmul>
 8001462:	0002      	movs	r2, r0
 8001464:	000b      	movs	r3, r1
 8001466:	0020      	movs	r0, r4
 8001468:	0029      	movs	r1, r5
 800146a:	f7fe ffeb 	bl	8000444 <__aeabi_dcmplt>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d1e7      	bne.n	8001442 <delay_us+0xe>
  }
}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bdb0      	pop	{r4, r5, r7, pc}
 800147c:	33333333 	.word	0x33333333
 8001480:	40133333 	.word	0x40133333

08001484 <main>:

uint16_t rpm, vl, gear;


/* Superloop structure */
int main(void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af02      	add	r7, sp, #8
  /* Initialization of Peripherals */
  HAL_Init();
 800148a:	f001 f858 	bl	800253e <HAL_Init>
  USER_RCC_Init(); 				// Set CLK to 48MHz
 800148e:	f000 faa7 	bl	80019e0 <USER_RCC_Init>

  // Initialize Inputs
  USER_GPIO_Init();				// Initialize push button (break)
 8001492:	f000 fa51 	bl	8001938 <USER_GPIO_Init>
  USER_TIM3_PWM_Init();			// Set TIM3 CH1-4 to PWM
 8001496:	f000 fd1d 	bl	8001ed4 <USER_TIM3_PWM_Init>

  // UARTs
  USER_USART1_Init();			// Enable Full-Duplex UART communication
 800149a:	f000 ff35 	bl	8002308 <USER_USART1_Init>
  //USER_UART2_Init();

  // Timers
  USER_TIM14_Init();			// Enable TIM14 for Delay
 800149e:	f000 fe87 	bl	80021b0 <USER_TIM14_Init>
  //USER_TIM16_Init();
  //USER_TIM17_Init_Timer();

  // Initialize Outputs
  LCD_Init();					// Initialize LCD
 80014a2:	f7ff fc2b 	bl	8000cfc <LCD_Init>

  //Initialize Inputs
  USER_ADC_Init();
 80014a6:	f000 fc69 	bl	8001d7c <USER_ADC_Init>

  //Driver Modules
  L298N_Init();
 80014aa:	f000 fad9 	bl	8001a60 <L298N_Init>

  // Create Task
  xTaskCreate(UpdateInputs, "UpdateInputs", 128, NULL, 3, &hTask_UpdateInputs);
 80014ae:	491f      	ldr	r1, [pc, #124]	@ (800152c <main+0xa8>)
 80014b0:	481f      	ldr	r0, [pc, #124]	@ (8001530 <main+0xac>)
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <main+0xb0>)
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	2303      	movs	r3, #3
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2300      	movs	r3, #0
 80014bc:	2280      	movs	r2, #128	@ 0x80
 80014be:	f002 f99d 	bl	80037fc <xTaskCreate>
  xTaskCreate(UpdateOutputs, "UpdateOutputs", 128, NULL, 1, &hTask_UpdateOutputs);
 80014c2:	491d      	ldr	r1, [pc, #116]	@ (8001538 <main+0xb4>)
 80014c4:	481d      	ldr	r0, [pc, #116]	@ (800153c <main+0xb8>)
 80014c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <main+0xbc>)
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	2301      	movs	r3, #1
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	f002 f993 	bl	80037fc <xTaskCreate>
  xTaskCreate(transmit_data, "Transmit_data", 128, NULL, 2, &hTask_Transmit_data);
 80014d6:	491b      	ldr	r1, [pc, #108]	@ (8001544 <main+0xc0>)
 80014d8:	481b      	ldr	r0, [pc, #108]	@ (8001548 <main+0xc4>)
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <main+0xc8>)
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2302      	movs	r3, #2
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	f002 f989 	bl	80037fc <xTaskCreate>
  xTaskCreate(BridgeUART_data, "BridgeUART_data", 128, NULL, 2, &hTask_SimulateInputs);
 80014ea:	4919      	ldr	r1, [pc, #100]	@ (8001550 <main+0xcc>)
 80014ec:	4819      	ldr	r0, [pc, #100]	@ (8001554 <main+0xd0>)
 80014ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <main+0xd4>)
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2302      	movs	r3, #2
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	f002 f97f 	bl	80037fc <xTaskCreate>

  //Create Queues
  xQueueI = xQueueCreate( 2, sizeof(struct message_inputs * ));
 80014fe:	2200      	movs	r2, #0
 8001500:	2104      	movs	r1, #4
 8001502:	2002      	movs	r0, #2
 8001504:	f001 fd8d 	bl	8003022 <xQueueGenericCreate>
 8001508:	0002      	movs	r2, r0
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <main+0xd8>)
 800150c:	601a      	str	r2, [r3, #0]
  xQueueO = xQueueCreate( 2, sizeof(struct message_outputs * ));
 800150e:	2200      	movs	r2, #0
 8001510:	2104      	movs	r1, #4
 8001512:	2002      	movs	r0, #2
 8001514:	f001 fd85 	bl	8003022 <xQueueGenericCreate>
 8001518:	0002      	movs	r2, r0
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <main+0xdc>)
 800151c:	601a      	str	r2, [r3, #0]

  // Start the scheduler
  vTaskStartScheduler();
 800151e:	f002 fb45 	bl	8003bac <vTaskStartScheduler>
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	46c0      	nop			@ (mov r8, r8)
 800152c:	0800671c 	.word	0x0800671c
 8001530:	080016bd 	.word	0x080016bd
 8001534:	200000c0 	.word	0x200000c0
 8001538:	0800672c 	.word	0x0800672c
 800153c:	08001735 	.word	0x08001735
 8001540:	200000c4 	.word	0x200000c4
 8001544:	0800673c 	.word	0x0800673c
 8001548:	08001791 	.word	0x08001791
 800154c:	200000c8 	.word	0x200000c8
 8001550:	0800674c 	.word	0x0800674c
 8001554:	0800184d 	.word	0x0800184d
 8001558:	200000cc 	.word	0x200000cc
 800155c:	200000d0 	.word	0x200000d0
 8001560:	200000d4 	.word	0x200000d4

08001564 <USART1_IRQHandler>:


void USART1_IRQHandler(void) {
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b08b      	sub	sp, #44	@ 0x2c
 8001568:	af04      	add	r7, sp, #16
   if (USART1->ISR & (1UL << 5U)) { // RXNE
 800156a:	4b4c      	ldr	r3, [pc, #304]	@ (800169c <USART1_IRQHandler+0x138>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	2220      	movs	r2, #32
 8001570:	4013      	ands	r3, r2
 8001572:	d100      	bne.n	8001576 <USART1_IRQHandler+0x12>
 8001574:	e08e      	b.n	8001694 <USART1_IRQHandler+0x130>
    uint8_t received = (uint8_t) (USART1->RDR & 0xFF);
 8001576:	4b49      	ldr	r3, [pc, #292]	@ (800169c <USART1_IRQHandler+0x138>)
 8001578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800157a:	2417      	movs	r4, #23
 800157c:	193b      	adds	r3, r7, r4
 800157e:	701a      	strb	r2, [r3, #0]
    int rpm_i1 = 0, rpm_i2 = 0, vl_i1 = 0, vl_i2 = 0, gear_i = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	2300      	movs	r3, #0
 8001592:	603b      	str	r3, [r7, #0]

    if (received == 'I') {
 8001594:	193b      	adds	r3, r7, r4
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b49      	cmp	r3, #73	@ 0x49
 800159a:	d114      	bne.n	80015c6 <USART1_IRQHandler+0x62>
      rx_index = 0;
 800159c:	4b40      	ldr	r3, [pc, #256]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
      memset(rx_buffer, 0, RX_BUFFER_SIZE);
 80015a2:	4b40      	ldr	r3, [pc, #256]	@ (80016a4 <USART1_IRQHandler+0x140>)
 80015a4:	2240      	movs	r2, #64	@ 0x40
 80015a6:	2100      	movs	r1, #0
 80015a8:	0018      	movs	r0, r3
 80015aa:	f003 ff23 	bl	80053f4 <memset>
      rx_buffer[rx_index++] = received;
 80015ae:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	b2d1      	uxtb	r1, r2
 80015b6:	4a3a      	ldr	r2, [pc, #232]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 80015b8:	7011      	strb	r1, [r2, #0]
 80015ba:	0019      	movs	r1, r3
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <USART1_IRQHandler+0x140>)
 80015be:	193a      	adds	r2, r7, r4
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	545a      	strb	r2, [r3, r1]
 80015c4:	e066      	b.n	8001694 <USART1_IRQHandler+0x130>
      return;
    }

    if (rx_buffer[0] == 'I') {
 80015c6:	4b37      	ldr	r3, [pc, #220]	@ (80016a4 <USART1_IRQHandler+0x140>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b49      	cmp	r3, #73	@ 0x49
 80015cc:	d162      	bne.n	8001694 <USART1_IRQHandler+0x130>
      if (received == 'E') {
 80015ce:	2317      	movs	r3, #23
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b45      	cmp	r3, #69	@ 0x45
 80015d6:	d143      	bne.n	8001660 <USART1_IRQHandler+0xfc>
        rx_buffer[rx_index] = '\0';
 80015d8:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	001a      	movs	r2, r3
 80015de:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <USART1_IRQHandler+0x140>)
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]

        GPIOA->ODR ^= (0x1UL << 5U); // Toggle USER LED
 80015e4:	23a0      	movs	r3, #160	@ 0xa0
 80015e6:	05db      	lsls	r3, r3, #23
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	23a0      	movs	r3, #160	@ 0xa0
 80015ec:	05db      	lsls	r3, r3, #23
 80015ee:	2120      	movs	r1, #32
 80015f0:	404a      	eors	r2, r1
 80015f2:	615a      	str	r2, [r3, #20]
        if (sscanf(&rx_buffer[1], "%d,%d,%d,%d,%d", &rpm_i1, &rpm_i2, &vl_i1,
 80015f4:	230c      	movs	r3, #12
 80015f6:	18fc      	adds	r4, r7, r3
 80015f8:	2310      	movs	r3, #16
 80015fa:	18fa      	adds	r2, r7, r3
 80015fc:	492a      	ldr	r1, [pc, #168]	@ (80016a8 <USART1_IRQHandler+0x144>)
 80015fe:	482b      	ldr	r0, [pc, #172]	@ (80016ac <USART1_IRQHandler+0x148>)
 8001600:	003b      	movs	r3, r7
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	2308      	movs	r3, #8
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	0023      	movs	r3, r4
 8001610:	f003 fec6 	bl	80053a0 <siscanf>
 8001614:	0003      	movs	r3, r0
 8001616:	2b05      	cmp	r3, #5
 8001618:	d13c      	bne.n	8001694 <USART1_IRQHandler+0x130>
            &vl_i2, &gear_i) == 5) {

        	//printf("Parsed values -> rpm: %d.%d, vl: %d.%d, gear: %d\r\n", rpm_i1, rpm_i2, vl_i1, vl_i2, gear_i);


			rpm = (uint16_t)((rpm_i1 * 100) + rpm_i2);
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	b29b      	uxth	r3, r3
 800161e:	2264      	movs	r2, #100	@ 0x64
 8001620:	4353      	muls	r3, r2
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	b29b      	uxth	r3, r3
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b20      	ldr	r3, [pc, #128]	@ (80016b0 <USART1_IRQHandler+0x14c>)
 800162e:	801a      	strh	r2, [r3, #0]
			vl = (uint16_t)((vl_i1 * 100) + vl_i2);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	b29b      	uxth	r3, r3
 8001634:	2264      	movs	r2, #100	@ 0x64
 8001636:	4353      	muls	r3, r2
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	b29b      	uxth	r3, r3
 800163e:	18d3      	adds	r3, r2, r3
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <USART1_IRQHandler+0x150>)
 8001644:	801a      	strh	r2, [r3, #0]
			gear = (uint16_t)(gear_i);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b29a      	uxth	r2, r3
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <USART1_IRQHandler+0x154>)
 800164c:	801a      	strh	r2, [r3, #0]

			rpm = (uint16_t)(rpm_i1);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <USART1_IRQHandler+0x14c>)
 8001654:	801a      	strh	r2, [r3, #0]
			vl = (uint16_t)(vl_i1);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <USART1_IRQHandler+0x150>)
 800165c:	801a      	strh	r2, [r3, #0]
 800165e:	e019      	b.n	8001694 <USART1_IRQHandler+0x130>
        }
      } else if (rx_index < RX_BUFFER_SIZE - 1) {
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b3e      	cmp	r3, #62	@ 0x3e
 8001666:	d80c      	bhi.n	8001682 <USART1_IRQHandler+0x11e>
        rx_buffer[rx_index++] = received;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	b2d1      	uxtb	r1, r2
 8001670:	4a0b      	ldr	r2, [pc, #44]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 8001672:	7011      	strb	r1, [r2, #0]
 8001674:	0019      	movs	r1, r3
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <USART1_IRQHandler+0x140>)
 8001678:	2217      	movs	r2, #23
 800167a:	18ba      	adds	r2, r7, r2
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	545a      	strb	r2, [r3, r1]
 8001680:	e008      	b.n	8001694 <USART1_IRQHandler+0x130>
      } else {
        rx_index = 0;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <USART1_IRQHandler+0x13c>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
        memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <USART1_IRQHandler+0x140>)
 800168a:	2240      	movs	r2, #64	@ 0x40
 800168c:	2100      	movs	r1, #0
 800168e:	0018      	movs	r0, r3
 8001690:	f003 feb0 	bl	80053f4 <memset>
      }
    }
  }
}
 8001694:	46bd      	mov	sp, r7
 8001696:	b007      	add	sp, #28
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	40013800 	.word	0x40013800
 80016a0:	200000bc 	.word	0x200000bc
 80016a4:	2000007c 	.word	0x2000007c
 80016a8:	0800675c 	.word	0x0800675c
 80016ac:	2000007d 	.word	0x2000007d
 80016b0:	200000d8 	.word	0x200000d8
 80016b4:	200000da 	.word	0x200000da
 80016b8:	200000dc 	.word	0x200000dc

080016bc <UpdateInputs>:

void UpdateInputs(void *pvParameters) {
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	message_inputs data;
	TickType_t xLastWakeTime = xTaskGetTickCount();;
 80016c4:	f002 fbcc 	bl	8003e60 <xTaskGetTickCount>
 80016c8:	0003      	movs	r3, r0
 80016ca:	60bb      	str	r3, [r7, #8]
	for(;;){
		//printf("worksTask1\r\n");
		// Read ADC and update global acceleration
		data.acceleration = USER_ADC_Read();
 80016cc:	f000 fbec 	bl	8001ea8 <USER_ADC_Read>
 80016d0:	0003      	movs	r3, r0
 80016d2:	001a      	movs	r2, r3
 80016d4:	210c      	movs	r1, #12
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	805a      	strh	r2, [r3, #2]
		// Read push button (PA6), 0 if pressed, 1 if not pressed

		data.button_state = (GPIOA->IDR & (1UL << 6U)) ? 0 : 1;
 80016da:	23a0      	movs	r3, #160	@ 0xa0
 80016dc:	05db      	lsls	r3, r3, #23
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	2240      	movs	r2, #64	@ 0x40
 80016e2:	4013      	ands	r3, r2
 80016e4:	425a      	negs	r2, r3
 80016e6:	4153      	adcs	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	001a      	movs	r2, r3
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	701a      	strb	r2, [r3, #0]

		if(xQueueSend(xQueueI, &data, 10) != pdPASS)
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <UpdateInputs+0x74>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	000c      	movs	r4, r1
 80016f6:	1879      	adds	r1, r7, r1
 80016f8:	2300      	movs	r3, #0
 80016fa:	220a      	movs	r2, #10
 80016fc:	f001 fd1b 	bl	8003136 <xQueueGenericSend>
 8001700:	0003      	movs	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	d00d      	beq.n	8001722 <UpdateInputs+0x66>
		{
			xQueueReceive(xQueueI, &data, 0);
 8001706:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <UpdateInputs+0x74>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1939      	adds	r1, r7, r4
 800170c:	2200      	movs	r2, #0
 800170e:	0018      	movs	r0, r3
 8001710:	f001 fdd9 	bl	80032c6 <xQueueReceive>
			xQueueSend(xQueueI, &data, 10);
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <UpdateInputs+0x74>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	1939      	adds	r1, r7, r4
 800171a:	2300      	movs	r3, #0
 800171c:	220a      	movs	r2, #10
 800171e:	f001 fd0a 	bl	8003136 <xQueueGenericSend>
		}
		vTaskDelayUntil(&xLastWakeTime, 10);
 8001722:	2308      	movs	r3, #8
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	210a      	movs	r1, #10
 8001728:	0018      	movs	r0, r3
 800172a:	f002 f9df 	bl	8003aec <xTaskDelayUntil>
		data.acceleration = USER_ADC_Read();
 800172e:	e7cd      	b.n	80016cc <UpdateInputs+0x10>
 8001730:	200000d0 	.word	0x200000d0

08001734 <UpdateOutputs>:
	}
}

void UpdateOutputs(void *pvParameters){
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	message_outputs data;
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800173c:	f002 fb90 	bl	8003e60 <xTaskGetTickCount>
 8001740:	0003      	movs	r3, r0
 8001742:	60fb      	str	r3, [r7, #12]
	for(;;){
		//printf("worksTask2\r\n");
		if(xQueueReceive(xQueueO, &data, 10) == pdPASS){
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <UpdateOutputs+0x58>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2410      	movs	r4, #16
 800174a:	1939      	adds	r1, r7, r4
 800174c:	220a      	movs	r2, #10
 800174e:	0018      	movs	r0, r3
 8001750:	f001 fdb9 	bl	80032c6 <xQueueReceive>
 8001754:	0003      	movs	r3, r0
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10e      	bne.n	8001778 <UpdateOutputs+0x44>
			//printf("worksTask2\r\n");
			Update_PWM_From_Velocity(data.vl);
 800175a:	193b      	adds	r3, r7, r4
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	0018      	movs	r0, r3
 8001760:	f000 f85c 	bl	800181c <Update_PWM_From_Velocity>
			UpdateLCD(data.rpm, data.gear, data.vl);
 8001764:	0022      	movs	r2, r4
 8001766:	18bb      	adds	r3, r7, r2
 8001768:	8818      	ldrh	r0, [r3, #0]
 800176a:	18bb      	adds	r3, r7, r2
 800176c:	8899      	ldrh	r1, [r3, #4]
 800176e:	18bb      	adds	r3, r7, r2
 8001770:	885b      	ldrh	r3, [r3, #2]
 8001772:	001a      	movs	r2, r3
 8001774:	f000 f89a 	bl	80018ac <UpdateLCD>
		}
		vTaskDelayUntil(&xLastWakeTime, 1000);
 8001778:	23fa      	movs	r3, #250	@ 0xfa
 800177a:	009a      	lsls	r2, r3, #2
 800177c:	230c      	movs	r3, #12
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f002 f9b2 	bl	8003aec <xTaskDelayUntil>
		if(xQueueReceive(xQueueO, &data, 10) == pdPASS){
 8001788:	e7dc      	b.n	8001744 <UpdateOutputs+0x10>
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	200000d4 	.word	0x200000d4

08001790 <transmit_data>:
	}
}

void transmit_data(void *pvParameters) {
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b08e      	sub	sp, #56	@ 0x38
 8001794:	af02      	add	r7, sp, #8
 8001796:	6078      	str	r0, [r7, #4]
  uint8_t tx_buffer[32];
  message_inputs data;
  TickType_t xLastWakeTime = xTaskGetTickCount();
 8001798:	f002 fb62 	bl	8003e60 <xTaskGetTickCount>
 800179c:	0003      	movs	r3, r0
 800179e:	60bb      	str	r3, [r7, #8]

  for(;;){
	  //printf("worksTask3\r\n");
	  if(xQueueReceive(xQueueI, &data, 10) == pdPASS){
 80017a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <transmit_data+0x84>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	250c      	movs	r5, #12
 80017a6:	1979      	adds	r1, r7, r5
 80017a8:	220a      	movs	r2, #10
 80017aa:	0018      	movs	r0, r3
 80017ac:	f001 fd8b 	bl	80032c6 <xQueueReceive>
 80017b0:	0003      	movs	r3, r0
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d127      	bne.n	8001806 <transmit_data+0x76>

		  // Format: I<acc_i1>.<acc_i2>,<button>,E
		  sprintf((char*) tx_buffer, "I%d.%02d,%d,E\n", data.acceleration / 100, data.acceleration % 100, (data.button_state));
 80017b6:	197b      	adds	r3, r7, r5
 80017b8:	885b      	ldrh	r3, [r3, #2]
 80017ba:	2164      	movs	r1, #100	@ 0x64
 80017bc:	0018      	movs	r0, r3
 80017be:	f7fe fcb5 	bl	800012c <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	001c      	movs	r4, r3
 80017c8:	197b      	adds	r3, r7, r5
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	2164      	movs	r1, #100	@ 0x64
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7fe fd32 	bl	8000238 <__aeabi_uidivmod>
 80017d4:	000b      	movs	r3, r1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	001a      	movs	r2, r3
 80017da:	197b      	adds	r3, r7, r5
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	490e      	ldr	r1, [pc, #56]	@ (8001818 <transmit_data+0x88>)
 80017e0:	2510      	movs	r5, #16
 80017e2:	1978      	adds	r0, r7, r5
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	0013      	movs	r3, r2
 80017e8:	0022      	movs	r2, r4
 80017ea:	f003 fdb9 	bl	8005360 <siprintf>

		  USER_USART1_Transmit(tx_buffer, strlen((char*) tx_buffer));
 80017ee:	002c      	movs	r4, r5
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	0018      	movs	r0, r3
 80017f4:	f7fe fc88 	bl	8000108 <strlen>
 80017f8:	0003      	movs	r3, r0
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f000 fe55 	bl	80024b0 <USER_USART1_Transmit>
	  }
	  vTaskDelayUntil(&xLastWakeTime, 200);
 8001806:	2308      	movs	r3, #8
 8001808:	18fb      	adds	r3, r7, r3
 800180a:	21c8      	movs	r1, #200	@ 0xc8
 800180c:	0018      	movs	r0, r3
 800180e:	f002 f96d 	bl	8003aec <xTaskDelayUntil>
	  if(xQueueReceive(xQueueI, &data, 10) == pdPASS){
 8001812:	e7c5      	b.n	80017a0 <transmit_data+0x10>
 8001814:	200000d0 	.word	0x200000d0
 8001818:	0800676c 	.word	0x0800676c

0800181c <Update_PWM_From_Velocity>:
  }
}

void Update_PWM_From_Velocity(uint16_t input_vl) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	0002      	movs	r2, r0
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	801a      	strh	r2, [r3, #0]
	// Clamp the input to [0.0, 200.0] for safety
	if (input_vl < 0)
		input_vl = 0;
	if (input_vl > 200)
 8001828:	1dbb      	adds	r3, r7, #6
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	2bc8      	cmp	r3, #200	@ 0xc8
 800182e:	d902      	bls.n	8001836 <Update_PWM_From_Velocity+0x1a>
		input_vl = 200;
 8001830:	1dbb      	adds	r3, r7, #6
 8001832:	22c8      	movs	r2, #200	@ 0xc8
 8001834:	801a      	strh	r2, [r3, #0]

	// Map velocity to 0–100% PWM duty
	USER_Set_PWM_Duty((uint8_t) (input_vl));
 8001836:	1dbb      	adds	r3, r7, #6
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	0018      	movs	r0, r3
 800183e:	f000 fd31 	bl	80022a4 <USER_Set_PWM_Duty>
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b002      	add	sp, #8
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <BridgeUART_data>:

void BridgeUART_data(void *pvParameters){
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    message_outputs simulatedData;
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8001854:	f002 fb04 	bl	8003e60 <xTaskGetTickCount>
 8001858:	0003      	movs	r3, r0
 800185a:	60fb      	str	r3, [r7, #12]

    for(;;){
		simulatedData.rpm = rpm;
 800185c:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <BridgeUART_data+0x50>)
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	2110      	movs	r1, #16
 8001862:	187b      	adds	r3, r7, r1
 8001864:	801a      	strh	r2, [r3, #0]
		simulatedData.gear = gear;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <BridgeUART_data+0x54>)
 8001868:	881a      	ldrh	r2, [r3, #0]
 800186a:	187b      	adds	r3, r7, r1
 800186c:	809a      	strh	r2, [r3, #4]
		simulatedData.vl = vl;
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <BridgeUART_data+0x58>)
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	187b      	adds	r3, r7, r1
 8001874:	805a      	strh	r2, [r3, #2]

        // Send data to Queue
        xQueueSend(xQueueO, &simulatedData, portMAX_DELAY);
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <BridgeUART_data+0x5c>)
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	425a      	negs	r2, r3
 800187e:	1879      	adds	r1, r7, r1
 8001880:	2300      	movs	r3, #0
 8001882:	f001 fc58 	bl	8003136 <xQueueGenericSend>

        // Wait 300ms
        vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(300));
 8001886:	2396      	movs	r3, #150	@ 0x96
 8001888:	005a      	lsls	r2, r3, #1
 800188a:	230c      	movs	r3, #12
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	0011      	movs	r1, r2
 8001890:	0018      	movs	r0, r3
 8001892:	f002 f92b 	bl	8003aec <xTaskDelayUntil>
		simulatedData.rpm = rpm;
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	e7e0      	b.n	800185c <BridgeUART_data+0x10>
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	200000d8 	.word	0x200000d8
 80018a0:	200000dc 	.word	0x200000dc
 80018a4:	200000da 	.word	0x200000da
 80018a8:	200000d4 	.word	0x200000d4

080018ac <UpdateLCD>:
    }
}

void UpdateLCD(uint16_t rpm, uint16_t gear, uint16_t vl){
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	0004      	movs	r4, r0
 80018b4:	0008      	movs	r0, r1
 80018b6:	0011      	movs	r1, r2
 80018b8:	1dbb      	adds	r3, r7, #6
 80018ba:	1c22      	adds	r2, r4, #0
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	1c02      	adds	r2, r0, #0
 80018c2:	801a      	strh	r2, [r3, #0]
 80018c4:	1cbb      	adds	r3, r7, #2
 80018c6:	1c0a      	adds	r2, r1, #0
 80018c8:	801a      	strh	r2, [r3, #0]
  LCD_Clear();
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff fbe4 	bl	8001098 <LCD_Write_Cmd>
  LCD_Set_Cursor(1, 1);
 80018d0:	2101      	movs	r1, #1
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7ff fc0e 	bl	80010f4 <LCD_Set_Cursor>
  LCD_Put_Str("Rpm: ");
 80018d8:	4b14      	ldr	r3, [pc, #80]	@ (800192c <UpdateLCD+0x80>)
 80018da:	0018      	movs	r0, r3
 80018dc:	f7ff fc39 	bl	8001152 <LCD_Put_Str>
  LCD_Put_Num(rpm);
 80018e0:	1dbb      	adds	r3, r7, #6
 80018e2:	2200      	movs	r2, #0
 80018e4:	5e9b      	ldrsh	r3, [r3, r2]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff fc61 	bl	80011ae <LCD_Put_Num>

  LCD_Set_Cursor(2, 1);
 80018ec:	2101      	movs	r1, #1
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7ff fc00 	bl	80010f4 <LCD_Set_Cursor>
  LCD_Put_Str("Gr:");
 80018f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <UpdateLCD+0x84>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7ff fc2b 	bl	8001152 <LCD_Put_Str>
  LCD_Put_Num(gear);
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	5e9b      	ldrsh	r3, [r3, r2]
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fc53 	bl	80011ae <LCD_Put_Num>

  LCD_Set_Cursor(2, 8);
 8001908:	2108      	movs	r1, #8
 800190a:	2002      	movs	r0, #2
 800190c:	f7ff fbf2 	bl	80010f4 <LCD_Set_Cursor>
  LCD_Put_Str("Sp: ");
 8001910:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <UpdateLCD+0x88>)
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff fc1d 	bl	8001152 <LCD_Put_Str>
  LCD_Put_Num(vl);
 8001918:	1cbb      	adds	r3, r7, #2
 800191a:	2200      	movs	r2, #0
 800191c:	5e9b      	ldrsh	r3, [r3, r2]
 800191e:	0018      	movs	r0, r3
 8001920:	f7ff fc45 	bl	80011ae <LCD_Put_Num>
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b003      	add	sp, #12
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	0800677c 	.word	0x0800677c
 8001930:	08006784 	.word	0x08006784
 8001934:	08006788 	.word	0x08006788

08001938 <USER_GPIO_Init>:


void USER_GPIO_Init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  // Enable GPIOA CLK
  RCC->IOPENR = RCC->IOPENR | (0x1UL << 0U);
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <USER_GPIO_Init+0x94>)
 800193e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <USER_GPIO_Init+0x94>)
 8001942:	2101      	movs	r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34

  // Configure PA6 as input w pull up
  GPIOA->PUPDR = GPIOA->PUPDR & ~(0x2UL << 12U);
 8001948:	23a0      	movs	r3, #160	@ 0xa0
 800194a:	05db      	lsls	r3, r3, #23
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	23a0      	movs	r3, #160	@ 0xa0
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	491f      	ldr	r1, [pc, #124]	@ (80019d0 <USER_GPIO_Init+0x98>)
 8001954:	400a      	ands	r2, r1
 8001956:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR = GPIOA->PUPDR | (0x1UL << 12U);
 8001958:	23a0      	movs	r3, #160	@ 0xa0
 800195a:	05db      	lsls	r3, r3, #23
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	23a0      	movs	r3, #160	@ 0xa0
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	2180      	movs	r1, #128	@ 0x80
 8001964:	0149      	lsls	r1, r1, #5
 8001966:	430a      	orrs	r2, r1
 8001968:	60da      	str	r2, [r3, #12]
  GPIOA->MODER = GPIOA->MODER & ~(0x3UL << 12U);
 800196a:	23a0      	movs	r3, #160	@ 0xa0
 800196c:	05db      	lsls	r3, r3, #23
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	23a0      	movs	r3, #160	@ 0xa0
 8001972:	05db      	lsls	r3, r3, #23
 8001974:	4917      	ldr	r1, [pc, #92]	@ (80019d4 <USER_GPIO_Init+0x9c>)
 8001976:	400a      	ands	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

  // Configure PA5 as output push pull (It comes in the LCD, so JIC)
  GPIOA->BSRR = 0x1UL << 21U; // Reset PA5 low to turn off LED
 800197a:	23a0      	movs	r3, #160	@ 0xa0
 800197c:	05db      	lsls	r3, r3, #23
 800197e:	2280      	movs	r2, #128	@ 0x80
 8001980:	0392      	lsls	r2, r2, #14
 8001982:	619a      	str	r2, [r3, #24]
  GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 10U); // Clear pull-up/pull-down bits for PA5
 8001984:	23a0      	movs	r3, #160	@ 0xa0
 8001986:	05db      	lsls	r3, r3, #23
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	23a0      	movs	r3, #160	@ 0xa0
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	4912      	ldr	r1, [pc, #72]	@ (80019d8 <USER_GPIO_Init+0xa0>)
 8001990:	400a      	ands	r2, r1
 8001992:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 5U); // Clear output type bit for PA5
 8001994:	23a0      	movs	r3, #160	@ 0xa0
 8001996:	05db      	lsls	r3, r3, #23
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	23a0      	movs	r3, #160	@ 0xa0
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	2120      	movs	r1, #32
 80019a0:	438a      	bics	r2, r1
 80019a2:	605a      	str	r2, [r3, #4]
  GPIOA->MODER = GPIOA->MODER & ~(0x2UL << 10U); // Set PA5 as output
 80019a4:	23a0      	movs	r3, #160	@ 0xa0
 80019a6:	05db      	lsls	r3, r3, #23
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	23a0      	movs	r3, #160	@ 0xa0
 80019ac:	05db      	lsls	r3, r3, #23
 80019ae:	490b      	ldr	r1, [pc, #44]	@ (80019dc <USER_GPIO_Init+0xa4>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
  GPIOA->MODER = GPIOA->MODER | (0x1UL << 10U); // Set PA5 as output
 80019b4:	23a0      	movs	r3, #160	@ 0xa0
 80019b6:	05db      	lsls	r3, r3, #23
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	23a0      	movs	r3, #160	@ 0xa0
 80019bc:	05db      	lsls	r3, r3, #23
 80019be:	2180      	movs	r1, #128	@ 0x80
 80019c0:	00c9      	lsls	r1, r1, #3
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	ffffdfff 	.word	0xffffdfff
 80019d4:	ffffcfff 	.word	0xffffcfff
 80019d8:	fffff3ff 	.word	0xfffff3ff
 80019dc:	fffff7ff 	.word	0xfffff7ff

080019e0 <USER_RCC_Init>:

void USER_RCC_Init( void ){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	/* System Clock (SYSCLK) configuration for 48 MHz */
	FLASH->ACR	&= ~( 0x6UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <USER_RCC_Init+0x68>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <USER_RCC_Init+0x68>)
 80019ea:	2106      	movs	r1, #6
 80019ec:	438a      	bics	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
	FLASH->ACR	|=  ( 0x1UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 80019f0:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <USER_RCC_Init+0x68>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <USER_RCC_Init+0x68>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
	while(( FLASH->ACR & ( 0x7UL <<  0U )) != 0x001UL );// wait until LATENCY[2:0]=001
 80019fc:	46c0      	nop			@ (mov r8, r8)
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <USER_RCC_Init+0x68>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2207      	movs	r2, #7
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d1f9      	bne.n	80019fe <USER_RCC_Init+0x1e>
	RCC->CR		&= ~( 0x7UL << 11U );// select HSISYS division factor by 1
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <USER_RCC_Init+0x6c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <USER_RCC_Init+0x6c>)
 8001a10:	490f      	ldr	r1, [pc, #60]	@ (8001a50 <USER_RCC_Init+0x70>)
 8001a12:	400a      	ands	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
	while(!( RCC->CR & ( 0x1UL << 10U )));// wait until HSISYS is stable and ready
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <USER_RCC_Init+0x6c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f9      	beq.n	8001a18 <USER_RCC_Init+0x38>
	RCC->CFGR	&= ~( 0x7UL <<  0U );// select HSISYS as the SYSCLK clock source
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <USER_RCC_Init+0x6c>)
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <USER_RCC_Init+0x6c>)
 8001a2a:	2107      	movs	r1, #7
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
	RCC->CFGR	&= ~( 0x1UL << 11U );// select HCLK division factor by 1
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <USER_RCC_Init+0x6c>)
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <USER_RCC_Init+0x6c>)
 8001a36:	4907      	ldr	r1, [pc, #28]	@ (8001a54 <USER_RCC_Init+0x74>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
	SystemCoreClock = 48000000;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <USER_RCC_Init+0x78>)
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <USER_RCC_Init+0x7c>)
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40022000 	.word	0x40022000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	ffffc7ff 	.word	0xffffc7ff
 8001a54:	fffff7ff 	.word	0xfffff7ff
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	02dc6c00 	.word	0x02dc6c00

08001a60 <L298N_Init>:

void L298N_Init(void){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  //Configure Output Pins for Motor Driver

  //IN1
  GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 2U); // Clear pull-up/pull-down bits for PA1
 8001a64:	23a0      	movs	r3, #160	@ 0xa0
 8001a66:	05db      	lsls	r3, r3, #23
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	23a0      	movs	r3, #160	@ 0xa0
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	210c      	movs	r1, #12
 8001a70:	438a      	bics	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 1U); // Clear output type bit for PA1
 8001a74:	23a0      	movs	r3, #160	@ 0xa0
 8001a76:	05db      	lsls	r3, r3, #23
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	23a0      	movs	r3, #160	@ 0xa0
 8001a7c:	05db      	lsls	r3, r3, #23
 8001a7e:	2102      	movs	r1, #2
 8001a80:	438a      	bics	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
  GPIOA->MODER = GPIOA->MODER & ~(0x2UL << 2U); // Set PA1 as output
 8001a84:	23a0      	movs	r3, #160	@ 0xa0
 8001a86:	05db      	lsls	r3, r3, #23
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	23a0      	movs	r3, #160	@ 0xa0
 8001a8c:	05db      	lsls	r3, r3, #23
 8001a8e:	2108      	movs	r1, #8
 8001a90:	438a      	bics	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
  GPIOA->MODER = GPIOA->MODER | (0x1UL << 2U); // Set PA1 as output
 8001a94:	23a0      	movs	r3, #160	@ 0xa0
 8001a96:	05db      	lsls	r3, r3, #23
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	23a0      	movs	r3, #160	@ 0xa0
 8001a9c:	05db      	lsls	r3, r3, #23
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

  //IN2
  GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 4U); // Clear pull-up/pull-down bits for PA2
 8001aa4:	23a0      	movs	r3, #160	@ 0xa0
 8001aa6:	05db      	lsls	r3, r3, #23
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	23a0      	movs	r3, #160	@ 0xa0
 8001aac:	05db      	lsls	r3, r3, #23
 8001aae:	2130      	movs	r1, #48	@ 0x30
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 2U); // Clear output type bit for PA2
 8001ab4:	23a0      	movs	r3, #160	@ 0xa0
 8001ab6:	05db      	lsls	r3, r3, #23
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	23a0      	movs	r3, #160	@ 0xa0
 8001abc:	05db      	lsls	r3, r3, #23
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]
  GPIOA->MODER = GPIOA->MODER & ~(0x2UL << 4U); // Set PA2 as output
 8001ac4:	23a0      	movs	r3, #160	@ 0xa0
 8001ac6:	05db      	lsls	r3, r3, #23
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	23a0      	movs	r3, #160	@ 0xa0
 8001acc:	05db      	lsls	r3, r3, #23
 8001ace:	2120      	movs	r1, #32
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
  GPIOA->MODER = GPIOA->MODER | (0x1UL << 4U); // Set PA2 as output
 8001ad4:	23a0      	movs	r3, #160	@ 0xa0
 8001ad6:	05db      	lsls	r3, r3, #23
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	23a0      	movs	r3, #160	@ 0xa0
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	2110      	movs	r1, #16
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

  //IN3
  GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 6U); // Clear pull-up/pull-down bits for PA3
 8001ae4:	23a0      	movs	r3, #160	@ 0xa0
 8001ae6:	05db      	lsls	r3, r3, #23
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	23a0      	movs	r3, #160	@ 0xa0
 8001aec:	05db      	lsls	r3, r3, #23
 8001aee:	21c0      	movs	r1, #192	@ 0xc0
 8001af0:	438a      	bics	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 3U); // Clear output type bit for PA3
 8001af4:	23a0      	movs	r3, #160	@ 0xa0
 8001af6:	05db      	lsls	r3, r3, #23
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	23a0      	movs	r3, #160	@ 0xa0
 8001afc:	05db      	lsls	r3, r3, #23
 8001afe:	2108      	movs	r1, #8
 8001b00:	438a      	bics	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  GPIOA->MODER = GPIOA->MODER & ~(0x2UL << 6U); // Set PA3 as output
 8001b04:	23a0      	movs	r3, #160	@ 0xa0
 8001b06:	05db      	lsls	r3, r3, #23
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	23a0      	movs	r3, #160	@ 0xa0
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	438a      	bics	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
  GPIOA->MODER = GPIOA->MODER | (0x1UL << 6U); // Set PA3 as output
 8001b14:	23a0      	movs	r3, #160	@ 0xa0
 8001b16:	05db      	lsls	r3, r3, #23
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	23a0      	movs	r3, #160	@ 0xa0
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	2140      	movs	r1, #64	@ 0x40
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

  //IN4
  GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 4U); // Clear pull-up/pull-down bits for PA4
 8001b24:	23a0      	movs	r3, #160	@ 0xa0
 8001b26:	05db      	lsls	r3, r3, #23
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	23a0      	movs	r3, #160	@ 0xa0
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	2130      	movs	r1, #48	@ 0x30
 8001b30:	438a      	bics	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]
  GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 2U); // Clear output type bit for PA4
 8001b34:	23a0      	movs	r3, #160	@ 0xa0
 8001b36:	05db      	lsls	r3, r3, #23
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	23a0      	movs	r3, #160	@ 0xa0
 8001b3c:	05db      	lsls	r3, r3, #23
 8001b3e:	2104      	movs	r1, #4
 8001b40:	438a      	bics	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
  GPIOA->MODER = GPIOA->MODER & ~(0x2UL << 4U); // Set PA4 as output
 8001b44:	23a0      	movs	r3, #160	@ 0xa0
 8001b46:	05db      	lsls	r3, r3, #23
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	23a0      	movs	r3, #160	@ 0xa0
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	2120      	movs	r1, #32
 8001b50:	438a      	bics	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
  GPIOA->MODER = GPIOA->MODER | (0x1UL << 4U); // Set PA4 as output
 8001b54:	23a0      	movs	r3, #160	@ 0xa0
 8001b56:	05db      	lsls	r3, r3, #23
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	23a0      	movs	r3, #160	@ 0xa0
 8001b5c:	05db      	lsls	r3, r3, #23
 8001b5e:	2110      	movs	r1, #16
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

  //Set pins for forward configuration

  //Motor1: IN1=1, IN2=0
  GPIOA->ODR = GPIOA->ODR | (0x1UL << 1U);
 8001b64:	23a0      	movs	r3, #160	@ 0xa0
 8001b66:	05db      	lsls	r3, r3, #23
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	23a0      	movs	r3, #160	@ 0xa0
 8001b6c:	05db      	lsls	r3, r3, #23
 8001b6e:	2102      	movs	r1, #2
 8001b70:	430a      	orrs	r2, r1
 8001b72:	615a      	str	r2, [r3, #20]
  GPIOA->ODR = GPIOA->ODR & ~(0x1UL << 2U);
 8001b74:	23a0      	movs	r3, #160	@ 0xa0
 8001b76:	05db      	lsls	r3, r3, #23
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	23a0      	movs	r3, #160	@ 0xa0
 8001b7c:	05db      	lsls	r3, r3, #23
 8001b7e:	2104      	movs	r1, #4
 8001b80:	438a      	bics	r2, r1
 8001b82:	615a      	str	r2, [r3, #20]

  //Motor2: IN3=1, IN4=0
  GPIOA->ODR = GPIOA->ODR | (0x1UL << 3U);
 8001b84:	23a0      	movs	r3, #160	@ 0xa0
 8001b86:	05db      	lsls	r3, r3, #23
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	23a0      	movs	r3, #160	@ 0xa0
 8001b8c:	05db      	lsls	r3, r3, #23
 8001b8e:	2108      	movs	r1, #8
 8001b90:	430a      	orrs	r2, r1
 8001b92:	615a      	str	r2, [r3, #20]
  GPIOA->ODR = GPIOA->ODR & ~(0x1UL << 4U);
 8001b94:	23a0      	movs	r3, #160	@ 0xa0
 8001b96:	05db      	lsls	r3, r3, #23
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	23a0      	movs	r3, #160	@ 0xa0
 8001b9c:	05db      	lsls	r3, r3, #23
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	615a      	str	r2, [r3, #20]
}
 8001ba4:	46c0      	nop			@ (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_MspInit+0x50>)
 8001bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_MspInit+0x50>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <HAL_MspInit+0x50>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <HAL_MspInit+0x50>)
 8001bcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_MspInit+0x50>)
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	0549      	lsls	r1, r1, #21
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_MspInit+0x50>)
 8001bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	055b      	lsls	r3, r3, #21
 8001be0:	4013      	ands	r3, r2
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001be6:	2302      	movs	r3, #2
 8001be8:	425b      	negs	r3, r3
 8001bea:	2200      	movs	r2, #0
 8001bec:	2103      	movs	r1, #3
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 fd44 	bl	800267c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000

08001c00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	@ 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d843      	bhi.n	8001c9e <HAL_InitTick+0x9e>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	2016      	movs	r0, #22
 8001c1e:	f000 fd2d 	bl	800267c <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001c22:	2016      	movs	r0, #22
 8001c24:	f000 fd3f 	bl	80026a6 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_InitTick+0xb8>)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <HAL_InitTick+0xbc>)
 8001c30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c32:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <HAL_InitTick+0xbc>)
 8001c34:	2180      	movs	r1, #128	@ 0x80
 8001c36:	02c9      	lsls	r1, r1, #11
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cbc <HAL_InitTick+0xbc>)
 8001c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	02db      	lsls	r3, r3, #11
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	18fa      	adds	r2, r7, r3
 8001c4e:	2314      	movs	r3, #20
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	0011      	movs	r1, r2
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 fdad 	bl	80027b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c5a:	f000 fd93 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c64:	4916      	ldr	r1, [pc, #88]	@ (8001cc0 <HAL_InitTick+0xc0>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fa60 	bl	800012c <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001c72:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <HAL_InitTick+0xc4>)
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <HAL_InitTick+0xc8>)
 8001c76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_InitTick+0xc4>)
 8001c7a:	4a14      	ldr	r2, [pc, #80]	@ (8001ccc <HAL_InitTick+0xcc>)
 8001c7c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_InitTick+0xc4>)
 8001c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c82:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_InitTick+0xc4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_InitTick+0xc4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <HAL_InitTick+0xc4>)
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fdbc 	bl	8002810 <HAL_TIM_Base_Init>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d108      	bne.n	8001cae <HAL_InitTick+0xae>
 8001c9c:	e001      	b.n	8001ca2 <HAL_InitTick+0xa2>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e006      	b.n	8001cb0 <HAL_InitTick+0xb0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_InitTick+0xc4>)
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 fe13 	bl	80028d0 <HAL_TIM_Base_Start_IT>
 8001caa:	0003      	movs	r3, r0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0xb0>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b00c      	add	sp, #48	@ 0x30
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	000f4240 	.word	0x000f4240
 8001cc4:	200000e0 	.word	0x200000e0
 8001cc8:	40014800 	.word	0x40014800
 8001ccc:	000003e7 	.word	0x000003e7

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	e7fd      	b.n	8001cd4 <NMI_Handler+0x4>

08001cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cdc:	46c0      	nop			@ (mov r8, r8)
 8001cde:	e7fd      	b.n	8001cdc <HardFault_Handler+0x4>

08001ce0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <TIM17_IRQHandler+0x14>)
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 fe40 	bl	800296c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001cec:	46c0      	nop			@ (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	200000e0 	.word	0x200000e0

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	18d3      	adds	r3, r2, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f003 fbcc 	bl	80054c4 <__errno>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	425b      	negs	r3, r3
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	18d2      	adds	r2, r2, r3
 8001d46:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b006      	add	sp, #24
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20003000 	.word	0x20003000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	2000012c 	.word	0x2000012c
 8001d60:	20001e50 	.word	0x20001e50

08001d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <SystemInit+0x14>)
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	0512      	lsls	r2, r2, #20
 8001d6e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d70:	46c0      	nop			@ (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			@ (mov r8, r8)
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <USER_ADC_Init>:
#include <stdint.h>
#include "main.h"
#include "user_adc.h"
#include "user_tim.h"

void USER_ADC_Init(void) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  // Enable ADC peripheral clock
  RCC->APBENR2 |= (0x1UL << 20U);
 8001d80:	4b44      	ldr	r3, [pc, #272]	@ (8001e94 <USER_ADC_Init+0x118>)
 8001d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d84:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <USER_ADC_Init+0x118>)
 8001d86:	2180      	movs	r1, #128	@ 0x80
 8001d88:	0349      	lsls	r1, r1, #13
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	641a      	str	r2, [r3, #64]	@ 0x40

  // Configure PA0 as analog input (ADC_IN0)
  GPIOA->PUPDR &= ~(0x3UL << 0U);
 8001d8e:	23a0      	movs	r3, #160	@ 0xa0
 8001d90:	05db      	lsls	r3, r3, #23
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	23a0      	movs	r3, #160	@ 0xa0
 8001d96:	05db      	lsls	r3, r3, #23
 8001d98:	2103      	movs	r1, #3
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]
  GPIOA->MODER |= (0x3UL << 0U);
 8001d9e:	23a0      	movs	r3, #160	@ 0xa0
 8001da0:	05db      	lsls	r3, r3, #23
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	23a0      	movs	r3, #160	@ 0xa0
 8001da6:	05db      	lsls	r3, r3, #23
 8001da8:	2103      	movs	r1, #3
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  // Select ADC clock source (default: SYSCLK)
  ADC1->CFGR2 &= ~(0x3UL << 30U);
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	0892      	lsrs	r2, r2, #2
 8001db8:	611a      	str	r2, [r3, #16]

  // Set ADC clock prescaler
  ADC1->CR &= ~(0xEUL << 18U);
 8001dba:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001dc0:	4936      	ldr	r1, [pc, #216]	@ (8001e9c <USER_ADC_Init+0x120>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  ADC1->CR |= (0x1UL << 18U); // ÷2
 8001dc6:	4b34      	ldr	r3, [pc, #208]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	02c9      	lsls	r1, r1, #11
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	609a      	str	r2, [r3, #8]

  // Ensure ADC is disabled before proceeding
  if (ADC1->CR & (1U << 0)) {
 8001dd4:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <USER_ADC_Init+0x7a>
    ADC1->CR |= (1U << 1); // ADDIS
 8001dde:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001de4:	2102      	movs	r1, #2
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
    while (ADC1->CR & (1U << 0)); // Wait until ADEN == 0
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4013      	ands	r3, r2
 8001df4:	d1fa      	bne.n	8001dec <USER_ADC_Init+0x70>
  }

  // Enable internal voltage regulator for ADC
  ADC1->CR |= (1U << 28); // ADVREGEN
 8001df6:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	0549      	lsls	r1, r1, #21
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
  //SysTick_Delay(2); // Wait at least 20µs for regulator startup
  USER_TIM14_Delay(47, 20);  // Prescaler 47 → 1 µs por tick, ARR = 20 ticks = 20 µs
 8001e04:	2114      	movs	r1, #20
 8001e06:	202f      	movs	r0, #47	@ 0x2f
 8001e08:	f000 f9f0 	bl	80021ec <USER_TIM14_Delay>

  // Perform calibration
  ADC1->CR &= ~(1U << 0); // Ensure ADEN == 0
 8001e0c:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	438a      	bics	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]
  ADC1->CR |= (1U << 31); // Start calibration (ADCAL)
 8001e18:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e1e:	2180      	movs	r1, #128	@ 0x80
 8001e20:	0609      	lsls	r1, r1, #24
 8001e22:	430a      	orrs	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]
  while (ADC1->CR & (1U << 31)); // Wait until calibration completes
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	dbfb      	blt.n	8001e28 <USER_ADC_Init+0xac>

  // Configure input channel
  ADC1->ISR &= ~(1U << 13); // Clear CCRDY
 8001e30:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e36:	491a      	ldr	r1, [pc, #104]	@ (8001ea0 <USER_ADC_Init+0x124>)
 8001e38:	400a      	ands	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
  ADC1->CFGR1 &= ~((1U << 21) | (1U << 2)); // CHSELRMOD = 0, SCANDIR = 0
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e42:	4918      	ldr	r1, [pc, #96]	@ (8001ea4 <USER_ADC_Init+0x128>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]
  ADC1->CHSELR = (1U << 0); // Select channel IN0
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  while (!(ADC1->ISR & (1U << 13))); // Wait for CCRDY
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	019b      	lsls	r3, r3, #6
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d0f9      	beq.n	8001e50 <USER_ADC_Init+0xd4>

  // Configure sampling time
  ADC1->SMPR &= ~(0x7UL << 0U); // Minimal sample time
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e62:	2107      	movs	r1, #7
 8001e64:	438a      	bics	r2, r1
 8001e66:	615a      	str	r2, [r3, #20]

  // Enable ADC
  ADC1->ISR |= (1U << 0); // Clear ADRDY
 8001e68:	4b0b      	ldr	r3, [pc, #44]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
  ADC1->CR |= (1U << 0);  // Set ADEN
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
  while (!(ADC1->ISR & (1U << 0))); // Wait until ADC is ready (ADRDY)
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <USER_ADC_Init+0x11c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d0fa      	beq.n	8001e82 <USER_ADC_Init+0x106>
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40012400 	.word	0x40012400
 8001e9c:	ffc7ffff 	.word	0xffc7ffff
 8001ea0:	ffffdfff 	.word	0xffffdfff
 8001ea4:	ffdffffb 	.word	0xffdffffb

08001ea8 <USER_ADC_Read>:

uint16_t USER_ADC_Read(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  ADC1->CR |= (0x1UL << 2U);  // Start conversion (ADSTART)
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <USER_ADC_Read+0x28>)
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <USER_ADC_Read+0x28>)
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
  while (!(ADC1->ISR & (0x1UL << 2U)));  // Wait until conversion complete (EOC)
 8001eb8:	46c0      	nop			@ (mov r8, r8)
 8001eba:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <USER_ADC_Read+0x28>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d0fa      	beq.n	8001eba <USER_ADC_Read+0x12>
  return (uint16_t) (ADC1->DR);  // Return 12-bit result
 8001ec4:	4b02      	ldr	r3, [pc, #8]	@ (8001ed0 <USER_ADC_Read+0x28>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	b29b      	uxth	r3, r3
}
 8001eca:	0018      	movs	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40012400 	.word	0x40012400

08001ed4 <USER_TIM3_PWM_Init>:
#include "user_tim.h"
#include "main.h"
#include "user_uart.h"


void USER_TIM3_PWM_Init( void ){
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
	/* STEP 0 Enable the clock signal for the TIM3 and GPIOB peripherals */
	RCC->IOPENR  |= (1U << 1);  // Enable GPIOB clock
 8001eda:	4ba3      	ldr	r3, [pc, #652]	@ (8002168 <USER_TIM3_PWM_Init+0x294>)
 8001edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ede:	4ba2      	ldr	r3, [pc, #648]	@ (8002168 <USER_TIM3_PWM_Init+0x294>)
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC->APBENR1 |= (1U << 1);  // Enable TIM3 clock
 8001ee6:	4ba0      	ldr	r3, [pc, #640]	@ (8002168 <USER_TIM3_PWM_Init+0x294>)
 8001ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eea:	4b9f      	ldr	r3, [pc, #636]	@ (8002168 <USER_TIM3_PWM_Init+0x294>)
 8001eec:	2102      	movs	r1, #2
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* STEP 0.1 Configure GPIOBs to use PWM
	 	 Note: ON THE REFERENCE MANUAL, PAGE 194 OR TABLE 8.5.12,
			IT CAN BE FOUND HOW TO CONFIGURE THE AFR*/

	// PB4 (CH1 - AF1)
	GPIOB->AFR[0] &= ~(0xFUL << 16U);
 8001ef2:	4b9e      	ldr	r3, [pc, #632]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	4b9d      	ldr	r3, [pc, #628]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001ef8:	499d      	ldr	r1, [pc, #628]	@ (8002170 <USER_TIM3_PWM_Init+0x29c>)
 8001efa:	400a      	ands	r2, r1
 8001efc:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  (0x1UL << 16U);
 8001efe:	4b9b      	ldr	r3, [pc, #620]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f00:	6a1a      	ldr	r2, [r3, #32]
 8001f02:	4b9a      	ldr	r3, [pc, #616]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	0249      	lsls	r1, r1, #9
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR &= ~(0x3UL << 8U);
 8001f0c:	4b97      	ldr	r3, [pc, #604]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4b96      	ldr	r3, [pc, #600]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f12:	4998      	ldr	r1, [pc, #608]	@ (8002174 <USER_TIM3_PWM_Init+0x2a0>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~(1U << 4);
 8001f18:	4b94      	ldr	r3, [pc, #592]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	4b93      	ldr	r3, [pc, #588]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f1e:	2110      	movs	r1, #16
 8001f20:	438a      	bics	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
	GPIOB->MODER &= ~(0x3UL << 8U);
 8001f24:	4b91      	ldr	r3, [pc, #580]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b90      	ldr	r3, [pc, #576]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f2a:	4992      	ldr	r1, [pc, #584]	@ (8002174 <USER_TIM3_PWM_Init+0x2a0>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |=  (0x2UL << 8U);
 8001f30:	4b8e      	ldr	r3, [pc, #568]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b8d      	ldr	r3, [pc, #564]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	0089      	lsls	r1, r1, #2
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

	// PB5 (CH2 - AF1)
	GPIOB->AFR[0] &= ~( 0xFUL << 20U ); // Clear PB5 bits (23:20)
 8001f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	4b8a      	ldr	r3, [pc, #552]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f44:	498c      	ldr	r1, [pc, #560]	@ (8002178 <USER_TIM3_PWM_Init+0x2a4>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  ( 0x1UL << 20U ); // Set PB5 to AF1
 8001f4a:	4b88      	ldr	r3, [pc, #544]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	4b87      	ldr	r3, [pc, #540]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f50:	2180      	movs	r1, #128	@ 0x80
 8001f52:	0349      	lsls	r1, r1, #13
 8001f54:	430a      	orrs	r2, r1
 8001f56:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~( 0x3UL <<  10U );
 8001f58:	4b84      	ldr	r3, [pc, #528]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4b83      	ldr	r3, [pc, #524]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f5e:	4987      	ldr	r1, [pc, #540]	@ (800217c <USER_TIM3_PWM_Init+0x2a8>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~( 0x1UL <<  5U );
 8001f64:	4b81      	ldr	r3, [pc, #516]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4b80      	ldr	r3, [pc, #512]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x1UL <<  10U );
 8001f70:	4b7e      	ldr	r3, [pc, #504]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b7d      	ldr	r3, [pc, #500]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f76:	4982      	ldr	r1, [pc, #520]	@ (8002180 <USER_TIM3_PWM_Init+0x2ac>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x2UL <<  10U );
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b7a      	ldr	r3, [pc, #488]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	0109      	lsls	r1, r1, #4
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]


	// PB6 (CH3 - AF3)
	GPIOB->AFR[0] &= ~( 0xFUL << 24U ); // Clear PB6 bits (27:24)
 8001f8a:	4b78      	ldr	r3, [pc, #480]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	4b77      	ldr	r3, [pc, #476]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f90:	497c      	ldr	r1, [pc, #496]	@ (8002184 <USER_TIM3_PWM_Init+0x2b0>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  ( 0x3UL << 24U); // Set PB6 to AF3
 8001f96:	4b75      	ldr	r3, [pc, #468]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	4b74      	ldr	r3, [pc, #464]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001f9c:	21c0      	movs	r1, #192	@ 0xc0
 8001f9e:	0489      	lsls	r1, r1, #18
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~( 0x3UL << 12U);
 8001fa4:	4b71      	ldr	r3, [pc, #452]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b70      	ldr	r3, [pc, #448]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001faa:	4977      	ldr	r1, [pc, #476]	@ (8002188 <USER_TIM3_PWM_Init+0x2b4>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~( 0x1UL << 6U);
 8001fb0:	4b6e      	ldr	r3, [pc, #440]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	4b6d      	ldr	r3, [pc, #436]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fb6:	2140      	movs	r1, #64	@ 0x40
 8001fb8:	438a      	bics	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x1UL << 12U);
 8001fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fc2:	4972      	ldr	r1, [pc, #456]	@ (800218c <USER_TIM3_PWM_Init+0x2b8>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x2UL << 12U);
 8001fc8:	4b68      	ldr	r3, [pc, #416]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b67      	ldr	r3, [pc, #412]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fce:	2180      	movs	r1, #128	@ 0x80
 8001fd0:	0189      	lsls	r1, r1, #6
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

	// PB7 (CH4 - AF3)
	GPIOB->AFR[0] &= ~(0xFUL << 28U); // Clear PB7 bits (31:28)
 8001fd6:	4b65      	ldr	r3, [pc, #404]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	4b64      	ldr	r3, [pc, #400]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	0912      	lsrs	r2, r2, #4
 8001fe0:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] |=  (0x3UL << 28U); // Set PB7 to AF3
 8001fe2:	4b62      	ldr	r3, [pc, #392]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	4b61      	ldr	r3, [pc, #388]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001fe8:	21c0      	movs	r1, #192	@ 0xc0
 8001fea:	0589      	lsls	r1, r1, #22
 8001fec:	430a      	orrs	r2, r1
 8001fee:	621a      	str	r2, [r3, #32]
	GPIOB->PUPDR  &= ~(0x3UL << 14U);
 8001ff0:	4b5e      	ldr	r3, [pc, #376]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b5d      	ldr	r3, [pc, #372]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001ff6:	4966      	ldr	r1, [pc, #408]	@ (8002190 <USER_TIM3_PWM_Init+0x2bc>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER	&= ~(0x1UL << 7U);
 8001ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	4b5a      	ldr	r3, [pc, #360]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8002002:	2180      	movs	r1, #128	@ 0x80
 8002004:	438a      	bics	r2, r1
 8002006:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~(0x1UL << 14U);
 8002008:	4b58      	ldr	r3, [pc, #352]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b57      	ldr	r3, [pc, #348]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 800200e:	4961      	ldr	r1, [pc, #388]	@ (8002194 <USER_TIM3_PWM_Init+0x2c0>)
 8002010:	400a      	ands	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  (0x2UL << 14U);
 8002014:	4b55      	ldr	r3, [pc, #340]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b54      	ldr	r3, [pc, #336]	@ (800216c <USER_TIM3_PWM_Init+0x298>)
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	0209      	lsls	r1, r1, #8
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]


	/* STEP 1. Configure the clock source (internal) */
	TIM3->SMCR	&= ~(0x1UL << 16U)
 8002022:	4b5d      	ldr	r3, [pc, #372]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b5c      	ldr	r3, [pc, #368]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002028:	495c      	ldr	r1, [pc, #368]	@ (800219c <USER_TIM3_PWM_Init+0x2c8>)
 800202a:	400a      	ands	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
							&  ~(0x7UL <<  0U);//		Prescaler is clocked directed by the internal clock

	/* STEP 2. Configure the counter mode, the auto-reload and the overflow UEV-event  */
	TIM3->CR1	&= ~(0x3UL << 5U) //		Selects edge-aligned mode
 800202e:	4b5a      	ldr	r3, [pc, #360]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002034:	2176      	movs	r1, #118	@ 0x76
 8002036:	438a      	bics	r2, r1
 8002038:	601a      	str	r2, [r3, #0]
						&  ~(0x1UL << 4U) //		Counter used as upcounter
						&  ~(0x1UL << 2U) //		UEV can be generated by software
						&  ~(0x1UL << 1U);//		Update Event (UEV) enabled
	TIM3->CR1	|=  (0x1UL << 7U);//		Auto-reload register is buffered
 800203a:	4b57      	ldr	r3, [pc, #348]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b56      	ldr	r3, [pc, #344]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002040:	2180      	movs	r1, #128	@ 0x80
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]

	/* STEP 3. Configure the prescaler, the period and the duty cycle register values */
	TIM3->PSC = 0U;
 8002046:	4b54      	ldr	r3, [pc, #336]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 47999U;//	for 1 KHz frequency
 800204c:	4b52      	ldr	r3, [pc, #328]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800204e:	4a54      	ldr	r2, [pc, #336]	@ (80021a0 <USER_TIM3_PWM_Init+0x2cc>)
 8002050:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t duty = USER_Duty_Cycle(0); // 0-100 range values
 8002052:	1dbc      	adds	r4, r7, #6
 8002054:	2000      	movs	r0, #0
 8002056:	f000 f907 	bl	8002268 <USER_Duty_Cycle>
 800205a:	0003      	movs	r3, r0
 800205c:	8023      	strh	r3, [r4, #0]
	TIM3->CCR1 = duty;
 800205e:	4b4e      	ldr	r3, [pc, #312]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002060:	1dba      	adds	r2, r7, #6
 8002062:	8812      	ldrh	r2, [r2, #0]
 8002064:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = duty;
 8002066:	4b4c      	ldr	r3, [pc, #304]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002068:	1dba      	adds	r2, r7, #6
 800206a:	8812      	ldrh	r2, [r2, #0]
 800206c:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = duty;
 800206e:	4b4a      	ldr	r3, [pc, #296]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002070:	1dba      	adds	r2, r7, #6
 8002072:	8812      	ldrh	r2, [r2, #0]
 8002074:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = duty;
 8002076:	4b48      	ldr	r3, [pc, #288]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002078:	1dba      	adds	r2, r7, #6
 800207a:	8812      	ldrh	r2, [r2, #0]
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40

	/* STEP 4. Configure the PWM mode, the compare register load and channel direction */
	/* For CH1 and CH2 -> CCMR1 */
	TIM3->CCMR1 &= ~((0x3UL << 0U) | (0x7UL << 4U) | (0x1UL << 3U)); // Clear CC1S, OC1M, OC1PE
 800207e:	4b46      	ldr	r3, [pc, #280]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	4b45      	ldr	r3, [pc, #276]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002084:	217b      	movs	r1, #123	@ 0x7b
 8002086:	438a      	bics	r2, r1
 8002088:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |=  ((0x0UL << 0U) | (0x6UL << 4U) | (0x1UL << 3U)); // CC1 as output, PWM1, preload
 800208a:	4b43      	ldr	r3, [pc, #268]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	4b42      	ldr	r3, [pc, #264]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002090:	2168      	movs	r1, #104	@ 0x68
 8002092:	430a      	orrs	r2, r1
 8002094:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &= ~((0x3UL << 8U) | (0x7UL << 12U) | (0x1UL << 11U)); // Clear CC2S, OC2M, OC2PE
 8002096:	4b40      	ldr	r3, [pc, #256]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800209c:	4941      	ldr	r1, [pc, #260]	@ (80021a4 <USER_TIM3_PWM_Init+0x2d0>)
 800209e:	400a      	ands	r2, r1
 80020a0:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |=  ((0x0UL << 8U) | (0x6UL << 12U) | (0x1UL << 11U)); // CC2 as output, PWM1, preload
 80020a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020a8:	21d0      	movs	r1, #208	@ 0xd0
 80020aa:	01c9      	lsls	r1, r1, #7
 80020ac:	430a      	orrs	r2, r1
 80020ae:	619a      	str	r2, [r3, #24]


	/* For CH3 and CH4 -> CCMR2 */
	TIM3->CCMR2 &= ~((0x3UL << 0U) | (0x7UL << 4U) | (0x1UL << 3U)); // Clear CC3S, OC3M, OC3PE
 80020b0:	4b39      	ldr	r3, [pc, #228]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	4b38      	ldr	r3, [pc, #224]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020b6:	217b      	movs	r1, #123	@ 0x7b
 80020b8:	438a      	bics	r2, r1
 80020ba:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |=  ((0x0UL << 0U) | (0x6UL << 4U) | (0x1UL << 3U)); // CC3 as output, PWM1, preload
 80020bc:	4b36      	ldr	r3, [pc, #216]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	4b35      	ldr	r3, [pc, #212]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020c2:	2168      	movs	r1, #104	@ 0x68
 80020c4:	430a      	orrs	r2, r1
 80020c6:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 &= ~((0x3UL << 8U) | (0x7UL << 12U) | (0x1UL << 11U)); // Clear CC4S, OC4M, OC4PE
 80020c8:	4b33      	ldr	r3, [pc, #204]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020ce:	4935      	ldr	r1, [pc, #212]	@ (80021a4 <USER_TIM3_PWM_Init+0x2d0>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |=  ((0x0UL << 8U) | (0x6UL << 12U) | (0x1UL << 11U)); // CC4 as output, PWM1, preload
 80020d4:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020da:	21d0      	movs	r1, #208	@ 0xd0
 80020dc:	01c9      	lsls	r1, r1, #7
 80020de:	430a      	orrs	r2, r1
 80020e0:	61da      	str	r2, [r3, #28]

	/* STEP 5. Generate the UEV-event to load the registers */
	TIM3->EGR |=  ( 0x1UL <<  0U );
 80020e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	615a      	str	r2, [r3, #20]

	/* STEP 6. Enable the PWM signal output and set the polarity */
	// CH1: OC1 active high, output enable
	TIM3->CCER	&= ~( 0x1UL <<  3U ) //		for output mode, this bit must be cleared
 80020ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020f4:	210a      	movs	r1, #10
 80020f6:	438a      	bics	r2, r1
 80020f8:	621a      	str	r2, [r3, #32]
				&  ~( 0x1UL <<  1U );//		OC1 active high
	TIM3->CCER	|=  ( 0x1UL <<  0U );//		OC1 signal is output on the corresponding pin
 80020fa:	4b27      	ldr	r3, [pc, #156]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 80020fc:	6a1a      	ldr	r2, [r3, #32]
 80020fe:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	621a      	str	r2, [r3, #32]

	// CH2: OC2 active high, output enable
	TIM3->CCER	&= ~( 0x1UL <<  7U ) //		for output mode, this bit must be cleared
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800210c:	21a0      	movs	r1, #160	@ 0xa0
 800210e:	438a      	bics	r2, r1
 8002110:	621a      	str	r2, [r3, #32]
				&  ~( 0x1UL <<  5U );//		OC2 active high
	TIM3->CCER	|=  ( 0x1UL <<  4U );//		OC2 signal is output on the corresponding pin
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	4b20      	ldr	r3, [pc, #128]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002118:	2110      	movs	r1, #16
 800211a:	430a      	orrs	r2, r1
 800211c:	621a      	str	r2, [r3, #32]


	// CH3: OC3 active high, output enable
	TIM3->CCER	&= ~( 0x1UL << 11U ) //		for output mode, this bit must be cleared
 800211e:	4b1e      	ldr	r3, [pc, #120]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002124:	4920      	ldr	r1, [pc, #128]	@ (80021a8 <USER_TIM3_PWM_Init+0x2d4>)
 8002126:	400a      	ands	r2, r1
 8002128:	621a      	str	r2, [r3, #32]
				&  ~( 0x1UL <<  9U );//		OC3 active high
	TIM3->CCER	|=  ( 0x1UL <<  8U );//		OC3 signal is output on the corresponding pin
 800212a:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	4b1a      	ldr	r3, [pc, #104]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002130:	2180      	movs	r1, #128	@ 0x80
 8002132:	0049      	lsls	r1, r1, #1
 8002134:	430a      	orrs	r2, r1
 8002136:	621a      	str	r2, [r3, #32]

	// CH4: OC4 active high, output enable
	TIM3->CCER	&= ~( 0x1UL << 15U ) //		for output mode, this bit must be cleared
 8002138:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800213e:	491b      	ldr	r1, [pc, #108]	@ (80021ac <USER_TIM3_PWM_Init+0x2d8>)
 8002140:	400a      	ands	r2, r1
 8002142:	621a      	str	r2, [r3, #32]
				&  ~( 0x1UL << 13U );//		OC4 active high
	TIM3->CCER	|=  ( 0x1UL << 12U );//		OC4 signal is output on the corresponding pin
 8002144:	4b14      	ldr	r3, [pc, #80]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 800214a:	2180      	movs	r1, #128	@ 0x80
 800214c:	0149      	lsls	r1, r1, #5
 800214e:	430a      	orrs	r2, r1
 8002150:	621a      	str	r2, [r3, #32]


	/* STEP 7. Enable the Timer to start counting */
	TIM3->CR1	|=  ( 0x1UL <<  0U );
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <USER_TIM3_PWM_Init+0x2c4>)
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b003      	add	sp, #12
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	40021000 	.word	0x40021000
 800216c:	50000400 	.word	0x50000400
 8002170:	fff0ffff 	.word	0xfff0ffff
 8002174:	fffffcff 	.word	0xfffffcff
 8002178:	ff0fffff 	.word	0xff0fffff
 800217c:	fffff3ff 	.word	0xfffff3ff
 8002180:	fffffbff 	.word	0xfffffbff
 8002184:	f0ffffff 	.word	0xf0ffffff
 8002188:	ffffcfff 	.word	0xffffcfff
 800218c:	ffffefff 	.word	0xffffefff
 8002190:	ffff3fff 	.word	0xffff3fff
 8002194:	ffffbfff 	.word	0xffffbfff
 8002198:	40000400 	.word	0x40000400
 800219c:	fffefff8 	.word	0xfffefff8
 80021a0:	0000bb7f 	.word	0x0000bb7f
 80021a4:	ffff84ff 	.word	0xffff84ff
 80021a8:	fffff5ff 	.word	0xfffff5ff
 80021ac:	ffff5fff 	.word	0xffff5fff

080021b0 <USER_TIM14_Init>:


void USER_TIM14_Init(void) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	RCC->APBENR2	|=  (0x1UL <<  15U);//		Enable TIM14 clock source
 80021b4:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <USER_TIM14_Init+0x30>)
 80021b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021b8:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <USER_TIM14_Init+0x30>)
 80021ba:	2180      	movs	r1, #128	@ 0x80
 80021bc:	0209      	lsls	r1, r1, #8
 80021be:	430a      	orrs	r2, r1
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM14->SMCR		&= ~( 0x1UL << 16U)
 80021c2:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <USER_TIM14_Init+0x34>)
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <USER_TIM14_Init+0x34>)
 80021c8:	4907      	ldr	r1, [pc, #28]	@ (80021e8 <USER_TIM14_Init+0x38>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
								&  ~( 0x7UL << 0U);// 	Prescaler is clocked directed by the internal clock
	TIM14->CR1		&= ~( 0x1UL << 7U) //		Auto-reload register is not buffered
 80021ce:	4b05      	ldr	r3, [pc, #20]	@ (80021e4 <USER_TIM14_Init+0x34>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <USER_TIM14_Init+0x34>)
 80021d4:	21f2      	movs	r1, #242	@ 0xf2
 80021d6:	438a      	bics	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
								&  ~( 0x3UL << 5U) //		Selects edge-aligned mode
								&  ~( 0x1UL << 4U) //		Counter used as upcounter
								&  ~( 0x1UL << 1U);//		Update Event (UEV) enabled
}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40002000 	.word	0x40002000
 80021e8:	fffefff8 	.word	0xfffefff8

080021ec <USER_TIM14_Delay>:

void USER_TIM14_Delay(uint16_t prescaler, uint32_t maxCount) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	0002      	movs	r2, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	1dbb      	adds	r3, r7, #6
 80021f8:	801a      	strh	r2, [r3, #0]
	TIM14->CR1 &= ~(1UL << 0);
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <USER_TIM14_Delay+0x78>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002200:	2101      	movs	r1, #1
 8002202:	438a      	bics	r2, r1
 8002204:	601a      	str	r2, [r3, #0]
	/* STEP 3. Configure the prescaler and the maximum count */

	TIM14->PSC = prescaler;   // Divide el reloj de entrada
 8002206:	4b17      	ldr	r3, [pc, #92]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002208:	1dba      	adds	r2, r7, #6
 800220a:	8812      	ldrh	r2, [r2, #0]
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM14->ARR = maxCount;    // Valor hasta donde cuenta
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM14->EGR |= (1UL << 0);
 8002214:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <USER_TIM14_Delay+0x78>)
 800221a:	2101      	movs	r1, #1
 800221c:	430a      	orrs	r2, r1
 800221e:	615a      	str	r2, [r3, #20]
	/* STEP 4. Clear the Timer Update Interrupt Flag */

	TIM14->SR &= ~(1UL << 0); // UIF = 0 (bit 0 del SR)
 8002220:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002226:	2101      	movs	r1, #1
 8002228:	438a      	bics	r2, r1
 800222a:	611a      	str	r2, [r3, #16]

	/* STEP 5. Enable the Timer to start counting */

	TIM14->CR1 |= (1UL << 0); // CEN = 1 (bit 0 del CR1)
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <USER_TIM14_Delay+0x78>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

	/* STEP 6. Wait for the Overflow */
	while (!(TIM14->SR & (1UL << 0)));
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <USER_TIM14_Delay+0x78>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d0fa      	beq.n	800223a <USER_TIM14_Delay+0x4e>

	/* STEP 7. Disable the Timer to stop counting */
	TIM14->CR1 &= ~(1UL << 0); // CEN = 0
 8002244:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <USER_TIM14_Delay+0x78>)
 800224a:	2101      	movs	r1, #1
 800224c:	438a      	bics	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
	TIM14->SR &= ~(1UL << 0);
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <USER_TIM14_Delay+0x78>)
 8002256:	2101      	movs	r1, #1
 8002258:	438a      	bics	r2, r1
 800225a:	611a      	str	r2, [r3, #16]
}
 800225c:	46c0      	nop			@ (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40002000 	.word	0x40002000

08002268 <USER_Duty_Cycle>:



// function used internally for initialization
uint16_t USER_Duty_Cycle( uint8_t duty ){
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	0002      	movs	r2, r0
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	701a      	strb	r2, [r3, #0]
	/* duty can be a value between 0% and 100% */

	if(duty <= 170)
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2baa      	cmp	r3, #170	@ 0xaa
 800227a:	d80c      	bhi.n	8002296 <USER_Duty_Cycle+0x2e>
		return ((duty * ( TIM3->ARR + 1)) / 170);
 800227c:	1dfb      	adds	r3, r7, #7
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <USER_Duty_Cycle+0x38>)
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	3301      	adds	r3, #1
 8002286:	4353      	muls	r3, r2
 8002288:	21aa      	movs	r1, #170	@ 0xaa
 800228a:	0018      	movs	r0, r3
 800228c:	f7fd ff4e 	bl	800012c <__udivsi3>
 8002290:	0003      	movs	r3, r0
 8002292:	b29b      	uxth	r3, r3
 8002294:	e000      	b.n	8002298 <USER_Duty_Cycle+0x30>
	else
		return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40000400 	.word	0x40000400

080022a4 <USER_Set_PWM_Duty>:

// function to be used in main.c
void USER_Set_PWM_Duty(uint8_t duty_percent) {
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	0002      	movs	r2, r0
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	701a      	strb	r2, [r3, #0]
	uint16_t duty = USER_Duty_Cycle(duty_percent);
 80022b0:	250e      	movs	r5, #14
 80022b2:	197c      	adds	r4, r7, r5
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff ffd5 	bl	8002268 <USER_Duty_Cycle>
 80022be:	0003      	movs	r3, r0
 80022c0:	8023      	strh	r3, [r4, #0]
	TIM3->CCR1 = duty;
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022c4:	197a      	adds	r2, r7, r5
 80022c6:	8812      	ldrh	r2, [r2, #0]
 80022c8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = duty;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022cc:	197a      	adds	r2, r7, r5
 80022ce:	8812      	ldrh	r2, [r2, #0]
 80022d0:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = duty;
 80022d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022d4:	197a      	adds	r2, r7, r5
 80022d6:	8812      	ldrh	r2, [r2, #0]
 80022d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = duty;
 80022da:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022dc:	197a      	adds	r2, r7, r5
 80022de:	8812      	ldrh	r2, [r2, #0]
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40

	TIM3->EGR |= (1U << 0); // Force update event to load new CCR values
 80022e2:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	615a      	str	r2, [r3, #20]
	TIM3->CR1 &= ~(0x1UL << 1U);
 80022ee:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <USER_Set_PWM_Duty+0x60>)
 80022f4:	2102      	movs	r1, #2
 80022f6:	438a      	bics	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bdb0      	pop	{r4, r5, r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	40000400 	.word	0x40000400

08002308 <USER_USART1_Init>:
#include <stdint.h>
#include <string.h>
#include "main.h"
#include "user_uart.h"

void USER_USART1_Init(void) {
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	/* STEP 0. Enable the clock peripheral for the USART1 */
	RCC->IOPENR = RCC->IOPENR | (0x1UL << 0U);
 800230c:	4b52      	ldr	r3, [pc, #328]	@ (8002458 <USER_USART1_Init+0x150>)
 800230e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002310:	4b51      	ldr	r3, [pc, #324]	@ (8002458 <USER_USART1_Init+0x150>)
 8002312:	2101      	movs	r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34
	RCC->APBENR2 = RCC->APBENR2 | (0x1UL << 14U);
 8002318:	4b4f      	ldr	r3, [pc, #316]	@ (8002458 <USER_USART1_Init+0x150>)
 800231a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800231c:	4b4e      	ldr	r3, [pc, #312]	@ (8002458 <USER_USART1_Init+0x150>)
 800231e:	2180      	movs	r1, #128	@ 0x80
 8002320:	01c9      	lsls	r1, r1, #7
 8002322:	430a      	orrs	r2, r1
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40

	/* STEP 0. Configure the TX pin (PA9) as Alternate Function Push-Pull */
	GPIOA->AFR[1] = GPIOA->AFR[1] & ~(0xEUL << 4U);
 8002326:	23a0      	movs	r3, #160	@ 0xa0
 8002328:	05db      	lsls	r3, r3, #23
 800232a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232c:	23a0      	movs	r3, #160	@ 0xa0
 800232e:	05db      	lsls	r3, r3, #23
 8002330:	21e0      	movs	r1, #224	@ 0xe0
 8002332:	438a      	bics	r2, r1
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFR[1] = GPIOA->AFR[1] | (0x1UL << 4U);
 8002336:	23a0      	movs	r3, #160	@ 0xa0
 8002338:	05db      	lsls	r3, r3, #23
 800233a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800233c:	23a0      	movs	r3, #160	@ 0xa0
 800233e:	05db      	lsls	r3, r3, #23
 8002340:	2110      	movs	r1, #16
 8002342:	430a      	orrs	r2, r1
 8002344:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 18U);
 8002346:	23a0      	movs	r3, #160	@ 0xa0
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	23a0      	movs	r3, #160	@ 0xa0
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	4942      	ldr	r1, [pc, #264]	@ (800245c <USER_USART1_Init+0x154>)
 8002352:	400a      	ands	r2, r1
 8002354:	60da      	str	r2, [r3, #12]
	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 9U);
 8002356:	23a0      	movs	r3, #160	@ 0xa0
 8002358:	05db      	lsls	r3, r3, #23
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	23a0      	movs	r3, #160	@ 0xa0
 800235e:	05db      	lsls	r3, r3, #23
 8002360:	493f      	ldr	r1, [pc, #252]	@ (8002460 <USER_USART1_Init+0x158>)
 8002362:	400a      	ands	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
	GPIOA->MODER = GPIOA->MODER & ~(0x3UL << 18U);
 8002366:	23a0      	movs	r3, #160	@ 0xa0
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	23a0      	movs	r3, #160	@ 0xa0
 800236e:	05db      	lsls	r3, r3, #23
 8002370:	493a      	ldr	r1, [pc, #232]	@ (800245c <USER_USART1_Init+0x154>)
 8002372:	400a      	ands	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
	GPIOA->MODER = GPIOA->MODER | (0x2UL << 18U);
 8002376:	23a0      	movs	r3, #160	@ 0xa0
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	23a0      	movs	r3, #160	@ 0xa0
 800237e:	05db      	lsls	r3, r3, #23
 8002380:	2180      	movs	r1, #128	@ 0x80
 8002382:	0309      	lsls	r1, r1, #12
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[1] = GPIOA->AFR[1] & ~(0xEUL << 8U);
 8002388:	23a0      	movs	r3, #160	@ 0xa0
 800238a:	05db      	lsls	r3, r3, #23
 800238c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800238e:	23a0      	movs	r3, #160	@ 0xa0
 8002390:	05db      	lsls	r3, r3, #23
 8002392:	4934      	ldr	r1, [pc, #208]	@ (8002464 <USER_USART1_Init+0x15c>)
 8002394:	400a      	ands	r2, r1
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->AFR[1] = GPIOA->AFR[1] | (0x1UL << 8U);
 8002398:	23a0      	movs	r3, #160	@ 0xa0
 800239a:	05db      	lsls	r3, r3, #23
 800239c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800239e:	23a0      	movs	r3, #160	@ 0xa0
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	0049      	lsls	r1, r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 20U);
 80023aa:	23a0      	movs	r3, #160	@ 0xa0
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	23a0      	movs	r3, #160	@ 0xa0
 80023b2:	05db      	lsls	r3, r3, #23
 80023b4:	492c      	ldr	r1, [pc, #176]	@ (8002468 <USER_USART1_Init+0x160>)
 80023b6:	400a      	ands	r2, r1
 80023b8:	60da      	str	r2, [r3, #12]
	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 10U);
 80023ba:	23a0      	movs	r3, #160	@ 0xa0
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	23a0      	movs	r3, #160	@ 0xa0
 80023c2:	05db      	lsls	r3, r3, #23
 80023c4:	4929      	ldr	r1, [pc, #164]	@ (800246c <USER_USART1_Init+0x164>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
	GPIOA->MODER = GPIOA->MODER & ~(0x3UL << 20U);
 80023ca:	23a0      	movs	r3, #160	@ 0xa0
 80023cc:	05db      	lsls	r3, r3, #23
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	23a0      	movs	r3, #160	@ 0xa0
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	4924      	ldr	r1, [pc, #144]	@ (8002468 <USER_USART1_Init+0x160>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER = GPIOA->MODER | (0x2UL << 20U);
 80023da:	23a0      	movs	r3, #160	@ 0xa0
 80023dc:	05db      	lsls	r3, r3, #23
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	23a0      	movs	r3, #160	@ 0xa0
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	2180      	movs	r1, #128	@ 0x80
 80023e6:	0389      	lsls	r1, r1, #14
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

	/* STEP 1. Program the M bits in USART_CR1 to define the word length (8 bits) */
	USART1->CR1 = USART1->CR1 & ~(0x1UL << 28U);
 80023ec:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <USER_USART1_Init+0x168>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002470 <USER_USART1_Init+0x168>)
 80023f2:	4920      	ldr	r1, [pc, #128]	@ (8002474 <USER_USART1_Init+0x16c>)
 80023f4:	400a      	ands	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
	USART1->CR1 = USART1->CR1 & ~(0x1UL << 12U);
 80023f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <USER_USART1_Init+0x168>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <USER_USART1_Init+0x168>)
 80023fe:	491e      	ldr	r1, [pc, #120]	@ (8002478 <USER_USART1_Init+0x170>)
 8002400:	400a      	ands	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

	/* STEP 2. Select the desired baud rate using the USART_BRR register */
	USART1->BRR = 417;
 8002404:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <USER_USART1_Init+0x168>)
 8002406:	22a2      	movs	r2, #162	@ 0xa2
 8002408:	32ff      	adds	r2, #255	@ 0xff
 800240a:	60da      	str	r2, [r3, #12]
	/* STEP 3. Program the number of STOP bits in USART_CR2 (1 stop bit) */\
	USART1->CR2 = USART1->CR2 & ~(0x3UL << 12U);
 800240c:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <USER_USART1_Init+0x168>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <USER_USART1_Init+0x168>)
 8002412:	491a      	ldr	r1, [pc, #104]	@ (800247c <USER_USART1_Init+0x174>)
 8002414:	400a      	ands	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
	/* STEP 4. Enable TE (Transmitter Enable) and RE (Receiver Enable) */
	USART1->CR1 |= (1UL << 2U); // RE - Receiver enable
 8002418:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <USER_USART1_Init+0x168>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <USER_USART1_Init+0x168>)
 800241e:	2104      	movs	r1, #4
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
	USART1->CR1 |= (1UL << 3U); // TE - Transmitter enable
 8002424:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <USER_USART1_Init+0x168>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <USER_USART1_Init+0x168>)
 800242a:	2108      	movs	r1, #8
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
	/* STEP 5. Enable the USART */
	USART1->CR1 |= (1UL << 0U); // UE - USART enable
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <USER_USART1_Init+0x168>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <USER_USART1_Init+0x168>)
 8002436:	2101      	movs	r1, #1
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

	USART1->CR1 |= (1UL << 5U);
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <USER_USART1_Init+0x168>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <USER_USART1_Init+0x168>)
 8002442:	2120      	movs	r1, #32
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
	NVIC->ISER[0] = (1UL << USART1_IRQn);
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <USER_USART1_Init+0x178>)
 800244a:	2280      	movs	r2, #128	@ 0x80
 800244c:	0512      	lsls	r2, r2, #20
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	40021000 	.word	0x40021000
 800245c:	fff3ffff 	.word	0xfff3ffff
 8002460:	fffffdff 	.word	0xfffffdff
 8002464:	fffff1ff 	.word	0xfffff1ff
 8002468:	ffcfffff 	.word	0xffcfffff
 800246c:	fffffbff 	.word	0xfffffbff
 8002470:	40013800 	.word	0x40013800
 8002474:	efffffff 	.word	0xefffffff
 8002478:	ffffefff 	.word	0xffffefff
 800247c:	ffffcfff 	.word	0xffffcfff
 8002480:	e000e100 	.word	0xe000e100

08002484 <USER_USART1_Send_8bit>:
  USART2->CR1   |=  ( 0x1UL <<  0U ); // USART is enabled
  USART2->CR1   |=  ( 0x1UL <<  3U ); // Transmitter is enabled
  USART2->CR1   |=  ( 0x1UL <<  2U ); // Receiver is enabled
}

void USER_USART1_Send_8bit(uint8_t Data) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	0002      	movs	r2, r0
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	701a      	strb	r2, [r3, #0]
	while (!( USART1->ISR & (0x1UL << 7U)))
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <USER_USART1_Send_8bit+0x28>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2280      	movs	r2, #128	@ 0x80
 8002498:	4013      	ands	r3, r2
 800249a:	d0fa      	beq.n	8002492 <USER_USART1_Send_8bit+0xe>
		; // wait until next data can be written
	USART1->TDR = Data; // Data to send
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <USER_USART1_Send_8bit+0x28>)
 800249e:	1dfa      	adds	r2, r7, #7
 80024a0:	7812      	ldrb	r2, [r2, #0]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a4:	46c0      	nop			@ (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40013800 	.word	0x40013800

080024b0 <USER_USART1_Transmit>:
void USER_USART1_Transmit(uint8_t *pData, uint16_t size) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	000a      	movs	r2, r1
 80024ba:	1cbb      	adds	r3, r7, #2
 80024bc:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e009      	b.n	80024d8 <USER_USART1_Transmit+0x28>
		USER_USART1_Send_8bit(*pData++);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff ffd9 	bl	8002484 <USER_USART1_Send_8bit>
	for (int i = 0; i < size; i++) {
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	1cbb      	adds	r3, r7, #2
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf0      	blt.n	80024c4 <USER_USART1_Transmit+0x14>
	}
}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	46c0      	nop			@ (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b004      	add	sp, #16
 80024ea:	bd80      	pop	{r7, pc}

080024ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024ec:	480d      	ldr	r0, [pc, #52]	@ (8002524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024f0:	f7ff fc38 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024f6:	e003      	b.n	8002500 <LoopCopyDataInit>

080024f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80024fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024fe:	3104      	adds	r1, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002500:	480a      	ldr	r0, [pc, #40]	@ (800252c <LoopForever+0xa>)
  ldr r3, =_edata
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <LoopForever+0xe>)
  adds r2, r0, r1
 8002504:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002508:	d3f6      	bcc.n	80024f8 <CopyDataInit>
  ldr r2, =_sbss
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <LoopForever+0x12>)
  b LoopFillZerobss
 800250c:	e002      	b.n	8002514 <LoopFillZerobss>

0800250e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002510:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002512:	3204      	adds	r2, #4

08002514 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <LoopForever+0x16>)
  cmp r2, r3
 8002516:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002518:	d3f9      	bcc.n	800250e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800251a:	f002 ffd9 	bl	80054d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800251e:	f7fe ffb1 	bl	8001484 <main>

08002522 <LoopForever>:

LoopForever:
    b LoopForever
 8002522:	e7fe      	b.n	8002522 <LoopForever>
  ldr   r0, =_estack
 8002524:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002528:	080069d4 	.word	0x080069d4
  ldr r0, =_sdata
 800252c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002530:	20000060 	.word	0x20000060
  ldr r2, =_sbss
 8002534:	20000060 	.word	0x20000060
  ldr r3, = _ebss
 8002538:	20001e50 	.word	0x20001e50

0800253c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800253c:	e7fe      	b.n	800253c <ADC1_IRQHandler>

0800253e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800254a:	2003      	movs	r0, #3
 800254c:	f7ff fb58 	bl	8001c00 <HAL_InitTick>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d003      	beq.n	800255c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e001      	b.n	8002560 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800255c:	f7ff fb26 	bl	8001bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	781b      	ldrb	r3, [r3, #0]
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b002      	add	sp, #8
 800256a:	bd80      	pop	{r7, pc}

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	0002      	movs	r2, r0
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b7f      	cmp	r3, #127	@ 0x7f
 800257e:	d809      	bhi.n	8002594 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	001a      	movs	r2, r3
 8002586:	231f      	movs	r3, #31
 8002588:	401a      	ands	r2, r3
 800258a:	4b04      	ldr	r3, [pc, #16]	@ (800259c <__NVIC_EnableIRQ+0x30>)
 800258c:	2101      	movs	r1, #1
 800258e:	4091      	lsls	r1, r2
 8002590:	000a      	movs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	0002      	movs	r2, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	1dfb      	adds	r3, r7, #7
 80025ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	1dfb      	adds	r3, r7, #7
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025b4:	d828      	bhi.n	8002608 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002674 <__NVIC_SetPriority+0xd4>)
 80025b8:	1dfb      	adds	r3, r7, #7
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b25b      	sxtb	r3, r3
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	33c0      	adds	r3, #192	@ 0xc0
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	589b      	ldr	r3, [r3, r2]
 80025c6:	1dfa      	adds	r2, r7, #7
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	0011      	movs	r1, r2
 80025cc:	2203      	movs	r2, #3
 80025ce:	400a      	ands	r2, r1
 80025d0:	00d2      	lsls	r2, r2, #3
 80025d2:	21ff      	movs	r1, #255	@ 0xff
 80025d4:	4091      	lsls	r1, r2
 80025d6:	000a      	movs	r2, r1
 80025d8:	43d2      	mvns	r2, r2
 80025da:	401a      	ands	r2, r3
 80025dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	22ff      	movs	r2, #255	@ 0xff
 80025e4:	401a      	ands	r2, r3
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	0018      	movs	r0, r3
 80025ec:	2303      	movs	r3, #3
 80025ee:	4003      	ands	r3, r0
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f4:	481f      	ldr	r0, [pc, #124]	@ (8002674 <__NVIC_SetPriority+0xd4>)
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	430a      	orrs	r2, r1
 8002600:	33c0      	adds	r3, #192	@ 0xc0
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002606:	e031      	b.n	800266c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002608:	4a1b      	ldr	r2, [pc, #108]	@ (8002678 <__NVIC_SetPriority+0xd8>)
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	0019      	movs	r1, r3
 8002610:	230f      	movs	r3, #15
 8002612:	400b      	ands	r3, r1
 8002614:	3b08      	subs	r3, #8
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3306      	adds	r3, #6
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	18d3      	adds	r3, r2, r3
 800261e:	3304      	adds	r3, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1dfa      	adds	r2, r7, #7
 8002624:	7812      	ldrb	r2, [r2, #0]
 8002626:	0011      	movs	r1, r2
 8002628:	2203      	movs	r2, #3
 800262a:	400a      	ands	r2, r1
 800262c:	00d2      	lsls	r2, r2, #3
 800262e:	21ff      	movs	r1, #255	@ 0xff
 8002630:	4091      	lsls	r1, r2
 8002632:	000a      	movs	r2, r1
 8002634:	43d2      	mvns	r2, r2
 8002636:	401a      	ands	r2, r3
 8002638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	019b      	lsls	r3, r3, #6
 800263e:	22ff      	movs	r2, #255	@ 0xff
 8002640:	401a      	ands	r2, r3
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	0018      	movs	r0, r3
 8002648:	2303      	movs	r3, #3
 800264a:	4003      	ands	r3, r0
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002650:	4809      	ldr	r0, [pc, #36]	@ (8002678 <__NVIC_SetPriority+0xd8>)
 8002652:	1dfb      	adds	r3, r7, #7
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	001c      	movs	r4, r3
 8002658:	230f      	movs	r3, #15
 800265a:	4023      	ands	r3, r4
 800265c:	3b08      	subs	r3, #8
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	430a      	orrs	r2, r1
 8002662:	3306      	adds	r3, #6
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	18c3      	adds	r3, r0, r3
 8002668:	3304      	adds	r3, #4
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b003      	add	sp, #12
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	210f      	movs	r1, #15
 8002688:	187b      	adds	r3, r7, r1
 800268a:	1c02      	adds	r2, r0, #0
 800268c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	187b      	adds	r3, r7, r1
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b25b      	sxtb	r3, r3
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff ff81 	bl	80025a0 <__NVIC_SetPriority>
}
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	0002      	movs	r2, r0
 80026ae:	1dfb      	adds	r3, r7, #7
 80026b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b2:	1dfb      	adds	r3, r7, #7
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b25b      	sxtb	r3, r3
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff ff57 	bl	800256c <__NVIC_EnableIRQ>
}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x78>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2238      	movs	r2, #56	@ 0x38
 80026d4:	4013      	ands	r3, r2
 80026d6:	d10f      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x78>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0adb      	lsrs	r3, r3, #11
 80026de:	2207      	movs	r2, #7
 80026e0:	4013      	ands	r3, r2
 80026e2:	2201      	movs	r2, #1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	0013      	movs	r3, r2
 80026e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026ea:	6839      	ldr	r1, [r7, #0]
 80026ec:	4815      	ldr	r0, [pc, #84]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x7c>)
 80026ee:	f7fd fd1d 	bl	800012c <__udivsi3>
 80026f2:	0003      	movs	r3, r0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	e01e      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x78>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2238      	movs	r2, #56	@ 0x38
 80026fe:	4013      	ands	r3, r2
 8002700:	2b08      	cmp	r3, #8
 8002702:	d102      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	e015      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x78>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2238      	movs	r2, #56	@ 0x38
 8002710:	4013      	ands	r3, r2
 8002712:	2b20      	cmp	r3, #32
 8002714:	d103      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	e00b      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800271e:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x78>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2238      	movs	r2, #56	@ 0x38
 8002724:	4013      	ands	r3, r2
 8002726:	2b18      	cmp	r3, #24
 8002728:	d103      	bne.n	8002732 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800272a:	23fa      	movs	r3, #250	@ 0xfa
 800272c:	01db      	lsls	r3, r3, #7
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	e001      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002736:	687b      	ldr	r3, [r7, #4]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	02dc6c00 	.word	0x02dc6c00

08002748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800274c:	f7ff ffbc 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002750:	0001      	movs	r1, r0
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x30>)
 8002754:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	220f      	movs	r2, #15
 800275a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800275c:	4b07      	ldr	r3, [pc, #28]	@ (800277c <HAL_RCC_GetHCLKFreq+0x34>)
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002762:	221f      	movs	r2, #31
 8002764:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002766:	000a      	movs	r2, r1
 8002768:	40da      	lsrs	r2, r3
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x38>)
 800276c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800276e:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x38>)
 8002770:	681b      	ldr	r3, [r3, #0]
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	080067f4 	.word	0x080067f4
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002788:	f7ff ffde 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 800278c:	0001      	movs	r1, r0
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0b1b      	lsrs	r3, r3, #12
 8002794:	2207      	movs	r2, #7
 8002796:	401a      	ands	r2, r3
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	58d3      	ldr	r3, [r2, r3]
 800279e:	221f      	movs	r2, #31
 80027a0:	4013      	ands	r3, r2
 80027a2:	40d9      	lsrs	r1, r3
 80027a4:	000b      	movs	r3, r1
}
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08006834 	.word	0x08006834

080027b4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027c4:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <HAL_RCC_GetClockConfig+0x54>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2207      	movs	r2, #7
 80027ca:	401a      	ands	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_CR_SYSDIV)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CR & RCC_CR_SYSDIV);
#else
  RCC_ClkInitStruct->SYSCLKDivider = RCC_SYSCLK_DIV1;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
#endif /* RCC_CR_SYSDIV */

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <HAL_RCC_GetClockConfig+0x54>)
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	23f0      	movs	r3, #240	@ 0xf0
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_RCC_GetClockConfig+0x54>)
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	23e0      	movs	r3, #224	@ 0xe0
 80027ea:	01db      	lsls	r3, r3, #7
 80027ec:	401a      	ands	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_GetClockConfig+0x58>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2207      	movs	r2, #7
 80027f8:	401a      	ands	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	46c0      	nop			@ (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	40021000 	.word	0x40021000
 800280c:	40022000 	.word	0x40022000

08002810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e04a      	b.n	80028b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	223d      	movs	r2, #61	@ 0x3d
 8002826:	5c9b      	ldrb	r3, [r3, r2]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d107      	bne.n	800283e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	223c      	movs	r2, #60	@ 0x3c
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 f841 	bl	80028c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	223d      	movs	r2, #61	@ 0x3d
 8002842:	2102      	movs	r1, #2
 8002844:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	0019      	movs	r1, r3
 8002850:	0010      	movs	r0, r2
 8002852:	f000 f9bb 	bl	8002bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2248      	movs	r2, #72	@ 0x48
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223e      	movs	r2, #62	@ 0x3e
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223f      	movs	r2, #63	@ 0x3f
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2240      	movs	r2, #64	@ 0x40
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2241      	movs	r2, #65	@ 0x41
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2242      	movs	r2, #66	@ 0x42
 8002882:	2101      	movs	r1, #1
 8002884:	5499      	strb	r1, [r3, r2]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2243      	movs	r2, #67	@ 0x43
 800288a:	2101      	movs	r1, #1
 800288c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2244      	movs	r2, #68	@ 0x44
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2245      	movs	r2, #69	@ 0x45
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2246      	movs	r2, #70	@ 0x46
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2247      	movs	r2, #71	@ 0x47
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	223d      	movs	r2, #61	@ 0x3d
 80028b2:	2101      	movs	r1, #1
 80028b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028c8:	46c0      	nop			@ (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	223d      	movs	r2, #61	@ 0x3d
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d001      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e037      	b.n	8002958 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	223d      	movs	r2, #61	@ 0x3d
 80028ec:	2102      	movs	r1, #2
 80028ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	430a      	orrs	r2, r1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a16      	ldr	r2, [pc, #88]	@ (8002960 <HAL_TIM_Base_Start_IT+0x90>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x44>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a15      	ldr	r2, [pc, #84]	@ (8002964 <HAL_TIM_Base_Start_IT+0x94>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d116      	bne.n	8002942 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4a13      	ldr	r2, [pc, #76]	@ (8002968 <HAL_TIM_Base_Start_IT+0x98>)
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b06      	cmp	r3, #6
 8002924:	d016      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x84>
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	429a      	cmp	r2, r3
 800292e:	d011      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	e008      	b.n	8002954 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e000      	b.n	8002956 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002954:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b004      	add	sp, #16
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40012c00 	.word	0x40012c00
 8002964:	40000400 	.word	0x40000400
 8002968:	00010007 	.word	0x00010007

0800296c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	d021      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	d01d      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2203      	movs	r2, #3
 800299a:	4252      	negs	r2, r2
 800299c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2203      	movs	r2, #3
 80029ac:	4013      	ands	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f8f2 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 80029b8:	e007      	b.n	80029ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f8e5 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 f8f1 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d022      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2204      	movs	r2, #4
 80029dc:	4013      	ands	r3, r2
 80029de:	d01e      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2205      	movs	r2, #5
 80029e6:	4252      	negs	r2, r2
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	23c0      	movs	r3, #192	@ 0xc0
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f8cb 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002a06:	e007      	b.n	8002a18 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f8be 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f8ca 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2208      	movs	r2, #8
 8002a22:	4013      	ands	r3, r2
 8002a24:	d021      	beq.n	8002a6a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2209      	movs	r2, #9
 8002a34:	4252      	negs	r2, r2
 8002a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	2203      	movs	r2, #3
 8002a46:	4013      	ands	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 f8a5 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002a52:	e007      	b.n	8002a64 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 f898 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f8a4 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2210      	movs	r2, #16
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d022      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2210      	movs	r2, #16
 8002a76:	4013      	ands	r3, r2
 8002a78:	d01e      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2211      	movs	r2, #17
 8002a80:	4252      	negs	r2, r2
 8002a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2208      	movs	r2, #8
 8002a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	23c0      	movs	r3, #192	@ 0xc0
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 f87e 	bl	8002b9c <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 f871 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f87d 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2201      	movs	r2, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00c      	beq.n	8002ada <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d008      	beq.n	8002ada <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2202      	movs	r2, #2
 8002ace:	4252      	negs	r2, r2
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f851 	bl	8002b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2280      	movs	r2, #128	@ 0x80
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d104      	bne.n	8002aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	019b      	lsls	r3, r3, #6
 8002ae8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002aea:	d00b      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2280      	movs	r2, #128	@ 0x80
 8002af0:	4013      	ands	r3, r2
 8002af2:	d007      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <HAL_TIM_IRQHandler+0x208>)
 8002afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 f8e6 	bl	8002cd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2280      	movs	r2, #128	@ 0x80
 8002b12:	4013      	ands	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <HAL_TIM_IRQHandler+0x20c>)
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 f8dd 	bl	8002ce0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2240      	movs	r2, #64	@ 0x40
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d00c      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2240      	movs	r2, #64	@ 0x40
 8002b32:	4013      	ands	r3, r2
 8002b34:	d008      	beq.n	8002b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2241      	movs	r2, #65	@ 0x41
 8002b3c:	4252      	negs	r2, r2
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 f83a 	bl	8002bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d00c      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	4013      	ands	r3, r2
 8002b56:	d008      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2221      	movs	r2, #33	@ 0x21
 8002b5e:	4252      	negs	r2, r2
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f000 f8ab 	bl	8002cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b004      	add	sp, #16
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	ffffdf7f 	.word	0xffffdf7f
 8002b78:	fffffeff 	.word	0xfffffeff

08002b7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb4:	46c0      	nop			@ (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc4:	46c0      	nop			@ (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a32      	ldr	r2, [pc, #200]	@ (8002ca8 <TIM_Base_SetConfig+0xdc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0x20>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a31      	ldr	r2, [pc, #196]	@ (8002cac <TIM_Base_SetConfig+0xe0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d108      	bne.n	8002bfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2270      	movs	r2, #112	@ 0x70
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <TIM_Base_SetConfig+0xdc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00f      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <TIM_Base_SetConfig+0xe0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <TIM_Base_SetConfig+0xe4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a26      	ldr	r2, [pc, #152]	@ (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0x5a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a25      	ldr	r2, [pc, #148]	@ (8002cb8 <TIM_Base_SetConfig+0xec>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a24      	ldr	r2, [pc, #144]	@ (8002cbc <TIM_Base_SetConfig+0xf0>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2280      	movs	r2, #128	@ 0x80
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	001a      	movs	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a11      	ldr	r2, [pc, #68]	@ (8002ca8 <TIM_Base_SetConfig+0xdc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0xaa>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <TIM_Base_SetConfig+0xe8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0xaa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a11      	ldr	r2, [pc, #68]	@ (8002cb8 <TIM_Base_SetConfig+0xec>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d103      	bne.n	8002c7e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4393      	bics	r3, r2
 8002c98:	001a      	movs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]
  }
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b004      	add	sp, #16
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40002000 	.word	0x40002000
 8002cb4:	40014400 	.word	0x40014400
 8002cb8:	40014800 	.word	0x40014800
 8002cbc:	fffffcff 	.word	0xfffffcff

08002cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cc8:	46c0      	nop			@ (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b002      	add	sp, #8
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ce8:	46c0      	nop			@ (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	@ (8002d0c <SysTick_Handler+0x1c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002cf8:	f001 fc94 	bl	8004624 <xTaskGetSchedulerState>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d001      	beq.n	8002d06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002d02:	f002 f939 	bl	8004f78 <xPortSysTickHandler>
  }
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	e000e010 	.word	0xe000e010

08002d10 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a06      	ldr	r2, [pc, #24]	@ (8002d38 <vApplicationGetIdleTaskMemory+0x28>)
 8002d20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <vApplicationGetIdleTaskMemory+0x2c>)
 8002d26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2280      	movs	r2, #128	@ 0x80
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	20000130 	.word	0x20000130
 8002d3c:	200001d8 	.word	0x200001d8

08002d40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a06      	ldr	r2, [pc, #24]	@ (8002d68 <vApplicationGetTimerTaskMemory+0x28>)
 8002d50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <vApplicationGetTimerTaskMemory+0x2c>)
 8002d56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2280      	movs	r2, #128	@ 0x80
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	200003d8 	.word	0x200003d8
 8002d6c:	20000480 	.word	0x20000480

08002d70 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4252      	negs	r2, r2
 8002d88:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	001a      	movs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3308      	adds	r3, #8
 8002d98:	001a      	movs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	d103      	bne.n	8002de0 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e00c      	b.n	8002dfa <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3308      	adds	r3, #8
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e002      	b.n	8002dee <vListInsert+0x2c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d2f6      	bcs.n	8002de8 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
}
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6852      	ldr	r2, [r2, #4]
 8002e4e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d103      	bne.n	8002e62 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002e7e:	b5b0      	push	{r4, r5, r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <xQueueGenericReset+0x1e>
 8002e96:	b672      	cpsid	i
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	e7fd      	b.n	8002e98 <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d100      	bne.n	8002ea4 <xQueueGenericReset+0x26>
 8002ea2:	e06a      	b.n	8002f7a <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d066      	beq.n	8002f7a <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb4:	2400      	movs	r4, #0
 8002eb6:	0c15      	lsrs	r5, r2, #16
 8002eb8:	0c19      	lsrs	r1, r3, #16
 8002eba:	b2a8      	uxth	r0, r5
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d104      	bne.n	8002eca <xQueueGenericReset+0x4c>
 8002ec0:	b288      	uxth	r0, r1
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d013      	beq.n	8002eee <xQueueGenericReset+0x70>
 8002ec6:	1c10      	adds	r0, r2, #0
 8002ec8:	e004      	b.n	8002ed4 <xQueueGenericReset+0x56>
 8002eca:	b289      	uxth	r1, r1
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	d10d      	bne.n	8002eec <xQueueGenericReset+0x6e>
 8002ed0:	1c29      	adds	r1, r5, #0
 8002ed2:	1c18      	adds	r0, r3, #0
 8002ed4:	b292      	uxth	r2, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	435a      	muls	r2, r3
 8002eda:	b283      	uxth	r3, r0
 8002edc:	b289      	uxth	r1, r1
 8002ede:	434b      	muls	r3, r1
 8002ee0:	0c12      	lsrs	r2, r2, #16
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	141b      	asrs	r3, r3, #16
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d000      	beq.n	8002eee <xQueueGenericReset+0x70>
 8002eec:	2401      	movs	r4, #1
 8002eee:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8002ef0:	d143      	bne.n	8002f7a <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 8002ef2:	f001 ffe5 	bl	8004ec0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	434b      	muls	r3, r1
 8002f04:	18d2      	adds	r2, r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	434b      	muls	r3, r1
 8002f28:	18d2      	adds	r2, r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2244      	movs	r2, #68	@ 0x44
 8002f32:	21ff      	movs	r1, #255	@ 0xff
 8002f34:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2245      	movs	r2, #69	@ 0x45
 8002f3a:	21ff      	movs	r1, #255	@ 0xff
 8002f3c:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3310      	adds	r3, #16
 8002f50:	0018      	movs	r0, r3
 8002f52:	f001 f959 	bl	8004208 <xTaskRemoveFromEventList>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d00c      	beq.n	8002f74 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f5a:	f001 ffa1 	bl	8004ea0 <vPortYield>
 8002f5e:	e009      	b.n	8002f74 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3310      	adds	r3, #16
 8002f64:	0018      	movs	r0, r3
 8002f66:	f7ff ff03 	bl	8002d70 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3324      	adds	r3, #36	@ 0x24
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff fefe 	bl	8002d70 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002f74:	f001 ffb6 	bl	8004ee4 <vPortExitCritical>
 8002f78:	e001      	b.n	8002f7e <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <xQueueGenericReset+0x10c>
 8002f84:	b672      	cpsid	i
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	e7fd      	b.n	8002f86 <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bdb0      	pop	{r4, r5, r7, pc}

08002f94 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b089      	sub	sp, #36	@ 0x24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <xQueueGenericCreateStatic+0x1e>
 8002fac:	b672      	cpsid	i
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	e7fd      	b.n	8002fae <xQueueGenericCreateStatic+0x1a>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d029      	beq.n	800300c <xQueueGenericCreateStatic+0x78>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d026      	beq.n	800300c <xQueueGenericCreateStatic+0x78>
            ( pxStaticQueue != NULL ) &&
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d020      	beq.n	800300c <xQueueGenericCreateStatic+0x78>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11a      	bne.n	800300c <xQueueGenericCreateStatic+0x78>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002fd6:	2350      	movs	r3, #80	@ 0x50
 8002fd8:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b50      	cmp	r3, #80	@ 0x50
 8002fde:	d002      	beq.n	8002fe6 <xQueueGenericCreateStatic+0x52>
 8002fe0:	b672      	cpsid	i
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	e7fd      	b.n	8002fe2 <xQueueGenericCreateStatic+0x4e>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8002fe6:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2246      	movs	r2, #70	@ 0x46
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ff4:	2328      	movs	r3, #40	@ 0x28
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781c      	ldrb	r4, [r3, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	0023      	movs	r3, r4
 8003006:	f000 f86f 	bl	80030e8 <prvInitialiseNewQueue>
 800300a:	e005      	b.n	8003018 <xQueueGenericCreateStatic+0x84>
        }
        else
        {
            configASSERT( pxNewQueue );
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <xQueueGenericCreateStatic+0x84>
 8003012:	b672      	cpsid	i
 8003014:	46c0      	nop			@ (mov r8, r8)
 8003016:	e7fd      	b.n	8003014 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003018:	697b      	ldr	r3, [r7, #20]
    }
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b007      	add	sp, #28
 8003020:	bd90      	pop	{r4, r7, pc}

08003022 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003022:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003024:	b08b      	sub	sp, #44	@ 0x2c
 8003026:	af02      	add	r7, sp, #8
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d04b      	beq.n	80030d2 <xQueueGenericCreate+0xb0>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800303a:	2000      	movs	r0, #0
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	0c19      	lsrs	r1, r3, #16
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1c1e      	adds	r6, r3, #0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	1c15      	adds	r5, r2, #0
 800304c:	b28a      	uxth	r2, r1
 800304e:	2a00      	cmp	r2, #0
 8003050:	d105      	bne.n	800305e <xQueueGenericCreate+0x3c>
 8003052:	b29a      	uxth	r2, r3
 8003054:	2a00      	cmp	r2, #0
 8003056:	d013      	beq.n	8003080 <xQueueGenericCreate+0x5e>
 8003058:	1c19      	adds	r1, r3, #0
 800305a:	1c34      	adds	r4, r6, #0
 800305c:	e003      	b.n	8003066 <xQueueGenericCreate+0x44>
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10c      	bne.n	800307e <xQueueGenericCreate+0x5c>
 8003064:	1c2c      	adds	r4, r5, #0
 8003066:	b2b3      	uxth	r3, r6
 8003068:	b2aa      	uxth	r2, r5
 800306a:	435a      	muls	r2, r3
 800306c:	b2a3      	uxth	r3, r4
 800306e:	b289      	uxth	r1, r1
 8003070:	434b      	muls	r3, r1
 8003072:	0c12      	lsrs	r2, r2, #16
 8003074:	189b      	adds	r3, r3, r2
 8003076:	141b      	asrs	r3, r3, #16
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d000      	beq.n	8003080 <xQueueGenericCreate+0x5e>
 800307e:	2001      	movs	r0, #1
 8003080:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003082:	d126      	bne.n	80030d2 <xQueueGenericCreate+0xb0>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800308a:	3351      	adds	r3, #81	@ 0x51
 800308c:	d821      	bhi.n	80030d2 <xQueueGenericCreate+0xb0>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	4353      	muls	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	3350      	adds	r3, #80	@ 0x50
 800309a:	0018      	movs	r0, r3
 800309c:	f001 ffa8 	bl	8004ff0 <pvPortMalloc>
 80030a0:	0003      	movs	r3, r0
 80030a2:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d019      	beq.n	80030de <xQueueGenericCreate+0xbc>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3350      	adds	r3, #80	@ 0x50
 80030b2:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2246      	movs	r2, #70	@ 0x46
 80030b8:	2100      	movs	r1, #0
 80030ba:	5499      	strb	r1, [r3, r2]
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781c      	ldrb	r4, [r3, #0]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	0023      	movs	r3, r4
 80030cc:	f000 f80c 	bl	80030e8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80030d0:	e005      	b.n	80030de <xQueueGenericCreate+0xbc>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <xQueueGenericCreate+0xbc>
 80030d8:	b672      	cpsid	i
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	e7fd      	b.n	80030da <xQueueGenericCreate+0xb8>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80030de:	69fb      	ldr	r3, [r7, #28]
    }
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b009      	add	sp, #36	@ 0x24
 80030e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030e8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	001a      	movs	r2, r3
 80030f6:	1cfb      	adds	r3, r7, #3
 80030f8:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e002      	b.n	800310e <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2101      	movs	r1, #1
 800311e:	0018      	movs	r0, r3
 8003120:	f7ff fead 	bl	8002e7e <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1cfa      	adds	r2, r7, #3
 8003128:	214c      	movs	r1, #76	@ 0x4c
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}

08003136 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b08a      	sub	sp, #40	@ 0x28
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <xQueueGenericSend+0x22>
 8003152:	b672      	cpsid	i
 8003154:	46c0      	nop			@ (mov r8, r8)
 8003156:	e7fd      	b.n	8003154 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <xQueueGenericSend+0x30>
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <xQueueGenericSend+0x34>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueGenericSend+0x36>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <xQueueGenericSend+0x40>
 8003170:	b672      	cpsid	i
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	e7fd      	b.n	8003172 <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d103      	bne.n	8003184 <xQueueGenericSend+0x4e>
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <xQueueGenericSend+0x52>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <xQueueGenericSend+0x54>
 8003188:	2300      	movs	r3, #0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <xQueueGenericSend+0x5e>
 800318e:	b672      	cpsid	i
 8003190:	46c0      	nop			@ (mov r8, r8)
 8003192:	e7fd      	b.n	8003190 <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003194:	f001 fa46 	bl	8004624 <xTaskGetSchedulerState>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d102      	bne.n	80031a2 <xQueueGenericSend+0x6c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <xQueueGenericSend+0x70>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <xQueueGenericSend+0x72>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <xQueueGenericSend+0x7c>
 80031ac:	b672      	cpsid	i
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	e7fd      	b.n	80031ae <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031b2:	f001 fe85 	bl	8004ec0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <xQueueGenericSend+0x92>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d11e      	bne.n	8003206 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f000 f931 	bl	8003436 <prvCopyDataToQueue>
 80031d4:	0003      	movs	r3, r0
 80031d6:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	3324      	adds	r3, #36	@ 0x24
 80031e4:	0018      	movs	r0, r3
 80031e6:	f001 f80f 	bl	8004208 <xTaskRemoveFromEventList>
 80031ea:	1e03      	subs	r3, r0, #0
 80031ec:	d007      	beq.n	80031fe <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80031ee:	f001 fe57 	bl	8004ea0 <vPortYield>
 80031f2:	e004      	b.n	80031fe <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80031fa:	f001 fe51 	bl	8004ea0 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80031fe:	f001 fe71 	bl	8004ee4 <vPortExitCritical>
                return pdPASS;
 8003202:	2301      	movs	r3, #1
 8003204:	e05b      	b.n	80032be <xQueueGenericSend+0x188>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800320c:	f001 fe6a 	bl	8004ee4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003210:	2300      	movs	r3, #0
 8003212:	e054      	b.n	80032be <xQueueGenericSend+0x188>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800321a:	2314      	movs	r3, #20
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	0018      	movs	r0, r3
 8003220:	f001 f8be 	bl	80043a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003224:	2301      	movs	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003228:	f001 fe5c 	bl	8004ee4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800322c:	f000 fd22 	bl	8003c74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003230:	f001 fe46 	bl	8004ec0 <vPortEnterCritical>
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2244      	movs	r2, #68	@ 0x44
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	b25b      	sxtb	r3, r3
 800323c:	3301      	adds	r3, #1
 800323e:	d103      	bne.n	8003248 <xQueueGenericSend+0x112>
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	2244      	movs	r2, #68	@ 0x44
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2245      	movs	r2, #69	@ 0x45
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	b25b      	sxtb	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	d103      	bne.n	800325c <xQueueGenericSend+0x126>
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	2245      	movs	r2, #69	@ 0x45
 8003258:	2100      	movs	r1, #0
 800325a:	5499      	strb	r1, [r3, r2]
 800325c:	f001 fe42 	bl	8004ee4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003260:	1d3a      	adds	r2, r7, #4
 8003262:	2314      	movs	r3, #20
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	0011      	movs	r1, r2
 8003268:	0018      	movs	r0, r3
 800326a:	f001 f8ad 	bl	80043c8 <xTaskCheckForTimeOut>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d11e      	bne.n	80032b0 <xQueueGenericSend+0x17a>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	0018      	movs	r0, r3
 8003276:	f000 f9e3 	bl	8003640 <prvIsQueueFull>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d011      	beq.n	80032a2 <xQueueGenericSend+0x16c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	3310      	adds	r3, #16
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f000 ff5e 	bl	8004148 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	0018      	movs	r0, r3
 8003290:	f000 f962 	bl	8003558 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003294:	f000 fcfa 	bl	8003c8c <xTaskResumeAll>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d18a      	bne.n	80031b2 <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 800329c:	f001 fe00 	bl	8004ea0 <vPortYield>
 80032a0:	e787      	b.n	80031b2 <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f000 f957 	bl	8003558 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80032aa:	f000 fcef 	bl	8003c8c <xTaskResumeAll>
 80032ae:	e780      	b.n	80031b2 <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f950 	bl	8003558 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80032b8:	f000 fce8 	bl	8003c8c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80032bc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80032be:	0018      	movs	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b00a      	add	sp, #40	@ 0x28
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b08a      	sub	sp, #40	@ 0x28
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <xQueueReceive+0x20>
 80032e0:	b672      	cpsid	i
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	e7fd      	b.n	80032e2 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <xQueueReceive+0x2e>
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <xQueueReceive+0x32>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <xQueueReceive+0x34>
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <xQueueReceive+0x3e>
 80032fe:	b672      	cpsid	i
 8003300:	46c0      	nop			@ (mov r8, r8)
 8003302:	e7fd      	b.n	8003300 <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003304:	f001 f98e 	bl	8004624 <xTaskGetSchedulerState>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d102      	bne.n	8003312 <xQueueReceive+0x4c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <xQueueReceive+0x50>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <xQueueReceive+0x52>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <xQueueReceive+0x5c>
 800331c:	b672      	cpsid	i
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	e7fd      	b.n	800331e <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003322:	f001 fdcd 	bl	8004ec0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01a      	beq.n	8003368 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f000 f8e7 	bl	800350c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	1e5a      	subs	r2, r3, #1
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	3310      	adds	r3, #16
 8003352:	0018      	movs	r0, r3
 8003354:	f000 ff58 	bl	8004208 <xTaskRemoveFromEventList>
 8003358:	1e03      	subs	r3, r0, #0
 800335a:	d001      	beq.n	8003360 <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800335c:	f001 fda0 	bl	8004ea0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003360:	f001 fdc0 	bl	8004ee4 <vPortExitCritical>
                return pdPASS;
 8003364:	2301      	movs	r3, #1
 8003366:	e062      	b.n	800342e <xQueueReceive+0x168>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d103      	bne.n	8003376 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800336e:	f001 fdb9 	bl	8004ee4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003372:	2300      	movs	r3, #0
 8003374:	e05b      	b.n	800342e <xQueueReceive+0x168>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800337c:	2314      	movs	r3, #20
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	0018      	movs	r0, r3
 8003382:	f001 f80d 	bl	80043a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003386:	2301      	movs	r3, #1
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800338a:	f001 fdab 	bl	8004ee4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800338e:	f000 fc71 	bl	8003c74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003392:	f001 fd95 	bl	8004ec0 <vPortEnterCritical>
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	2244      	movs	r2, #68	@ 0x44
 800339a:	5c9b      	ldrb	r3, [r3, r2]
 800339c:	b25b      	sxtb	r3, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	d103      	bne.n	80033aa <xQueueReceive+0xe4>
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	2244      	movs	r2, #68	@ 0x44
 80033a6:	2100      	movs	r1, #0
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2245      	movs	r2, #69	@ 0x45
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	b25b      	sxtb	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	d103      	bne.n	80033be <xQueueReceive+0xf8>
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	2245      	movs	r2, #69	@ 0x45
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]
 80033be:	f001 fd91 	bl	8004ee4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033c2:	1d3a      	adds	r2, r7, #4
 80033c4:	2314      	movs	r3, #20
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	0011      	movs	r1, r2
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 fffc 	bl	80043c8 <xTaskCheckForTimeOut>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d11e      	bne.n	8003412 <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f91c 	bl	8003614 <prvIsQueueEmpty>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d011      	beq.n	8003404 <xQueueReceive+0x13e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	3324      	adds	r3, #36	@ 0x24
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	0011      	movs	r1, r2
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 fead 	bl	8004148 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 f8b1 	bl	8003558 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80033f6:	f000 fc49 	bl	8003c8c <xTaskResumeAll>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d191      	bne.n	8003322 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 80033fe:	f001 fd4f 	bl	8004ea0 <vPortYield>
 8003402:	e78e      	b.n	8003322 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f8a6 	bl	8003558 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800340c:	f000 fc3e 	bl	8003c8c <xTaskResumeAll>
 8003410:	e787      	b.n	8003322 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	0018      	movs	r0, r3
 8003416:	f000 f89f 	bl	8003558 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800341a:	f000 fc37 	bl	8003c8c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	0018      	movs	r0, r3
 8003422:	f000 f8f7 	bl	8003614 <prvIsQueueEmpty>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d100      	bne.n	800342c <xQueueReceive+0x166>
 800342a:	e77a      	b.n	8003322 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800342c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b00a      	add	sp, #40	@ 0x28
 8003434:	bd80      	pop	{r7, pc}

08003436 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10e      	bne.n	8003472 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d14e      	bne.n	80034fa <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	0018      	movs	r0, r3
 8003462:	f001 f8fb 	bl	800465c <xTaskPriorityDisinherit>
 8003466:	0003      	movs	r3, r0
 8003468:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e043      	b.n	80034fa <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d119      	bne.n	80034ac <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6858      	ldr	r0, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	0019      	movs	r1, r3
 8003484:	f002 f84a 	bl	800551c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	18d2      	adds	r2, r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d32b      	bcc.n	80034fa <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e026      	b.n	80034fa <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68d8      	ldr	r0, [r3, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	0019      	movs	r1, r3
 80034b8:	f002 f830 	bl	800551c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	425b      	negs	r3, r3
 80034c6:	18d2      	adds	r2, r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d207      	bcs.n	80034e8 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	425b      	negs	r3, r3
 80034e2:	18d2      	adds	r2, r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d105      	bne.n	80034fa <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003502:	697b      	ldr	r3, [r7, #20]
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d018      	beq.n	8003550 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	18d2      	adds	r2, r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d303      	bcc.n	8003540 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68d9      	ldr	r1, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	0018      	movs	r0, r3
 800354c:	f001 ffe6 	bl	800551c <memcpy>
    }
}
 8003550:	46c0      	nop			@ (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}

08003558 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003560:	f001 fcae 	bl	8004ec0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003564:	230f      	movs	r3, #15
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	2145      	movs	r1, #69	@ 0x45
 800356c:	5c52      	ldrb	r2, [r2, r1]
 800356e:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003570:	e013      	b.n	800359a <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3324      	adds	r3, #36	@ 0x24
 800357e:	0018      	movs	r0, r3
 8003580:	f000 fe42 	bl	8004208 <xTaskRemoveFromEventList>
 8003584:	1e03      	subs	r3, r0, #0
 8003586:	d001      	beq.n	800358c <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003588:	f000 ff74 	bl	8004474 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800358c:	210f      	movs	r1, #15
 800358e:	187b      	adds	r3, r7, r1
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	3b01      	subs	r3, #1
 8003594:	b2da      	uxtb	r2, r3
 8003596:	187b      	adds	r3, r7, r1
 8003598:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800359a:	230f      	movs	r3, #15
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	dce5      	bgt.n	8003572 <prvUnlockQueue+0x1a>
 80035a6:	e000      	b.n	80035aa <prvUnlockQueue+0x52>
                    break;
 80035a8:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2245      	movs	r2, #69	@ 0x45
 80035ae:	21ff      	movs	r1, #255	@ 0xff
 80035b0:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80035b2:	f001 fc97 	bl	8004ee4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80035b6:	f001 fc83 	bl	8004ec0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80035ba:	230e      	movs	r3, #14
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	2144      	movs	r1, #68	@ 0x44
 80035c2:	5c52      	ldrb	r2, [r2, r1]
 80035c4:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035c6:	e013      	b.n	80035f0 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d016      	beq.n	80035fe <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3310      	adds	r3, #16
 80035d4:	0018      	movs	r0, r3
 80035d6:	f000 fe17 	bl	8004208 <xTaskRemoveFromEventList>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d001      	beq.n	80035e2 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80035de:	f000 ff49 	bl	8004474 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80035e2:	210e      	movs	r1, #14
 80035e4:	187b      	adds	r3, r7, r1
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f0:	230e      	movs	r3, #14
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	dce5      	bgt.n	80035c8 <prvUnlockQueue+0x70>
 80035fc:	e000      	b.n	8003600 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 80035fe:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2244      	movs	r2, #68	@ 0x44
 8003604:	21ff      	movs	r1, #255	@ 0xff
 8003606:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8003608:	f001 fc6c 	bl	8004ee4 <vPortExitCritical>
}
 800360c:	46c0      	nop			@ (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}

08003614 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800361c:	f001 fc50 	bl	8004ec0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e001      	b.n	8003632 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003632:	f001 fc57 	bl	8004ee4 <vPortExitCritical>

    return xReturn;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b004      	add	sp, #16
 800363e:	bd80      	pop	{r7, pc}

08003640 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003648:	f001 fc3a 	bl	8004ec0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003654:	429a      	cmp	r2, r3
 8003656:	d102      	bne.n	800365e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e001      	b.n	8003662 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003662:	f001 fc3f 	bl	8004ee4 <vPortExitCritical>

    return xReturn;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bd80      	pop	{r7, pc}

08003670 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <vQueueAddToRegistry+0x1a>
 8003684:	b672      	cpsid	i
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	e7fd      	b.n	8003686 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d025      	beq.n	80036dc <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e01f      	b.n	80036d6 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003696:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <vQueueAddToRegistry+0x88>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	18d3      	adds	r3, r2, r3
 800369e:	3304      	adds	r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d105      	bne.n	80036b4 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	4b12      	ldr	r3, [pc, #72]	@ (80036f8 <vQueueAddToRegistry+0x88>)
 80036ae:	18d3      	adds	r3, r2, r3
 80036b0:	60bb      	str	r3, [r7, #8]
                    break;
 80036b2:	e013      	b.n	80036dc <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <vQueueAddToRegistry+0x60>
 80036ba:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <vQueueAddToRegistry+0x88>)
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	00d2      	lsls	r2, r2, #3
 80036c0:	58d3      	ldr	r3, [r2, r3]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	00da      	lsls	r2, r3, #3
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <vQueueAddToRegistry+0x88>)
 80036cc:	18d3      	adds	r3, r2, r3
 80036ce:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3301      	adds	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b07      	cmp	r3, #7
 80036da:	d9dc      	bls.n	8003696 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b004      	add	sp, #16
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	20000680 	.word	0x20000680

080036fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800370c:	f001 fbd8 	bl	8004ec0 <vPortEnterCritical>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2244      	movs	r2, #68	@ 0x44
 8003714:	5c9b      	ldrb	r3, [r3, r2]
 8003716:	b25b      	sxtb	r3, r3
 8003718:	3301      	adds	r3, #1
 800371a:	d103      	bne.n	8003724 <vQueueWaitForMessageRestricted+0x28>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2244      	movs	r2, #68	@ 0x44
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2245      	movs	r2, #69	@ 0x45
 8003728:	5c9b      	ldrb	r3, [r3, r2]
 800372a:	b25b      	sxtb	r3, r3
 800372c:	3301      	adds	r3, #1
 800372e:	d103      	bne.n	8003738 <vQueueWaitForMessageRestricted+0x3c>
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2245      	movs	r2, #69	@ 0x45
 8003734:	2100      	movs	r1, #0
 8003736:	5499      	strb	r1, [r3, r2]
 8003738:	f001 fbd4 	bl	8004ee4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	3324      	adds	r3, #36	@ 0x24
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 fd1b 	bl	8004188 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	0018      	movs	r0, r3
 8003756:	f7ff feff 	bl	8003558 <prvUnlockQueue>
    }
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b006      	add	sp, #24
 8003760:	bd80      	pop	{r7, pc}

08003762 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8003762:	b590      	push	{r4, r7, lr}
 8003764:	b08d      	sub	sp, #52	@ 0x34
 8003766:	af04      	add	r7, sp, #16
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8003770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <xTaskCreateStatic+0x1a>
 8003776:	b672      	cpsid	i
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	e7fd      	b.n	8003778 <xTaskCreateStatic+0x16>
        configASSERT( pxTaskBuffer != NULL );
 800377c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <xTaskCreateStatic+0x26>
 8003782:	b672      	cpsid	i
 8003784:	46c0      	nop			@ (mov r8, r8)
 8003786:	e7fd      	b.n	8003784 <xTaskCreateStatic+0x22>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8003788:	23a8      	movs	r3, #168	@ 0xa8
 800378a:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2ba8      	cmp	r3, #168	@ 0xa8
 8003790:	d002      	beq.n	8003798 <xTaskCreateStatic+0x36>
 8003792:	b672      	cpsid	i
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	e7fd      	b.n	8003794 <xTaskCreateStatic+0x32>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003798:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800379a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d026      	beq.n	80037ee <xTaskCreateStatic+0x8c>
 80037a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d023      	beq.n	80037ee <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	22a8      	movs	r2, #168	@ 0xa8
 80037ae:	2100      	movs	r1, #0
 80037b0:	0018      	movs	r0, r3
 80037b2:	f001 fe1f 	bl	80053f4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	22a5      	movs	r2, #165	@ 0xa5
 80037c0:	2102      	movs	r1, #2
 80037c2:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037c4:	683c      	ldr	r4, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	2300      	movs	r3, #0
 80037ce:	9303      	str	r3, [sp, #12]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	9302      	str	r3, [sp, #8]
 80037d4:	2318      	movs	r3, #24
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	0023      	movs	r3, r4
 80037e0:	f000 f85e 	bl	80038a0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f8f2 	bl	80039d0 <prvAddNewTaskToReadyList>
 80037ec:	e001      	b.n	80037f2 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80037f2:	69bb      	ldr	r3, [r7, #24]
    }
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b009      	add	sp, #36	@ 0x24
 80037fa:	bd90      	pop	{r4, r7, pc}

080037fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b08d      	sub	sp, #52	@ 0x34
 8003800:	af04      	add	r7, sp, #16
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	1dbb      	adds	r3, r7, #6
 800380a:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	0018      	movs	r0, r3
 8003814:	f001 fbec 	bl	8004ff0 <pvPortMalloc>
 8003818:	0003      	movs	r3, r0
 800381a:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003822:	20a8      	movs	r0, #168	@ 0xa8
 8003824:	f001 fbe4 	bl	8004ff0 <pvPortMalloc>
 8003828:	0003      	movs	r3, r0
 800382a:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	22a8      	movs	r2, #168	@ 0xa8
 8003836:	2100      	movs	r1, #0
 8003838:	0018      	movs	r0, r3
 800383a:	f001 fddb 	bl	80053f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
 8003844:	e006      	b.n	8003854 <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	0018      	movs	r0, r3
 800384a:	f001 fc89 	bl	8005160 <vPortFree>
 800384e:	e001      	b.n	8003854 <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01a      	beq.n	8003890 <xTaskCreate+0x94>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	22a5      	movs	r2, #165	@ 0xa5
 800385e:	2100      	movs	r1, #0
 8003860:	5499      	strb	r1, [r3, r2]
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	683c      	ldr	r4, [r7, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	2300      	movs	r3, #0
 800386e:	9303      	str	r3, [sp, #12]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	9302      	str	r3, [sp, #8]
 8003874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	0023      	movs	r3, r4
 800387e:	f000 f80f 	bl	80038a0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	0018      	movs	r0, r3
 8003886:	f000 f8a3 	bl	80039d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e002      	b.n	8003896 <xTaskCreate+0x9a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003890:	2301      	movs	r3, #1
 8003892:	425b      	negs	r3, r3
 8003894:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003896:	69bb      	ldr	r3, [r7, #24]
    }
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b009      	add	sp, #36	@ 0x24
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
 80038ac:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	001a      	movs	r2, r3
 80038b8:	21a5      	movs	r1, #165	@ 0xa5
 80038ba:	f001 fd9b 	bl	80053f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	493e      	ldr	r1, [pc, #248]	@ (80039c0 <prvInitialiseNewTask+0x120>)
 80038c6:	468c      	mov	ip, r1
 80038c8:	4463      	add	r3, ip
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2207      	movs	r2, #7
 80038d4:	4393      	bics	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2207      	movs	r2, #7
 80038dc:	4013      	ands	r3, r2
 80038de:	d002      	beq.n	80038e6 <prvInitialiseNewTask+0x46>
 80038e0:	b672      	cpsid	i
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	e7fd      	b.n	80038e2 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01f      	beq.n	800392c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e013      	b.n	800391a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	18d3      	adds	r3, r2, r3
 80038f8:	7818      	ldrb	r0, [r3, #0]
 80038fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038fc:	2134      	movs	r1, #52	@ 0x34
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	18d3      	adds	r3, r2, r3
 8003902:	185b      	adds	r3, r3, r1
 8003904:	1c02      	adds	r2, r0, #0
 8003906:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d006      	beq.n	8003922 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3301      	adds	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d9e8      	bls.n	80038f2 <prvInitialiseNewTask+0x52>
 8003920:	e000      	b.n	8003924 <prvInitialiseNewTask+0x84>
            {
                break;
 8003922:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	2243      	movs	r2, #67	@ 0x43
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b37      	cmp	r3, #55	@ 0x37
 8003930:	d902      	bls.n	8003938 <prvInitialiseNewTask+0x98>
 8003932:	b672      	cpsid	i
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	e7fd      	b.n	8003934 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2b37      	cmp	r3, #55	@ 0x37
 800393c:	d901      	bls.n	8003942 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800393e:	2337      	movs	r3, #55	@ 0x37
 8003940:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003944:	6a3a      	ldr	r2, [r7, #32]
 8003946:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	6a3a      	ldr	r2, [r7, #32]
 800394c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	3304      	adds	r3, #4
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff fa2a 	bl	8002dac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395a:	3318      	adds	r3, #24
 800395c:	0018      	movs	r0, r3
 800395e:	f7ff fa25 	bl	8002dac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003966:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	2238      	movs	r2, #56	@ 0x38
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 8003978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397a:	3354      	adds	r3, #84	@ 0x54
 800397c:	224c      	movs	r2, #76	@ 0x4c
 800397e:	2100      	movs	r1, #0
 8003980:	0018      	movs	r0, r3
 8003982:	f001 fd37 	bl	80053f4 <memset>
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	4a0e      	ldr	r2, [pc, #56]	@ (80039c4 <prvInitialiseNewTask+0x124>)
 800398a:	659a      	str	r2, [r3, #88]	@ 0x58
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	4a0e      	ldr	r2, [pc, #56]	@ (80039c8 <prvInitialiseNewTask+0x128>)
 8003990:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	4a0d      	ldr	r2, [pc, #52]	@ (80039cc <prvInitialiseNewTask+0x12c>)
 8003996:	661a      	str	r2, [r3, #96]	@ 0x60
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	68f9      	ldr	r1, [r7, #12]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	0018      	movs	r0, r3
 80039a0:	f001 f9f4 	bl	8004d8c <pxPortInitialiseStack>
 80039a4:	0002      	movs	r2, r0
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <prvInitialiseNewTask+0x116>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b006      	add	sp, #24
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			@ (mov r8, r8)
 80039c0:	3fffffff 	.word	0x3fffffff
 80039c4:	20001d08 	.word	0x20001d08
 80039c8:	20001d70 	.word	0x20001d70
 80039cc:	20001dd8 	.word	0x20001dd8

080039d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80039d8:	f001 fa72 	bl	8004ec0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80039dc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad4 <prvAddNewTaskToReadyList+0x104>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad4 <prvAddNewTaskToReadyList+0x104>)
 80039e4:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 80039e6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad8 <prvAddNewTaskToReadyList+0x108>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80039ee:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad8 <prvAddNewTaskToReadyList+0x108>)
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039f4:	4b37      	ldr	r3, [pc, #220]	@ (8003ad4 <prvAddNewTaskToReadyList+0x104>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d110      	bne.n	8003a1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80039fc:	f000 fd54 	bl	80044a8 <prvInitialiseTaskLists>
 8003a00:	e00d      	b.n	8003a1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003a02:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <prvAddNewTaskToReadyList+0x10c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a0a:	4b33      	ldr	r3, [pc, #204]	@ (8003ad8 <prvAddNewTaskToReadyList+0x108>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d802      	bhi.n	8003a1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003a18:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad8 <prvAddNewTaskToReadyList+0x108>)
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003a1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ae0 <prvAddNewTaskToReadyList+0x110>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae0 <prvAddNewTaskToReadyList+0x110>)
 8003a26:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <prvAddNewTaskToReadyList+0x110>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <prvAddNewTaskToReadyList+0x114>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d903      	bls.n	8003a44 <prvAddNewTaskToReadyList+0x74>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a40:	4b28      	ldr	r3, [pc, #160]	@ (8003ae4 <prvAddNewTaskToReadyList+0x114>)
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a48:	4927      	ldr	r1, [pc, #156]	@ (8003ae8 <prvAddNewTaskToReadyList+0x118>)
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	18cb      	adds	r3, r1, r3
 8003a54:	3304      	adds	r3, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	3204      	adds	r2, #4
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1d1a      	adds	r2, r3, #4
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7e:	0013      	movs	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	189b      	adds	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <prvAddNewTaskToReadyList+0x118>)
 8003a88:	189a      	adds	r2, r3, r2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	615a      	str	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a92:	4915      	ldr	r1, [pc, #84]	@ (8003ae8 <prvAddNewTaskToReadyList+0x118>)
 8003a94:	0013      	movs	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	189b      	adds	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	585b      	ldr	r3, [r3, r1]
 8003a9e:	1c58      	adds	r0, r3, #1
 8003aa0:	4911      	ldr	r1, [pc, #68]	@ (8003ae8 <prvAddNewTaskToReadyList+0x118>)
 8003aa2:	0013      	movs	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003aac:	f001 fa1a 	bl	8004ee4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <prvAddNewTaskToReadyList+0x10c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <prvAddNewTaskToReadyList+0x108>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d201      	bcs.n	8003aca <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003ac6:	f001 f9eb 	bl	8004ea0 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	20000b94 	.word	0x20000b94
 8003ad8:	200006c0 	.word	0x200006c0
 8003adc:	20000ba0 	.word	0x20000ba0
 8003ae0:	20000bb0 	.word	0x20000bb0
 8003ae4:	20000b9c 	.word	0x20000b9c
 8003ae8:	200006c4 	.word	0x200006c4

08003aec <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xTaskDelayUntil+0x1a>
 8003b00:	b672      	cpsid	i
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	e7fd      	b.n	8003b02 <xTaskDelayUntil+0x16>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <xTaskDelayUntil+0x26>
 8003b0c:	b672      	cpsid	i
 8003b0e:	46c0      	nop			@ (mov r8, r8)
 8003b10:	e7fd      	b.n	8003b0e <xTaskDelayUntil+0x22>
        configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8003b12:	4b24      	ldr	r3, [pc, #144]	@ (8003ba4 <xTaskDelayUntil+0xb8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <xTaskDelayUntil+0x34>
 8003b1a:	b672      	cpsid	i
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	e7fd      	b.n	8003b1c <xTaskDelayUntil+0x30>

        vTaskSuspendAll();
 8003b20:	f000 f8a8 	bl	8003c74 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003b24:	4b20      	ldr	r3, [pc, #128]	@ (8003ba8 <xTaskDelayUntil+0xbc>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	18d3      	adds	r3, r2, r3
 8003b32:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d20b      	bcs.n	8003b56 <xTaskDelayUntil+0x6a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d211      	bcs.n	8003b6c <xTaskDelayUntil+0x80>
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d90d      	bls.n	8003b6c <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 8003b50:	2301      	movs	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e00a      	b.n	8003b6c <xTaskDelayUntil+0x80>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d303      	bcc.n	8003b68 <xTaskDelayUntil+0x7c>
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d901      	bls.n	8003b6c <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d006      	beq.n	8003b86 <xTaskDelayUntil+0x9a>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2100      	movs	r1, #0
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 fdef 	bl	8004764 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003b86:	f000 f881 	bl	8003c8c <xTaskResumeAll>
 8003b8a:	0003      	movs	r3, r0
 8003b8c:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <xTaskDelayUntil+0xac>
        {
            portYIELD_WITHIN_API();
 8003b94:	f001 f984 	bl	8004ea0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003b98:	697b      	ldr	r3, [r7, #20]
    }
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b006      	add	sp, #24
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	20000bbc 	.word	0x20000bbc
 8003ba8:	20000b98 	.word	0x20000b98

08003bac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bba:	003a      	movs	r2, r7
 8003bbc:	1d39      	adds	r1, r7, #4
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7ff f8a4 	bl	8002d10 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003bc8:	683c      	ldr	r4, [r7, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	4920      	ldr	r1, [pc, #128]	@ (8003c50 <vTaskStartScheduler+0xa4>)
 8003bd0:	4820      	ldr	r0, [pc, #128]	@ (8003c54 <vTaskStartScheduler+0xa8>)
 8003bd2:	9202      	str	r2, [sp, #8]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	0022      	movs	r2, r4
 8003bde:	f7ff fdc0 	bl	8003762 <xTaskCreateStatic>
 8003be2:	0002      	movs	r2, r0
 8003be4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <vTaskStartScheduler+0xac>)
 8003be6:	601a      	str	r2, [r3, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <vTaskStartScheduler+0xac>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e001      	b.n	8003bfa <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d103      	bne.n	8003c08 <vTaskStartScheduler+0x5c>
        {
            xReturn = xTimerCreateTimerTask();
 8003c00:	f000 fe1e 	bl	8004840 <xTimerCreateTimerTask>
 8003c04:	0003      	movs	r3, r0
 8003c06:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d113      	bne.n	8003c36 <vTaskStartScheduler+0x8a>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003c0e:	b672      	cpsid	i

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8003c10:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <vTaskStartScheduler+0xb0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3354      	adds	r3, #84	@ 0x54
 8003c16:	001a      	movs	r2, r3
 8003c18:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <vTaskStartScheduler+0xb4>)
 8003c1a:	601a      	str	r2, [r3, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <vTaskStartScheduler+0xb8>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4252      	negs	r2, r2
 8003c22:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c24:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <vTaskStartScheduler+0xbc>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c2a:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <vTaskStartScheduler+0xc0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003c30:	f001 f912 	bl	8004e58 <xPortStartScheduler>
 8003c34:	e005      	b.n	8003c42 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <vTaskStartScheduler+0x96>
 8003c3c:	b672      	cpsid	i
 8003c3e:	46c0      	nop			@ (mov r8, r8)
 8003c40:	e7fd      	b.n	8003c3e <vTaskStartScheduler+0x92>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003c42:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <vTaskStartScheduler+0xc4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b005      	add	sp, #20
 8003c4c:	bd90      	pop	{r4, r7, pc}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	08006790 	.word	0x08006790
 8003c54:	08004489 	.word	0x08004489
 8003c58:	20000bb8 	.word	0x20000bb8
 8003c5c:	200006c0 	.word	0x200006c0
 8003c60:	20000010 	.word	0x20000010
 8003c64:	20000bb4 	.word	0x20000bb4
 8003c68:	20000ba0 	.word	0x20000ba0
 8003c6c:	20000b98 	.word	0x20000b98
 8003c70:	20000008 	.word	0x20000008

08003c74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003c78:	4b03      	ldr	r3, [pc, #12]	@ (8003c88 <vTaskSuspendAll+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	4b02      	ldr	r3, [pc, #8]	@ (8003c88 <vTaskSuspendAll+0x14>)
 8003c80:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000bbc 	.word	0x20000bbc

08003c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003c9a:	4b69      	ldr	r3, [pc, #420]	@ (8003e40 <xTaskResumeAll+0x1b4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <xTaskResumeAll+0x1c>
 8003ca2:	b672      	cpsid	i
 8003ca4:	46c0      	nop			@ (mov r8, r8)
 8003ca6:	e7fd      	b.n	8003ca4 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ca8:	f001 f90a 	bl	8004ec0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003cac:	4b64      	ldr	r3, [pc, #400]	@ (8003e40 <xTaskResumeAll+0x1b4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	4b63      	ldr	r3, [pc, #396]	@ (8003e40 <xTaskResumeAll+0x1b4>)
 8003cb4:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003cb6:	4b62      	ldr	r3, [pc, #392]	@ (8003e40 <xTaskResumeAll+0x1b4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d000      	beq.n	8003cc0 <xTaskResumeAll+0x34>
 8003cbe:	e0b7      	b.n	8003e30 <xTaskResumeAll+0x1a4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cc0:	4b60      	ldr	r3, [pc, #384]	@ (8003e44 <xTaskResumeAll+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d100      	bne.n	8003cca <xTaskResumeAll+0x3e>
 8003cc8:	e0b2      	b.n	8003e30 <xTaskResumeAll+0x1a4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cca:	e089      	b.n	8003de0 <xTaskResumeAll+0x154>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b5e      	ldr	r3, [pc, #376]	@ (8003e48 <xTaskResumeAll+0x1bc>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	6a12      	ldr	r2, [r2, #32]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	69d2      	ldr	r2, [r2, #28]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3318      	adds	r3, #24
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d103      	bne.n	8003d02 <xTaskResumeAll+0x76>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2200      	movs	r2, #0
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	1e5a      	subs	r2, r3, #1
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	68d2      	ldr	r2, [r2, #12]
 8003d20:	609a      	str	r2, [r3, #8]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	6892      	ldr	r2, [r2, #8]
 8003d2a:	605a      	str	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3304      	adds	r3, #4
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d103      	bne.n	8003d40 <xTaskResumeAll+0xb4>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	615a      	str	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d54:	4b3d      	ldr	r3, [pc, #244]	@ (8003e4c <xTaskResumeAll+0x1c0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d903      	bls.n	8003d64 <xTaskResumeAll+0xd8>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d60:	4b3a      	ldr	r3, [pc, #232]	@ (8003e4c <xTaskResumeAll+0x1c0>)
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	4939      	ldr	r1, [pc, #228]	@ (8003e50 <xTaskResumeAll+0x1c4>)
 8003d6a:	0013      	movs	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	18cb      	adds	r3, r1, r3
 8003d74:	3304      	adds	r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	3204      	adds	r2, #4
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	609a      	str	r2, [r3, #8]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9e:	0013      	movs	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <xTaskResumeAll+0x1c4>)
 8003da8:	189a      	adds	r2, r3, r2
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	615a      	str	r2, [r3, #20]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db2:	4927      	ldr	r1, [pc, #156]	@ (8003e50 <xTaskResumeAll+0x1c4>)
 8003db4:	0013      	movs	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	585b      	ldr	r3, [r3, r1]
 8003dbe:	1c58      	adds	r0, r3, #1
 8003dc0:	4923      	ldr	r1, [pc, #140]	@ (8003e50 <xTaskResumeAll+0x1c4>)
 8003dc2:	0013      	movs	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd0:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <xTaskResumeAll+0x1c8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d902      	bls.n	8003de0 <xTaskResumeAll+0x154>
                    {
                        xYieldPending = pdTRUE;
 8003dda:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <xTaskResumeAll+0x1cc>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de0:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <xTaskResumeAll+0x1bc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d000      	beq.n	8003dea <xTaskResumeAll+0x15e>
 8003de8:	e770      	b.n	8003ccc <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <xTaskResumeAll+0x168>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003df0:	f000 fbfe 	bl	80045f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <xTaskResumeAll+0x1d0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00f      	beq.n	8003e20 <xTaskResumeAll+0x194>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003e00:	f000 f83c 	bl	8003e7c <xTaskIncrementTick>
 8003e04:	1e03      	subs	r3, r0, #0
 8003e06:	d002      	beq.n	8003e0e <xTaskResumeAll+0x182>
                            {
                                xYieldPending = pdTRUE;
 8003e08:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <xTaskResumeAll+0x1cc>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f2      	bne.n	8003e00 <xTaskResumeAll+0x174>

                        xPendedTicks = 0;
 8003e1a:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <xTaskResumeAll+0x1d0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003e20:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <xTaskResumeAll+0x1cc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <xTaskResumeAll+0x1a4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003e2c:	f001 f838 	bl	8004ea0 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003e30:	f001 f858 	bl	8004ee4 <vPortExitCritical>

    return xAlreadyYielded;
 8003e34:	693b      	ldr	r3, [r7, #16]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b006      	add	sp, #24
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	20000bbc 	.word	0x20000bbc
 8003e44:	20000b94 	.word	0x20000b94
 8003e48:	20000b54 	.word	0x20000b54
 8003e4c:	20000b9c 	.word	0x20000b9c
 8003e50:	200006c4 	.word	0x200006c4
 8003e54:	200006c0 	.word	0x200006c0
 8003e58:	20000ba8 	.word	0x20000ba8
 8003e5c:	20000ba4 	.word	0x20000ba4

08003e60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003e66:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <xTaskGetTickCount+0x18>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003e6c:	687b      	ldr	r3, [r7, #4]
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b002      	add	sp, #8
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			@ (mov r8, r8)
 8003e78:	20000b98 	.word	0x20000b98

08003e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003e86:	4b78      	ldr	r3, [pc, #480]	@ (8004068 <xTaskIncrementTick+0x1ec>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d000      	beq.n	8003e90 <xTaskIncrementTick+0x14>
 8003e8e:	e0e1      	b.n	8004054 <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e90:	4b76      	ldr	r3, [pc, #472]	@ (800406c <xTaskIncrementTick+0x1f0>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003e98:	4b74      	ldr	r3, [pc, #464]	@ (800406c <xTaskIncrementTick+0x1f0>)
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d118      	bne.n	8003ed6 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ea4:	4b72      	ldr	r3, [pc, #456]	@ (8004070 <xTaskIncrementTick+0x1f4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <xTaskIncrementTick+0x38>
 8003eae:	b672      	cpsid	i
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	e7fd      	b.n	8003eb0 <xTaskIncrementTick+0x34>
 8003eb4:	4b6e      	ldr	r3, [pc, #440]	@ (8004070 <xTaskIncrementTick+0x1f4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	4b6e      	ldr	r3, [pc, #440]	@ (8004074 <xTaskIncrementTick+0x1f8>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	@ (8004070 <xTaskIncrementTick+0x1f4>)
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8004074 <xTaskIncrementTick+0x1f8>)
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	@ (8004078 <xTaskIncrementTick+0x1fc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	4b6a      	ldr	r3, [pc, #424]	@ (8004078 <xTaskIncrementTick+0x1fc>)
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f000 fb8d 	bl	80045f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ed6:	4b69      	ldr	r3, [pc, #420]	@ (800407c <xTaskIncrementTick+0x200>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d200      	bcs.n	8003ee2 <xTaskIncrementTick+0x66>
 8003ee0:	e0a4      	b.n	800402c <xTaskIncrementTick+0x1b0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee2:	4b63      	ldr	r3, [pc, #396]	@ (8004070 <xTaskIncrementTick+0x1f4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eec:	4b63      	ldr	r3, [pc, #396]	@ (800407c <xTaskIncrementTick+0x200>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4252      	negs	r2, r2
 8003ef2:	601a      	str	r2, [r3, #0]
                    break;
 8003ef4:	e09a      	b.n	800402c <xTaskIncrementTick+0x1b0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef6:	4b5e      	ldr	r3, [pc, #376]	@ (8004070 <xTaskIncrementTick+0x1f4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d203      	bcs.n	8003f16 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800407c <xTaskIncrementTick+0x200>)
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003f14:	e08a      	b.n	800402c <xTaskIncrementTick+0x1b0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	68d2      	ldr	r2, [r2, #12]
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	6892      	ldr	r2, [r2, #8]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3304      	adds	r3, #4
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d103      	bne.n	8003f44 <xTaskIncrementTick+0xc8>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2200      	movs	r2, #0
 8003f48:	615a      	str	r2, [r3, #20]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	1e5a      	subs	r2, r3, #1
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01e      	beq.n	8003f9a <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	6a12      	ldr	r2, [r2, #32]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	69d2      	ldr	r2, [r2, #28]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	3318      	adds	r3, #24
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d103      	bne.n	8003f8a <xTaskIncrementTick+0x10e>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1e5a      	subs	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9e:	4b38      	ldr	r3, [pc, #224]	@ (8004080 <xTaskIncrementTick+0x204>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d903      	bls.n	8003fae <xTaskIncrementTick+0x132>
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003faa:	4b35      	ldr	r3, [pc, #212]	@ (8004080 <xTaskIncrementTick+0x204>)
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	4934      	ldr	r1, [pc, #208]	@ (8004084 <xTaskIncrementTick+0x208>)
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	189b      	adds	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	18cb      	adds	r3, r1, r3
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	3204      	adds	r2, #4
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1d1a      	adds	r2, r3, #4
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe8:	0013      	movs	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	189b      	adds	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4a24      	ldr	r2, [pc, #144]	@ (8004084 <xTaskIncrementTick+0x208>)
 8003ff2:	189a      	adds	r2, r3, r2
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	615a      	str	r2, [r3, #20]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffc:	4921      	ldr	r1, [pc, #132]	@ (8004084 <xTaskIncrementTick+0x208>)
 8003ffe:	0013      	movs	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	189b      	adds	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	585b      	ldr	r3, [r3, r1]
 8004008:	1c58      	adds	r0, r3, #1
 800400a:	491e      	ldr	r1, [pc, #120]	@ (8004084 <xTaskIncrementTick+0x208>)
 800400c:	0013      	movs	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	189b      	adds	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <xTaskIncrementTick+0x20c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	429a      	cmp	r2, r3
 8004022:	d800      	bhi.n	8004026 <xTaskIncrementTick+0x1aa>
 8004024:	e75d      	b.n	8003ee2 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800402a:	e75a      	b.n	8003ee2 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800402c:	4b16      	ldr	r3, [pc, #88]	@ (8004088 <xTaskIncrementTick+0x20c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004032:	4914      	ldr	r1, [pc, #80]	@ (8004084 <xTaskIncrementTick+0x208>)
 8004034:	0013      	movs	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	189b      	adds	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	585b      	ldr	r3, [r3, r1]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d901      	bls.n	8004046 <xTaskIncrementTick+0x1ca>
            {
                xSwitchRequired = pdTRUE;
 8004042:	2301      	movs	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004046:	4b11      	ldr	r3, [pc, #68]	@ (800408c <xTaskIncrementTick+0x210>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 800404e:	2301      	movs	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e004      	b.n	800405e <xTaskIncrementTick+0x1e2>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004054:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <xTaskIncrementTick+0x214>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <xTaskIncrementTick+0x214>)
 800405c:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800405e:	69fb      	ldr	r3, [r7, #28]
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b008      	add	sp, #32
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000bbc 	.word	0x20000bbc
 800406c:	20000b98 	.word	0x20000b98
 8004070:	20000b4c 	.word	0x20000b4c
 8004074:	20000b50 	.word	0x20000b50
 8004078:	20000bac 	.word	0x20000bac
 800407c:	20000bb4 	.word	0x20000bb4
 8004080:	20000b9c 	.word	0x20000b9c
 8004084:	200006c4 	.word	0x200006c4
 8004088:	200006c0 	.word	0x200006c0
 800408c:	20000ba8 	.word	0x20000ba8
 8004090:	20000ba4 	.word	0x20000ba4

08004094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800409a:	4b25      	ldr	r3, [pc, #148]	@ (8004130 <vTaskSwitchContext+0x9c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80040a2:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <vTaskSwitchContext+0xa0>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80040a8:	e03d      	b.n	8004126 <vTaskSwitchContext+0x92>
        xYieldPending = pdFALSE;
 80040aa:	4b22      	ldr	r3, [pc, #136]	@ (8004134 <vTaskSwitchContext+0xa0>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b21      	ldr	r3, [pc, #132]	@ (8004138 <vTaskSwitchContext+0xa4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	e008      	b.n	80040ca <vTaskSwitchContext+0x36>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <vTaskSwitchContext+0x30>
 80040be:	b672      	cpsid	i
 80040c0:	46c0      	nop			@ (mov r8, r8)
 80040c2:	e7fd      	b.n	80040c0 <vTaskSwitchContext+0x2c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	491c      	ldr	r1, [pc, #112]	@ (800413c <vTaskSwitchContext+0xa8>)
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	0013      	movs	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	585b      	ldr	r3, [r3, r1]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0ed      	beq.n	80040b8 <vTaskSwitchContext+0x24>
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	0013      	movs	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	189b      	adds	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4a15      	ldr	r2, [pc, #84]	@ (800413c <vTaskSwitchContext+0xa8>)
 80040e8:	189b      	adds	r3, r3, r2
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	429a      	cmp	r2, r3
 8004100:	d103      	bne.n	800410a <vTaskSwitchContext+0x76>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <vTaskSwitchContext+0xac>)
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <vTaskSwitchContext+0xa4>)
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	601a      	str	r2, [r3, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800411a:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <vTaskSwitchContext+0xac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3354      	adds	r3, #84	@ 0x54
 8004120:	001a      	movs	r2, r3
 8004122:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <vTaskSwitchContext+0xb0>)
 8004124:	601a      	str	r2, [r3, #0]
}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	b002      	add	sp, #8
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	20000bbc 	.word	0x20000bbc
 8004134:	20000ba8 	.word	0x20000ba8
 8004138:	20000b9c 	.word	0x20000b9c
 800413c:	200006c4 	.word	0x200006c4
 8004140:	200006c0 	.word	0x200006c0
 8004144:	20000010 	.word	0x20000010

08004148 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <vTaskPlaceOnEventList+0x16>
 8004158:	b672      	cpsid	i
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	e7fd      	b.n	800415a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800415e:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <vTaskPlaceOnEventList+0x3c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3318      	adds	r3, #24
 8004164:	001a      	movs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	0011      	movs	r1, r2
 800416a:	0018      	movs	r0, r3
 800416c:	f7fe fe29 	bl	8002dc2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2101      	movs	r1, #1
 8004174:	0018      	movs	r0, r3
 8004176:	f000 faf5 	bl	8004764 <prvAddCurrentTaskToDelayedList>
}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	b002      	add	sp, #8
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	200006c0 	.word	0x200006c0

08004188 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <vTaskPlaceOnEventListRestricted+0x18>
 800419a:	b672      	cpsid	i
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	e7fd      	b.n	800419c <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	4b17      	ldr	r3, [pc, #92]	@ (8004204 <vTaskPlaceOnEventListRestricted+0x7c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	61da      	str	r2, [r3, #28]
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <vTaskPlaceOnEventListRestricted+0x7c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	621a      	str	r2, [r3, #32]
 80041b8:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <vTaskPlaceOnEventListRestricted+0x7c>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	3218      	adds	r2, #24
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <vTaskPlaceOnEventListRestricted+0x7c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3318      	adds	r3, #24
 80041ca:	001a      	movs	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <vTaskPlaceOnEventListRestricted+0x7c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 80041e8:	2301      	movs	r3, #1
 80041ea:	425b      	negs	r3, r3
 80041ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 fab5 	bl	8004764 <prvAddCurrentTaskToDelayedList>
    }
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b006      	add	sp, #24
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	200006c0 	.word	0x200006c0

08004208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <xTaskRemoveFromEventList+0x1c>
 800421e:	b672      	cpsid	i
 8004220:	46c0      	nop			@ (mov r8, r8)
 8004222:	e7fd      	b.n	8004220 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	6a12      	ldr	r2, [r2, #32]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	69d2      	ldr	r2, [r2, #28]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	3318      	adds	r3, #24
 8004246:	429a      	cmp	r2, r3
 8004248:	d103      	bne.n	8004252 <xTaskRemoveFromEventList+0x4a>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2200      	movs	r2, #0
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004262:	4b49      	ldr	r3, [pc, #292]	@ (8004388 <xTaskRemoveFromEventList+0x180>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d15d      	bne.n	8004326 <xTaskRemoveFromEventList+0x11e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	68d2      	ldr	r2, [r2, #12]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	6892      	ldr	r2, [r2, #8]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	3304      	adds	r3, #4
 800428c:	429a      	cmp	r2, r3
 800428e:	d103      	bne.n	8004298 <xTaskRemoveFromEventList+0x90>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	1e5a      	subs	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ac:	4b37      	ldr	r3, [pc, #220]	@ (800438c <xTaskRemoveFromEventList+0x184>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d903      	bls.n	80042bc <xTaskRemoveFromEventList+0xb4>
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b8:	4b34      	ldr	r3, [pc, #208]	@ (800438c <xTaskRemoveFromEventList+0x184>)
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c0:	4933      	ldr	r1, [pc, #204]	@ (8004390 <xTaskRemoveFromEventList+0x188>)
 80042c2:	0013      	movs	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	18cb      	adds	r3, r1, r3
 80042cc:	3304      	adds	r3, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	3204      	adds	r2, #4
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	1d1a      	adds	r2, r3, #4
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f6:	0013      	movs	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	189b      	adds	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4a24      	ldr	r2, [pc, #144]	@ (8004390 <xTaskRemoveFromEventList+0x188>)
 8004300:	189a      	adds	r2, r3, r2
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	615a      	str	r2, [r3, #20]
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430a:	4921      	ldr	r1, [pc, #132]	@ (8004390 <xTaskRemoveFromEventList+0x188>)
 800430c:	0013      	movs	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	189b      	adds	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	585b      	ldr	r3, [r3, r1]
 8004316:	1c58      	adds	r0, r3, #1
 8004318:	491d      	ldr	r1, [pc, #116]	@ (8004390 <xTaskRemoveFromEventList+0x188>)
 800431a:	0013      	movs	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	189b      	adds	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	5058      	str	r0, [r3, r1]
 8004324:	e01b      	b.n	800435e <xTaskRemoveFromEventList+0x156>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004326:	4b1b      	ldr	r3, [pc, #108]	@ (8004394 <xTaskRemoveFromEventList+0x18c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	61da      	str	r2, [r3, #28]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	621a      	str	r2, [r3, #32]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	3218      	adds	r2, #24
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	3318      	adds	r3, #24
 8004348:	001a      	movs	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <xTaskRemoveFromEventList+0x18c>)
 8004352:	629a      	str	r2, [r3, #40]	@ 0x28
 8004354:	4b0f      	ldr	r3, [pc, #60]	@ (8004394 <xTaskRemoveFromEventList+0x18c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <xTaskRemoveFromEventList+0x18c>)
 800435c:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <xTaskRemoveFromEventList+0x190>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004368:	429a      	cmp	r2, r3
 800436a:	d905      	bls.n	8004378 <xTaskRemoveFromEventList+0x170>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <xTaskRemoveFromEventList+0x194>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e001      	b.n	800437c <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        xReturn = pdFALSE;
 8004378:	2300      	movs	r3, #0
 800437a:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800437c:	69fb      	ldr	r3, [r7, #28]
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b008      	add	sp, #32
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	20000bbc 	.word	0x20000bbc
 800438c:	20000b9c 	.word	0x20000b9c
 8004390:	200006c4 	.word	0x200006c4
 8004394:	20000b54 	.word	0x20000b54
 8004398:	200006c0 	.word	0x200006c0
 800439c:	20000ba8 	.word	0x20000ba8

080043a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <vTaskInternalSetTimeOutState+0x20>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80043b0:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <vTaskInternalSetTimeOutState+0x24>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	605a      	str	r2, [r3, #4]
}
 80043b8:	46c0      	nop			@ (mov r8, r8)
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b002      	add	sp, #8
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000bac 	.word	0x20000bac
 80043c4:	20000b98 	.word	0x20000b98

080043c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <xTaskCheckForTimeOut+0x16>
 80043d8:	b672      	cpsid	i
 80043da:	46c0      	nop			@ (mov r8, r8)
 80043dc:	e7fd      	b.n	80043da <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <xTaskCheckForTimeOut+0x22>
 80043e4:	b672      	cpsid	i
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	e7fd      	b.n	80043e6 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 80043ea:	f000 fd69 	bl	8004ec0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80043ee:	4b1f      	ldr	r3, [pc, #124]	@ (800446c <xTaskCheckForTimeOut+0xa4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	d102      	bne.n	800440c <xTaskCheckForTimeOut+0x44>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e027      	b.n	800445c <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <xTaskCheckForTimeOut+0xa8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d00a      	beq.n	800442e <xTaskCheckForTimeOut+0x66>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	429a      	cmp	r2, r3
 8004420:	d305      	bcc.n	800442e <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004422:	2301      	movs	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e016      	b.n	800445c <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d20c      	bcs.n	8004452 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f7ff ffaa 	bl	80043a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e004      	b.n	800445c <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004458:	2301      	movs	r3, #1
 800445a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800445c:	f000 fd42 	bl	8004ee4 <vPortExitCritical>

    return xReturn;
 8004460:	697b      	ldr	r3, [r7, #20]
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	b006      	add	sp, #24
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	20000b98 	.word	0x20000b98
 8004470:	20000bac 	.word	0x20000bac

08004474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004478:	4b02      	ldr	r3, [pc, #8]	@ (8004484 <vTaskMissedYield+0x10>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	20000ba8 	.word	0x20000ba8

08004488 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004490:	f000 f84e 	bl	8004530 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004494:	4b03      	ldr	r3, [pc, #12]	@ (80044a4 <prvIdleTask+0x1c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d9f9      	bls.n	8004490 <prvIdleTask+0x8>
            {
                taskYIELD();
 800449c:	f000 fd00 	bl	8004ea0 <vPortYield>
        prvCheckTasksWaitingTermination();
 80044a0:	e7f6      	b.n	8004490 <prvIdleTask+0x8>
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	200006c4 	.word	0x200006c4

080044a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	e00c      	b.n	80044ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	0013      	movs	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a14      	ldr	r2, [pc, #80]	@ (8004510 <prvInitialiseTaskLists+0x68>)
 80044c0:	189b      	adds	r3, r3, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7fe fc54 	bl	8002d70 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3301      	adds	r3, #1
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b37      	cmp	r3, #55	@ 0x37
 80044d2:	d9ef      	bls.n	80044b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80044d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <prvInitialiseTaskLists+0x6c>)
 80044d6:	0018      	movs	r0, r3
 80044d8:	f7fe fc4a 	bl	8002d70 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80044dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004518 <prvInitialiseTaskLists+0x70>)
 80044de:	0018      	movs	r0, r3
 80044e0:	f7fe fc46 	bl	8002d70 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80044e4:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <prvInitialiseTaskLists+0x74>)
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7fe fc42 	bl	8002d70 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80044ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004520 <prvInitialiseTaskLists+0x78>)
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7fe fc3e 	bl	8002d70 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <prvInitialiseTaskLists+0x7c>)
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7fe fc3a 	bl	8002d70 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <prvInitialiseTaskLists+0x80>)
 80044fe:	4a05      	ldr	r2, [pc, #20]	@ (8004514 <prvInitialiseTaskLists+0x6c>)
 8004500:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004502:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <prvInitialiseTaskLists+0x84>)
 8004504:	4a04      	ldr	r2, [pc, #16]	@ (8004518 <prvInitialiseTaskLists+0x70>)
 8004506:	601a      	str	r2, [r3, #0]
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	46bd      	mov	sp, r7
 800450c:	b002      	add	sp, #8
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200006c4 	.word	0x200006c4
 8004514:	20000b24 	.word	0x20000b24
 8004518:	20000b38 	.word	0x20000b38
 800451c:	20000b54 	.word	0x20000b54
 8004520:	20000b68 	.word	0x20000b68
 8004524:	20000b80 	.word	0x20000b80
 8004528:	20000b4c 	.word	0x20000b4c
 800452c:	20000b50 	.word	0x20000b50

08004530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004536:	e01a      	b.n	800456e <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8004538:	f000 fcc2 	bl	8004ec0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453c:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <prvCheckTasksWaitingTermination+0x50>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	0018      	movs	r0, r3
 800454a:	f7fe fc70 	bl	8002e2e <uxListRemove>
                --uxCurrentNumberOfTasks;
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <prvCheckTasksWaitingTermination+0x54>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	1e5a      	subs	r2, r3, #1
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <prvCheckTasksWaitingTermination+0x54>)
 8004556:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <prvCheckTasksWaitingTermination+0x58>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <prvCheckTasksWaitingTermination+0x58>)
 8004560:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8004562:	f000 fcbf 	bl	8004ee4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 f80f 	bl	800458c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800456e:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <prvCheckTasksWaitingTermination+0x58>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e0      	bne.n	8004538 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	46c0      	nop			@ (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}
 8004580:	20000b68 	.word	0x20000b68
 8004584:	20000b94 	.word	0x20000b94
 8004588:	20000b7c 	.word	0x20000b7c

0800458c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 8004594:	4b15      	ldr	r3, [pc, #84]	@ (80045ec <prvDeleteTCB+0x60>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3354      	adds	r3, #84	@ 0x54
 800459a:	0018      	movs	r0, r3
 800459c:	f000 ff32 	bl	8005404 <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	22a5      	movs	r2, #165	@ 0xa5
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <prvDeleteTCB+0x32>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 fdd6 	bl	8005160 <vPortFree>
                vPortFree( pxTCB );
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 fdd2 	bl	8005160 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80045bc:	e011      	b.n	80045e2 <prvDeleteTCB+0x56>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	22a5      	movs	r2, #165	@ 0xa5
 80045c2:	5c9b      	ldrb	r3, [r3, r2]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d104      	bne.n	80045d2 <prvDeleteTCB+0x46>
                vPortFree( pxTCB );
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 fdc8 	bl	8005160 <vPortFree>
    }
 80045d0:	e007      	b.n	80045e2 <prvDeleteTCB+0x56>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	22a5      	movs	r2, #165	@ 0xa5
 80045d6:	5c9b      	ldrb	r3, [r3, r2]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d002      	beq.n	80045e2 <prvDeleteTCB+0x56>
 80045dc:	b672      	cpsid	i
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	e7fd      	b.n	80045de <prvDeleteTCB+0x52>
    }
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b002      	add	sp, #8
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	200006c0 	.word	0x200006c0

080045f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f4:	4b09      	ldr	r3, [pc, #36]	@ (800461c <prvResetNextTaskUnblockTime+0x2c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <prvResetNextTaskUnblockTime+0x30>)
 8004600:	2201      	movs	r2, #1
 8004602:	4252      	negs	r2, r2
 8004604:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004606:	e005      	b.n	8004614 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004608:	4b04      	ldr	r3, [pc, #16]	@ (800461c <prvResetNextTaskUnblockTime+0x2c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b03      	ldr	r3, [pc, #12]	@ (8004620 <prvResetNextTaskUnblockTime+0x30>)
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	46c0      	nop			@ (mov r8, r8)
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	20000b4c 	.word	0x20000b4c
 8004620:	20000bb4 	.word	0x20000bb4

08004624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800462a:	4b0a      	ldr	r3, [pc, #40]	@ (8004654 <xTaskGetSchedulerState+0x30>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004632:	2301      	movs	r3, #1
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	e008      	b.n	800464a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004638:	4b07      	ldr	r3, [pc, #28]	@ (8004658 <xTaskGetSchedulerState+0x34>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004640:	2302      	movs	r3, #2
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	e001      	b.n	800464a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800464a:	687b      	ldr	r3, [r7, #4]
    }
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b002      	add	sp, #8
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000ba0 	.word	0x20000ba0
 8004658:	20000bbc 	.word	0x20000bbc

0800465c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d06c      	beq.n	800474c <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004672:	4b39      	ldr	r3, [pc, #228]	@ (8004758 <xTaskPriorityDisinherit+0xfc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d002      	beq.n	8004682 <xTaskPriorityDisinherit+0x26>
 800467c:	b672      	cpsid	i
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	e7fd      	b.n	800467e <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <xTaskPriorityDisinherit+0x34>
 800468a:	b672      	cpsid	i
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	e7fd      	b.n	800468c <xTaskPriorityDisinherit+0x30>
            ( pxTCB->uxMutexesHeld )--;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004694:	1e5a      	subs	r2, r3, #1
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d052      	beq.n	800474c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d14e      	bne.n	800474c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	3304      	adds	r3, #4
 80046b2:	0018      	movs	r0, r3
 80046b4:	f7fe fbbb 	bl	8002e2e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	2238      	movs	r2, #56	@ 0x38
 80046c6:	1ad2      	subs	r2, r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d0:	4b22      	ldr	r3, [pc, #136]	@ (800475c <xTaskPriorityDisinherit+0x100>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d903      	bls.n	80046e0 <xTaskPriorityDisinherit+0x84>
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046dc:	4b1f      	ldr	r3, [pc, #124]	@ (800475c <xTaskPriorityDisinherit+0x100>)
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e4:	491e      	ldr	r1, [pc, #120]	@ (8004760 <xTaskPriorityDisinherit+0x104>)
 80046e6:	0013      	movs	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	18cb      	adds	r3, r1, r3
 80046f0:	3304      	adds	r3, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	60da      	str	r2, [r3, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	3204      	adds	r2, #4
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1d1a      	adds	r2, r3, #4
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471a:	0013      	movs	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	189b      	adds	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4a0f      	ldr	r2, [pc, #60]	@ (8004760 <xTaskPriorityDisinherit+0x104>)
 8004724:	189a      	adds	r2, r3, r2
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	615a      	str	r2, [r3, #20]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800472e:	490c      	ldr	r1, [pc, #48]	@ (8004760 <xTaskPriorityDisinherit+0x104>)
 8004730:	0013      	movs	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	189b      	adds	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	585b      	ldr	r3, [r3, r1]
 800473a:	1c58      	adds	r0, r3, #1
 800473c:	4908      	ldr	r1, [pc, #32]	@ (8004760 <xTaskPriorityDisinherit+0x104>)
 800473e:	0013      	movs	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	189b      	adds	r3, r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800474c:	697b      	ldr	r3, [r7, #20]
    }
 800474e:	0018      	movs	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	b006      	add	sp, #24
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	200006c0 	.word	0x200006c0
 800475c:	20000b9c 	.word	0x20000b9c
 8004760:	200006c4 	.word	0x200006c4

08004764 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800476e:	4b2e      	ldr	r3, [pc, #184]	@ (8004828 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004774:	4b2d      	ldr	r3, [pc, #180]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3304      	adds	r3, #4
 800477a:	0018      	movs	r0, r3
 800477c:	f7fe fb57 	bl	8002e2e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3301      	adds	r3, #1
 8004784:	d124      	bne.n	80047d0 <prvAddCurrentTaskToDelayedList+0x6c>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d021      	beq.n	80047d0 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800478c:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <prvAddCurrentTaskToDelayedList+0xcc>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	4b26      	ldr	r3, [pc, #152]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	609a      	str	r2, [r3, #8]
 800479a:	4b24      	ldr	r3, [pc, #144]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	6892      	ldr	r2, [r2, #8]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	4b21      	ldr	r3, [pc, #132]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	3204      	adds	r2, #4
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	1d1a      	adds	r2, r3, #4
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1c      	ldr	r2, [pc, #112]	@ (8004830 <prvAddCurrentTaskToDelayedList+0xcc>)
 80047c0:	615a      	str	r2, [r3, #20]
 80047c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <prvAddCurrentTaskToDelayedList+0xcc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <prvAddCurrentTaskToDelayedList+0xcc>)
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	46c0      	nop			@ (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80047ce:	e026      	b.n	800481e <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	18d3      	adds	r3, r2, r3
 80047d6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047d8:	4b14      	ldr	r3, [pc, #80]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d209      	bcs.n	80047fc <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e8:	4b12      	ldr	r3, [pc, #72]	@ (8004834 <prvAddCurrentTaskToDelayedList+0xd0>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3304      	adds	r3, #4
 80047f2:	0019      	movs	r1, r3
 80047f4:	0010      	movs	r0, r2
 80047f6:	f7fe fae4 	bl	8002dc2 <vListInsert>
}
 80047fa:	e010      	b.n	800481e <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004838 <prvAddCurrentTaskToDelayedList+0xd4>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3304      	adds	r3, #4
 8004806:	0019      	movs	r1, r3
 8004808:	0010      	movs	r0, r2
 800480a:	f7fe fada 	bl	8002dc2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800480e:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	429a      	cmp	r2, r3
 8004816:	d202      	bcs.n	800481e <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8004818:	4b08      	ldr	r3, [pc, #32]	@ (800483c <prvAddCurrentTaskToDelayedList+0xd8>)
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]
}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	b006      	add	sp, #24
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	20000b98 	.word	0x20000b98
 800482c:	200006c0 	.word	0x200006c0
 8004830:	20000b80 	.word	0x20000b80
 8004834:	20000b50 	.word	0x20000b50
 8004838:	20000b4c 	.word	0x20000b4c
 800483c:	20000bb4 	.word	0x20000bb4

08004840 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b089      	sub	sp, #36	@ 0x24
 8004844:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800484a:	f000 fa5d 	bl	8004d08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800484e:	4b18      	ldr	r3, [pc, #96]	@ (80048b0 <xTimerCreateTimerTask+0x70>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d020      	beq.n	8004898 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800485e:	003a      	movs	r2, r7
 8004860:	1d39      	adds	r1, r7, #4
 8004862:	2308      	movs	r3, #8
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	0018      	movs	r0, r3
 8004868:	f7fe fa6a 	bl	8002d40 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800486c:	683c      	ldr	r4, [r7, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	4910      	ldr	r1, [pc, #64]	@ (80048b4 <xTimerCreateTimerTask+0x74>)
 8004874:	4810      	ldr	r0, [pc, #64]	@ (80048b8 <xTimerCreateTimerTask+0x78>)
 8004876:	9202      	str	r2, [sp, #8]
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	2302      	movs	r3, #2
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	0022      	movs	r2, r4
 8004882:	f7fe ff6e 	bl	8003762 <xTaskCreateStatic>
 8004886:	0002      	movs	r2, r0
 8004888:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <xTimerCreateTimerTask+0x7c>)
 800488a:	601a      	str	r2, [r3, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <xTimerCreateTimerTask+0x7c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8004894:	2301      	movs	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <xTimerCreateTimerTask+0x64>
 800489e:	b672      	cpsid	i
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	e7fd      	b.n	80048a0 <xTimerCreateTimerTask+0x60>
        return xReturn;
 80048a4:	68fb      	ldr	r3, [r7, #12]
    }
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b005      	add	sp, #20
 80048ac:	bd90      	pop	{r4, r7, pc}
 80048ae:	46c0      	nop			@ (mov r8, r8)
 80048b0:	20000bf0 	.word	0x20000bf0
 80048b4:	08006798 	.word	0x08006798
 80048b8:	08004969 	.word	0x08004969
 80048bc:	20000bf4 	.word	0x20000bf4

080048c0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80048cc:	e009      	b.n	80048e2 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	18d3      	adds	r3, r2, r3
 80048d6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	0010      	movs	r0, r2
 80048e0:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	18d1      	adds	r1, r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f8da 	bl	8004aa8 <prvInsertTimerInActiveList>
 80048f4:	1e03      	subs	r3, r0, #0
 80048f6:	d1ea      	bne.n	80048ce <prvReloadTimer+0xe>
        }
    }
 80048f8:	46c0      	nop			@ (mov r8, r8)
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b004      	add	sp, #16
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <prvProcessExpiredTimer+0x60>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3304      	adds	r3, #4
 800491c:	0018      	movs	r0, r3
 800491e:	f7fe fa86 	bl	8002e2e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2228      	movs	r2, #40	@ 0x28
 8004926:	5c9b      	ldrb	r3, [r3, r2]
 8004928:	001a      	movs	r2, r3
 800492a:	2304      	movs	r3, #4
 800492c:	4013      	ands	r3, r2
 800492e:	d006      	beq.n	800493e <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	0018      	movs	r0, r3
 8004938:	f7ff ffc2 	bl	80048c0 <prvReloadTimer>
 800493c:	e008      	b.n	8004950 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2228      	movs	r2, #40	@ 0x28
 8004942:	5c9b      	ldrb	r3, [r3, r2]
 8004944:	2201      	movs	r2, #1
 8004946:	4393      	bics	r3, r2
 8004948:	b2d9      	uxtb	r1, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2228      	movs	r2, #40	@ 0x28
 800494e:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	0010      	movs	r0, r2
 8004958:	4798      	blx	r3
    }
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b004      	add	sp, #16
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	20000be8 	.word	0x20000be8

08004968 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004970:	2308      	movs	r3, #8
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	0018      	movs	r0, r3
 8004976:	f000 f855 	bl	8004a24 <prvGetNextExpireTime>
 800497a:	0003      	movs	r3, r0
 800497c:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	0011      	movs	r1, r2
 8004984:	0018      	movs	r0, r3
 8004986:	f000 f805 	bl	8004994 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800498a:	f000 f8cf 	bl	8004b2c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	e7ee      	b.n	8004970 <prvTimerTask+0x8>
	...

08004994 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800499e:	f7ff f969 	bl	8003c74 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049a2:	2308      	movs	r3, #8
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 f85e 	bl	8004a68 <prvSampleTimeNow>
 80049ac:	0003      	movs	r3, r0
 80049ae:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d12b      	bne.n	8004a0e <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10c      	bne.n	80049d6 <prvProcessTimerOrBlockTask+0x42>
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d808      	bhi.n	80049d6 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 80049c4:	f7ff f962 	bl	8003c8c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff ff98 	bl	8004904 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80049d4:	e01d      	b.n	8004a12 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049dc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a1c <prvProcessTimerOrBlockTask+0x88>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <prvProcessTimerOrBlockTask+0x56>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <prvProcessTimerOrBlockTask+0x58>
 80049ea:	2300      	movs	r3, #0
 80049ec:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <prvProcessTimerOrBlockTask+0x8c>)
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	0019      	movs	r1, r3
 80049fc:	f7fe fe7e 	bl	80036fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a00:	f7ff f944 	bl	8003c8c <xTaskResumeAll>
 8004a04:	1e03      	subs	r3, r0, #0
 8004a06:	d104      	bne.n	8004a12 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8004a08:	f000 fa4a 	bl	8004ea0 <vPortYield>
    }
 8004a0c:	e001      	b.n	8004a12 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8004a0e:	f7ff f93d 	bl	8003c8c <xTaskResumeAll>
    }
 8004a12:	46c0      	nop			@ (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b004      	add	sp, #16
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	20000bec 	.word	0x20000bec
 8004a20:	20000bf0 	.word	0x20000bf0

08004a24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <prvGetNextExpireTime+0x40>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <prvGetNextExpireTime+0x16>
 8004a36:	2201      	movs	r2, #1
 8004a38:	e000      	b.n	8004a3c <prvGetNextExpireTime+0x18>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d105      	bne.n	8004a54 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a48:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <prvGetNextExpireTime+0x40>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e001      	b.n	8004a58 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a58:	68fb      	ldr	r3, [r7, #12]
    }
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b004      	add	sp, #16
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	20000be8 	.word	0x20000be8

08004a68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004a70:	f7ff f9f6 	bl	8003e60 <xTaskGetTickCount>
 8004a74:	0003      	movs	r3, r0
 8004a76:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a78:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d205      	bcs.n	8004a8e <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004a82:	f000 f919 	bl	8004cb8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	e002      	b.n	8004a94 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004a94:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <prvSampleTimeNow+0x3c>)
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
    }
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b004      	add	sp, #16
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000bf8 	.word	0x20000bf8

08004aa8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d812      	bhi.n	8004af4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	1ad2      	subs	r2, r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e01b      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ae2:	4b10      	ldr	r3, [pc, #64]	@ (8004b24 <prvInsertTimerInActiveList+0x7c>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	0019      	movs	r1, r3
 8004aec:	0010      	movs	r0, r2
 8004aee:	f7fe f968 	bl	8002dc2 <vListInsert>
 8004af2:	e012      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d206      	bcs.n	8004b0a <prvInsertTimerInActiveList+0x62>
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e007      	b.n	8004b1a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <prvInsertTimerInActiveList+0x80>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3304      	adds	r3, #4
 8004b12:	0019      	movs	r1, r3
 8004b14:	0010      	movs	r0, r2
 8004b16:	f7fe f954 	bl	8002dc2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004b1a:	697b      	ldr	r3, [r7, #20]
    }
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b006      	add	sp, #24
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000bec 	.word	0x20000bec
 8004b28:	20000be8 	.word	0x20000be8

08004b2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b32:	e0ad      	b.n	8004c90 <prvProcessReceivedCommands+0x164>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da10      	bge.n	8004b5e <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	3304      	adds	r3, #4
 8004b40:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <prvProcessReceivedCommands+0x22>
 8004b48:	b672      	cpsid	i
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	e7fd      	b.n	8004b4a <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	6858      	ldr	r0, [r3, #4]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	da00      	bge.n	8004b68 <prvProcessReceivedCommands+0x3c>
 8004b66:	e093      	b.n	8004c90 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7fe f957 	bl	8002e2e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b80:	003b      	movs	r3, r7
 8004b82:	0018      	movs	r0, r3
 8004b84:	f7ff ff70 	bl	8004a68 <prvSampleTimeNow>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 8004b8c:	1d3b      	adds	r3, r7, #4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	d900      	bls.n	8004b96 <prvProcessReceivedCommands+0x6a>
 8004b94:	e079      	b.n	8004c8a <prvProcessReceivedCommands+0x15e>
 8004b96:	009a      	lsls	r2, r3, #2
 8004b98:	4b45      	ldr	r3, [pc, #276]	@ (8004cb0 <prvProcessReceivedCommands+0x184>)
 8004b9a:	18d3      	adds	r3, r2, r3
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2228      	movs	r2, #40	@ 0x28
 8004ba4:	5c9b      	ldrb	r3, [r3, r2]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	b2d9      	uxtb	r1, r3
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2228      	movs	r2, #40	@ 0x28
 8004bb0:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	18d1      	adds	r1, r2, r3
 8004bbc:	1d3b      	adds	r3, r7, #4
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	69b8      	ldr	r0, [r7, #24]
 8004bc4:	f7ff ff70 	bl	8004aa8 <prvInsertTimerInActiveList>
 8004bc8:	1e03      	subs	r3, r0, #0
 8004bca:	d060      	beq.n	8004c8e <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2228      	movs	r2, #40	@ 0x28
 8004bd0:	5c9b      	ldrb	r3, [r3, r2]
 8004bd2:	001a      	movs	r2, r3
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d00a      	beq.n	8004bf0 <prvProcessReceivedCommands+0xc4>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	18d1      	adds	r1, r2, r3
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7ff fe69 	bl	80048c0 <prvReloadTimer>
 8004bee:	e008      	b.n	8004c02 <prvProcessReceivedCommands+0xd6>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2228      	movs	r2, #40	@ 0x28
 8004bf4:	5c9b      	ldrb	r3, [r3, r2]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	b2d9      	uxtb	r1, r3
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2228      	movs	r2, #40	@ 0x28
 8004c00:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0010      	movs	r0, r2
 8004c0a:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004c0c:	e03f      	b.n	8004c8e <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2228      	movs	r2, #40	@ 0x28
 8004c12:	5c9b      	ldrb	r3, [r3, r2]
 8004c14:	2201      	movs	r2, #1
 8004c16:	4393      	bics	r3, r2
 8004c18:	b2d9      	uxtb	r1, r3
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2228      	movs	r2, #40	@ 0x28
 8004c1e:	5499      	strb	r1, [r3, r2]
                        break;
 8004c20:	e036      	b.n	8004c90 <prvProcessReceivedCommands+0x164>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2228      	movs	r2, #40	@ 0x28
 8004c26:	5c9b      	ldrb	r3, [r3, r2]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	b2d9      	uxtb	r1, r3
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2228      	movs	r2, #40	@ 0x28
 8004c32:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <prvProcessReceivedCommands+0x11e>
 8004c44:	b672      	cpsid	i
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	e7fd      	b.n	8004c46 <prvProcessReceivedCommands+0x11a>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	18d1      	adds	r1, r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	69b8      	ldr	r0, [r7, #24]
 8004c58:	f7ff ff26 	bl	8004aa8 <prvInsertTimerInActiveList>
                        break;
 8004c5c:	e018      	b.n	8004c90 <prvProcessReceivedCommands+0x164>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2228      	movs	r2, #40	@ 0x28
 8004c62:	5c9b      	ldrb	r3, [r3, r2]
 8004c64:	001a      	movs	r2, r3
 8004c66:	2302      	movs	r3, #2
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d104      	bne.n	8004c76 <prvProcessReceivedCommands+0x14a>
                            {
                                vPortFree( pxTimer );
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 fa76 	bl	8005160 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004c74:	e00c      	b.n	8004c90 <prvProcessReceivedCommands+0x164>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2228      	movs	r2, #40	@ 0x28
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	4393      	bics	r3, r2
 8004c80:	b2d9      	uxtb	r1, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2228      	movs	r2, #40	@ 0x28
 8004c86:	5499      	strb	r1, [r3, r2]
                        break;
 8004c88:	e002      	b.n	8004c90 <prvProcessReceivedCommands+0x164>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	e000      	b.n	8004c90 <prvProcessReceivedCommands+0x164>
                        break;
 8004c8e:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c90:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <prvProcessReceivedCommands+0x188>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	1d39      	adds	r1, r7, #4
 8004c96:	2200      	movs	r2, #0
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7fe fb14 	bl	80032c6 <xQueueReceive>
 8004c9e:	1e03      	subs	r3, r0, #0
 8004ca0:	d000      	beq.n	8004ca4 <prvProcessReceivedCommands+0x178>
 8004ca2:	e747      	b.n	8004b34 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b008      	add	sp, #32
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	08006854 	.word	0x08006854
 8004cb4:	20000bf0 	.word	0x20000bf0

08004cb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cbe:	e00b      	b.n	8004cd8 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <prvSwitchTimerLists+0x48>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004cca:	2301      	movs	r3, #1
 8004ccc:	425a      	negs	r2, r3
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	0011      	movs	r1, r2
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7ff fe16 	bl	8004904 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cd8:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <prvSwitchTimerLists+0x48>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1ee      	bne.n	8004cc0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004ce2:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <prvSwitchTimerLists+0x48>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <prvSwitchTimerLists+0x4c>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <prvSwitchTimerLists+0x48>)
 8004cee:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004cf0:	4b04      	ldr	r3, [pc, #16]	@ (8004d04 <prvSwitchTimerLists+0x4c>)
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
    }
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b002      	add	sp, #8
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	20000be8 	.word	0x20000be8
 8004d04:	20000bec 	.word	0x20000bec

08004d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004d0e:	f000 f8d7 	bl	8004ec0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004d12:	4b16      	ldr	r3, [pc, #88]	@ (8004d6c <prvCheckForValidListAndQueue+0x64>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d123      	bne.n	8004d62 <prvCheckForValidListAndQueue+0x5a>
            {
                vListInitialise( &xActiveTimerList1 );
 8004d1a:	4b15      	ldr	r3, [pc, #84]	@ (8004d70 <prvCheckForValidListAndQueue+0x68>)
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7fe f827 	bl	8002d70 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004d22:	4b14      	ldr	r3, [pc, #80]	@ (8004d74 <prvCheckForValidListAndQueue+0x6c>)
 8004d24:	0018      	movs	r0, r3
 8004d26:	f7fe f823 	bl	8002d70 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d2a:	4b13      	ldr	r3, [pc, #76]	@ (8004d78 <prvCheckForValidListAndQueue+0x70>)
 8004d2c:	4a10      	ldr	r2, [pc, #64]	@ (8004d70 <prvCheckForValidListAndQueue+0x68>)
 8004d2e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d30:	4b12      	ldr	r3, [pc, #72]	@ (8004d7c <prvCheckForValidListAndQueue+0x74>)
 8004d32:	4a10      	ldr	r2, [pc, #64]	@ (8004d74 <prvCheckForValidListAndQueue+0x6c>)
 8004d34:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <prvCheckForValidListAndQueue+0x78>)
 8004d38:	4a12      	ldr	r2, [pc, #72]	@ (8004d84 <prvCheckForValidListAndQueue+0x7c>)
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	9100      	str	r1, [sp, #0]
 8004d3e:	2110      	movs	r1, #16
 8004d40:	200a      	movs	r0, #10
 8004d42:	f7fe f927 	bl	8002f94 <xQueueGenericCreateStatic>
 8004d46:	0002      	movs	r2, r0
 8004d48:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <prvCheckForValidListAndQueue+0x64>)
 8004d4a:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004d4c:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <prvCheckForValidListAndQueue+0x64>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <prvCheckForValidListAndQueue+0x5a>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <prvCheckForValidListAndQueue+0x64>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0b      	ldr	r2, [pc, #44]	@ (8004d88 <prvCheckForValidListAndQueue+0x80>)
 8004d5a:	0011      	movs	r1, r2
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f7fe fc87 	bl	8003670 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d62:	f000 f8bf 	bl	8004ee4 <vPortExitCritical>
    }
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000bf0 	.word	0x20000bf0
 8004d70:	20000bc0 	.word	0x20000bc0
 8004d74:	20000bd4 	.word	0x20000bd4
 8004d78:	20000be8 	.word	0x20000be8
 8004d7c:	20000bec 	.word	0x20000bec
 8004d80:	20000c9c 	.word	0x20000c9c
 8004d84:	20000bfc 	.word	0x20000bfc
 8004d88:	080067a0 	.word	0x080067a0

08004d8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b04      	subs	r3, #4
 8004d9c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2280      	movs	r2, #128	@ 0x80
 8004da2:	0452      	lsls	r2, r2, #17
 8004da4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b04      	subs	r3, #4
 8004daa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3b04      	subs	r3, #4
 8004db6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004db8:	4a08      	ldr	r2, [pc, #32]	@ (8004ddc <pxPortInitialiseStack+0x50>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3b14      	subs	r3, #20
 8004dc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3b20      	subs	r3, #32
 8004dce:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b004      	add	sp, #16
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	08004de1 	.word	0x08004de1

08004de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004dea:	4b08      	ldr	r3, [pc, #32]	@ (8004e0c <prvTaskExitError+0x2c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3301      	adds	r3, #1
 8004df0:	d002      	beq.n	8004df8 <prvTaskExitError+0x18>
 8004df2:	b672      	cpsid	i
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	e7fd      	b.n	8004df4 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8004df8:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004dfa:	46c0      	nop			@ (mov r8, r8)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0fc      	beq.n	8004dfc <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46c0      	nop			@ (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b002      	add	sp, #8
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	2000000c 	.word	0x2000000c

08004e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8004e14:	46c0      	nop			@ (mov r8, r8)
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	0000      	movs	r0, r0
 8004e1c:	0000      	movs	r0, r0
	...

08004e20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004e20:	4a0b      	ldr	r2, [pc, #44]	@ (8004e50 <pxCurrentTCBConst2>)
 8004e22:	6813      	ldr	r3, [r2, #0]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	3020      	adds	r0, #32
 8004e28:	f380 8809 	msr	PSP, r0
 8004e2c:	2002      	movs	r0, #2
 8004e2e:	f380 8814 	msr	CONTROL, r0
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004e38:	46ae      	mov	lr, r5
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	bc04      	pop	{r2}
 8004e3e:	b662      	cpsie	i
 8004e40:	4718      	bx	r3
 8004e42:	46c0      	nop			@ (mov r8, r8)
 8004e44:	46c0      	nop			@ (mov r8, r8)
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	46c0      	nop			@ (mov r8, r8)
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	46c0      	nop			@ (mov r8, r8)

08004e50 <pxCurrentTCBConst2>:
 8004e50:	200006c0 	.word	0x200006c0
        "   bx   r3                     \n"/* Finally, jump to the user defined task code. */
        "                               \n"
        "   .align 4                    \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB   "
        );
}
 8004e54:	46c0      	nop			@ (mov r8, r8)
 8004e56:	46c0      	nop			@ (mov r8, r8)

08004e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <xPortStartScheduler+0x40>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <xPortStartScheduler+0x40>)
 8004e62:	21ff      	movs	r1, #255	@ 0xff
 8004e64:	0409      	lsls	r1, r1, #16
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e98 <xPortStartScheduler+0x40>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <xPortStartScheduler+0x40>)
 8004e70:	21ff      	movs	r1, #255	@ 0xff
 8004e72:	0609      	lsls	r1, r1, #24
 8004e74:	430a      	orrs	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e78:	f000 f898 	bl	8004fac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e7c:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <xPortStartScheduler+0x44>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 8004e82:	f7ff ffcd 	bl	8004e20 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004e86:	f7ff f905 	bl	8004094 <vTaskSwitchContext>
    prvTaskExitError();
 8004e8a:	f7ff ffa9 	bl	8004de0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	0018      	movs	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	e000ed20 	.word	0xe000ed20
 8004e9c:	2000000c 	.word	0x2000000c

08004ea0 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <vPortYield+0x1c>)
 8004ea6:	2280      	movs	r2, #128	@ 0x80
 8004ea8:	0552      	lsls	r2, r2, #21
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004eac:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004eb0:	f3bf 8f6f 	isb	sy
}
 8004eb4:	46c0      	nop			@ (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004ec4:	b672      	cpsid	i
    uxCriticalNesting++;
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <vPortEnterCritical+0x20>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	4b04      	ldr	r3, [pc, #16]	@ (8004ee0 <vPortEnterCritical+0x20>)
 8004ece:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004ed0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004ed4:	f3bf 8f6f 	isb	sy
}
 8004ed8:	46c0      	nop			@ (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	2000000c 	.word	0x2000000c

08004ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004ee8:	4b09      	ldr	r3, [pc, #36]	@ (8004f10 <vPortExitCritical+0x2c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <vPortExitCritical+0x12>
 8004ef0:	b672      	cpsid	i
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	e7fd      	b.n	8004ef2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004ef6:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <vPortExitCritical+0x2c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	1e5a      	subs	r2, r3, #1
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <vPortExitCritical+0x2c>)
 8004efe:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004f00:	4b03      	ldr	r3, [pc, #12]	@ (8004f10 <vPortExitCritical+0x2c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d100      	bne.n	8004f0a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8004f08:	b662      	cpsie	i
    }
}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004f14:	f3ef 8010 	mrs	r0, PRIMASK
 8004f18:	b672      	cpsid	i
 8004f1a:	4770      	bx	lr
        " mrs r0, PRIMASK   \n"
        " cpsid i           \n"
        " bx lr               "
        ::: "memory"
        );
}
 8004f1c:	46c0      	nop			@ (mov r8, r8)
 8004f1e:	0018      	movs	r0, r3

08004f20 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004f20:	f380 8810 	msr	PRIMASK, r0
 8004f24:	4770      	bx	lr
        " msr PRIMASK, r0   \n"
        " bx lr               "
        ::: "memory"
        );
}
 8004f26:	46c0      	nop			@ (mov r8, r8)
	...

08004f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f30:	f3ef 8009 	mrs	r0, PSP
 8004f34:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <pxCurrentTCBConst>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	3820      	subs	r0, #32
 8004f3a:	6010      	str	r0, [r2, #0]
 8004f3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f3e:	4644      	mov	r4, r8
 8004f40:	464d      	mov	r5, r9
 8004f42:	4656      	mov	r6, sl
 8004f44:	465f      	mov	r7, fp
 8004f46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004f48:	b508      	push	{r3, lr}
 8004f4a:	b672      	cpsid	i
 8004f4c:	f7ff f8a2 	bl	8004094 <vTaskSwitchContext>
 8004f50:	b662      	cpsie	i
 8004f52:	bc0c      	pop	{r2, r3}
 8004f54:	6811      	ldr	r1, [r2, #0]
 8004f56:	6808      	ldr	r0, [r1, #0]
 8004f58:	3010      	adds	r0, #16
 8004f5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f5c:	46a0      	mov	r8, r4
 8004f5e:	46a9      	mov	r9, r5
 8004f60:	46b2      	mov	sl, r6
 8004f62:	46bb      	mov	fp, r7
 8004f64:	f380 8809 	msr	PSP, r0
 8004f68:	3820      	subs	r0, #32
 8004f6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004f6c:	4718      	bx	r3
 8004f6e:	46c0      	nop			@ (mov r8, r8)

08004f70 <pxCurrentTCBConst>:
 8004f70:	200006c0 	.word	0x200006c0
        "   bx r3                               \n"
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB    "
    );
}
 8004f74:	46c0      	nop			@ (mov r8, r8)
 8004f76:	46c0      	nop			@ (mov r8, r8)

08004f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f7e:	f7ff ffc9 	bl	8004f14 <ulSetInterruptMaskFromISR>
 8004f82:	0003      	movs	r3, r0
 8004f84:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004f86:	f7fe ff79 	bl	8003e7c <xTaskIncrementTick>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d003      	beq.n	8004f96 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f8e:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <xPortSysTickHandler+0x30>)
 8004f90:	2280      	movs	r2, #128	@ 0x80
 8004f92:	0552      	lsls	r2, r2, #21
 8004f94:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7ff ffc1 	bl	8004f20 <vClearInterruptMaskFromISR>
}
 8004f9e:	46c0      	nop			@ (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b002      	add	sp, #8
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	e000ed04 	.word	0xe000ed04

08004fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <vPortSetupTimerInterrupt+0x34>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <vPortSetupTimerInterrupt+0x38>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <vPortSetupTimerInterrupt+0x3c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	22fa      	movs	r2, #250	@ 0xfa
 8004fc2:	0091      	lsls	r1, r2, #2
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7fb f8b1 	bl	800012c <__udivsi3>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	001a      	movs	r2, r3
 8004fce:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <vPortSetupTimerInterrupt+0x40>)
 8004fd0:	3a01      	subs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fd4:	4b02      	ldr	r3, [pc, #8]	@ (8004fe0 <vPortSetupTimerInterrupt+0x34>)
 8004fd6:	2207      	movs	r2, #7
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	e000e010 	.word	0xe000e010
 8004fe4:	e000e018 	.word	0xe000e018
 8004fe8:	20000000 	.word	0x20000000
 8004fec:	e000e014 	.word	0xe000e014

08004ff0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004ffc:	f7fe fe3a 	bl	8003c74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005000:	4b52      	ldr	r3, [pc, #328]	@ (800514c <pvPortMalloc+0x15c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005008:	f000 f8f8 	bl	80051fc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d021      	beq.n	8005056 <pvPortMalloc+0x66>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005012:	2308      	movs	r3, #8
 8005014:	43db      	mvns	r3, r3
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	429a      	cmp	r2, r3
 800501a:	d81a      	bhi.n	8005052 <pvPortMalloc+0x62>
            {
                xWantedSize += xHeapStructSize;
 800501c:	2208      	movs	r2, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	189b      	adds	r3, r3, r2
 8005022:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2207      	movs	r2, #7
 8005028:	4013      	ands	r3, r2
 800502a:	d014      	beq.n	8005056 <pvPortMalloc+0x66>
                {
                    /* Byte alignment required. */
                    xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2207      	movs	r2, #7
 8005030:	4013      	ands	r3, r2
 8005032:	2208      	movs	r2, #8
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	613b      	str	r3, [r7, #16]

                    if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	43db      	mvns	r3, r3
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d804      	bhi.n	800504c <pvPortMalloc+0x5c>
                    {
                        xWantedSize += xAdditionalRequiredSize;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	18d3      	adds	r3, r2, r3
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	e004      	b.n	8005056 <pvPortMalloc+0x66>
                    }
                    else
                    {
                        xWantedSize = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	e001      	b.n	8005056 <pvPortMalloc+0x66>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	db69      	blt.n	8005130 <pvPortMalloc+0x140>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d066      	beq.n	8005130 <pvPortMalloc+0x140>
 8005062:	4b3b      	ldr	r3, [pc, #236]	@ (8005150 <pvPortMalloc+0x160>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	429a      	cmp	r2, r3
 800506a:	d861      	bhi.n	8005130 <pvPortMalloc+0x140>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800506c:	4b39      	ldr	r3, [pc, #228]	@ (8005154 <pvPortMalloc+0x164>)
 800506e:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8005070:	4b38      	ldr	r3, [pc, #224]	@ (8005154 <pvPortMalloc+0x164>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005076:	e004      	b.n	8005082 <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d903      	bls.n	8005094 <pvPortMalloc+0xa4>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f1      	bne.n	8005078 <pvPortMalloc+0x88>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005094:	4b2d      	ldr	r3, [pc, #180]	@ (800514c <pvPortMalloc+0x15c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69fa      	ldr	r2, [r7, #28]
 800509a:	429a      	cmp	r2, r3
 800509c:	d048      	beq.n	8005130 <pvPortMalloc+0x140>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2208      	movs	r2, #8
 80050a4:	189b      	adds	r3, r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	2308      	movs	r3, #8
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	429a      	cmp	r2, r3
 80050be:	d917      	bls.n	80050f0 <pvPortMalloc+0x100>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	18d3      	adds	r3, r2, r3
 80050c6:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2207      	movs	r2, #7
 80050cc:	4013      	ands	r3, r2
 80050ce:	d002      	beq.n	80050d6 <pvPortMalloc+0xe6>
 80050d0:	b672      	cpsid	i
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	e7fd      	b.n	80050d2 <pvPortMalloc+0xe2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1ad2      	subs	r2, r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f8e0 	bl	80052b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050f0:	4b17      	ldr	r3, [pc, #92]	@ (8005150 <pvPortMalloc+0x160>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <pvPortMalloc+0x160>)
 80050fc:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050fe:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <pvPortMalloc+0x160>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <pvPortMalloc+0x168>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d203      	bcs.n	8005112 <pvPortMalloc+0x122>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800510a:	4b11      	ldr	r3, [pc, #68]	@ (8005150 <pvPortMalloc+0x160>)
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <pvPortMalloc+0x168>)
 8005110:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2280      	movs	r2, #128	@ 0x80
 8005118:	0612      	lsls	r2, r2, #24
 800511a:	431a      	orrs	r2, r3
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <pvPortMalloc+0x16c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	4b0b      	ldr	r3, [pc, #44]	@ (800515c <pvPortMalloc+0x16c>)
 800512e:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005130:	f7fe fdac 	bl	8003c8c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2207      	movs	r2, #7
 8005138:	4013      	ands	r3, r2
 800513a:	d002      	beq.n	8005142 <pvPortMalloc+0x152>
 800513c:	b672      	cpsid	i
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	e7fd      	b.n	800513e <pvPortMalloc+0x14e>
    return pvReturn;
 8005142:	697b      	ldr	r3, [r7, #20]
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b008      	add	sp, #32
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20001cf4 	.word	0x20001cf4
 8005150:	20001cf8 	.word	0x20001cf8
 8005154:	20001cec 	.word	0x20001cec
 8005158:	20001cfc 	.word	0x20001cfc
 800515c:	20001d00 	.word	0x20001d00

08005160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03b      	beq.n	80051ea <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005172:	2308      	movs	r3, #8
 8005174:	425b      	negs	r3, r3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	18d3      	adds	r3, r2, r3
 800517a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	db02      	blt.n	800518e <vPortFree+0x2e>
 8005188:	b672      	cpsid	i
 800518a:	46c0      	nop			@ (mov r8, r8)
 800518c:	e7fd      	b.n	800518a <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <vPortFree+0x3c>
 8005196:	b672      	cpsid	i
 8005198:	46c0      	nop			@ (mov r8, r8)
 800519a:	e7fd      	b.n	8005198 <vPortFree+0x38>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	0fdb      	lsrs	r3, r3, #31
 80051a2:	1c1a      	adds	r2, r3, #0
 80051a4:	2301      	movs	r3, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01d      	beq.n	80051ea <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d119      	bne.n	80051ea <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	085a      	lsrs	r2, r3, #1
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80051c2:	f7fe fd57 	bl	8003c74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <vPortFree+0x94>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	18d2      	adds	r2, r2, r3
 80051d0:	4b08      	ldr	r3, [pc, #32]	@ (80051f4 <vPortFree+0x94>)
 80051d2:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	0018      	movs	r0, r3
 80051d8:	f000 f86a 	bl	80052b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <vPortFree+0x98>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <vPortFree+0x98>)
 80051e4:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 80051e6:	f7fe fd51 	bl	8003c8c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b004      	add	sp, #16
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	20001cf8 	.word	0x20001cf8
 80051f8:	20001d04 	.word	0x20001d04

080051fc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	015b      	lsls	r3, r3, #5
 8005206:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005208:	4b24      	ldr	r3, [pc, #144]	@ (800529c <prvHeapInit+0xa0>)
 800520a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2207      	movs	r2, #7
 8005210:	4013      	ands	r3, r2
 8005212:	d00c      	beq.n	800522e <prvHeapInit+0x32>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3307      	adds	r3, #7
 8005218:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2207      	movs	r2, #7
 800521e:	4393      	bics	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	4b1c      	ldr	r3, [pc, #112]	@ (800529c <prvHeapInit+0xa0>)
 800522a:	18d3      	adds	r3, r2, r3
 800522c:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005232:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <prvHeapInit+0xa4>)
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005238:	4b19      	ldr	r3, [pc, #100]	@ (80052a0 <prvHeapInit+0xa4>)
 800523a:	2200      	movs	r2, #0
 800523c:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ( pucAlignedHeap + xTotalHeapSize );
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005246:	2208      	movs	r2, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2207      	movs	r2, #7
 8005252:	4393      	bics	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4b12      	ldr	r3, [pc, #72]	@ (80052a4 <prvHeapInit+0xa8>)
 800525a:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 800525c:	4b11      	ldr	r3, [pc, #68]	@ (80052a4 <prvHeapInit+0xa8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005264:	4b0f      	ldr	r3, [pc, #60]	@ (80052a4 <prvHeapInit+0xa8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800527a:	4b0a      	ldr	r3, [pc, #40]	@ (80052a4 <prvHeapInit+0xa8>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4b08      	ldr	r3, [pc, #32]	@ (80052a8 <prvHeapInit+0xac>)
 8005288:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <prvHeapInit+0xb0>)
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	46c0      	nop			@ (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b004      	add	sp, #16
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	20000cec 	.word	0x20000cec
 80052a0:	20001cec 	.word	0x20001cec
 80052a4:	20001cf4 	.word	0x20001cf4
 80052a8:	20001cfc 	.word	0x20001cfc
 80052ac:	20001cf8 	.word	0x20001cf8

080052b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052b8:	4b27      	ldr	r3, [pc, #156]	@ (8005358 <prvInsertBlockIntoFreeList+0xa8>)
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	e002      	b.n	80052c4 <prvInsertBlockIntoFreeList+0x14>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d8f7      	bhi.n	80052be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d108      	bne.n	80052f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	18d2      	adds	r2, r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	18d2      	adds	r2, r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d118      	bne.n	8005338 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b14      	ldr	r3, [pc, #80]	@ (800535c <prvInsertBlockIntoFreeList+0xac>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d00d      	beq.n	800532e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	18d2      	adds	r2, r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e008      	b.n	8005340 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800532e:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <prvInsertBlockIntoFreeList+0xac>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e003      	b.n	8005340 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d002      	beq.n	800534e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	46bd      	mov	sp, r7
 8005352:	b004      	add	sp, #16
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			@ (mov r8, r8)
 8005358:	20001cec 	.word	0x20001cec
 800535c:	20001cf4 	.word	0x20001cf4

08005360 <siprintf>:
 8005360:	b40e      	push	{r1, r2, r3}
 8005362:	b500      	push	{lr}
 8005364:	490b      	ldr	r1, [pc, #44]	@ (8005394 <siprintf+0x34>)
 8005366:	b09c      	sub	sp, #112	@ 0x70
 8005368:	ab1d      	add	r3, sp, #116	@ 0x74
 800536a:	9002      	str	r0, [sp, #8]
 800536c:	9006      	str	r0, [sp, #24]
 800536e:	9107      	str	r1, [sp, #28]
 8005370:	9104      	str	r1, [sp, #16]
 8005372:	4809      	ldr	r0, [pc, #36]	@ (8005398 <siprintf+0x38>)
 8005374:	4909      	ldr	r1, [pc, #36]	@ (800539c <siprintf+0x3c>)
 8005376:	cb04      	ldmia	r3!, {r2}
 8005378:	9105      	str	r1, [sp, #20]
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	a902      	add	r1, sp, #8
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	f000 fa32 	bl	80057e8 <_svfiprintf_r>
 8005384:	2200      	movs	r2, #0
 8005386:	9b02      	ldr	r3, [sp, #8]
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	b01c      	add	sp, #112	@ 0x70
 800538c:	bc08      	pop	{r3}
 800538e:	b003      	add	sp, #12
 8005390:	4718      	bx	r3
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	7fffffff 	.word	0x7fffffff
 8005398:	20000010 	.word	0x20000010
 800539c:	ffff0208 	.word	0xffff0208

080053a0 <siscanf>:
 80053a0:	b40e      	push	{r1, r2, r3}
 80053a2:	b530      	push	{r4, r5, lr}
 80053a4:	2381      	movs	r3, #129	@ 0x81
 80053a6:	b09c      	sub	sp, #112	@ 0x70
 80053a8:	466a      	mov	r2, sp
 80053aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	cc20      	ldmia	r4!, {r5}
 80053b0:	8293      	strh	r3, [r2, #20]
 80053b2:	9002      	str	r0, [sp, #8]
 80053b4:	9006      	str	r0, [sp, #24]
 80053b6:	f7fa fea7 	bl	8000108 <strlen>
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <siscanf+0x48>)
 80053bc:	466a      	mov	r2, sp
 80053be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053c0:	2300      	movs	r3, #0
 80053c2:	9003      	str	r0, [sp, #12]
 80053c4:	9007      	str	r0, [sp, #28]
 80053c6:	4809      	ldr	r0, [pc, #36]	@ (80053ec <siscanf+0x4c>)
 80053c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80053ca:	9314      	str	r3, [sp, #80]	@ 0x50
 80053cc:	3b01      	subs	r3, #1
 80053ce:	82d3      	strh	r3, [r2, #22]
 80053d0:	a902      	add	r1, sp, #8
 80053d2:	0023      	movs	r3, r4
 80053d4:	002a      	movs	r2, r5
 80053d6:	6800      	ldr	r0, [r0, #0]
 80053d8:	9401      	str	r4, [sp, #4]
 80053da:	f000 fb5f 	bl	8005a9c <__ssvfiscanf_r>
 80053de:	b01c      	add	sp, #112	@ 0x70
 80053e0:	bc30      	pop	{r4, r5}
 80053e2:	bc08      	pop	{r3}
 80053e4:	b003      	add	sp, #12
 80053e6:	4718      	bx	r3
 80053e8:	080053f1 	.word	0x080053f1
 80053ec:	20000010 	.word	0x20000010

080053f0 <__seofread>:
 80053f0:	2000      	movs	r0, #0
 80053f2:	4770      	bx	lr

080053f4 <memset>:
 80053f4:	0003      	movs	r3, r0
 80053f6:	1882      	adds	r2, r0, r2
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d100      	bne.n	80053fe <memset+0xa>
 80053fc:	4770      	bx	lr
 80053fe:	7019      	strb	r1, [r3, #0]
 8005400:	3301      	adds	r3, #1
 8005402:	e7f9      	b.n	80053f8 <memset+0x4>

08005404 <_reclaim_reent>:
 8005404:	4b2e      	ldr	r3, [pc, #184]	@ (80054c0 <_reclaim_reent+0xbc>)
 8005406:	b570      	push	{r4, r5, r6, lr}
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	0004      	movs	r4, r0
 800540c:	4283      	cmp	r3, r0
 800540e:	d04f      	beq.n	80054b0 <_reclaim_reent+0xac>
 8005410:	69c3      	ldr	r3, [r0, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d017      	beq.n	8005446 <_reclaim_reent+0x42>
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00d      	beq.n	8005438 <_reclaim_reent+0x34>
 800541c:	2500      	movs	r5, #0
 800541e:	69e3      	ldr	r3, [r4, #28]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	5959      	ldr	r1, [r3, r5]
 8005424:	2900      	cmp	r1, #0
 8005426:	d144      	bne.n	80054b2 <_reclaim_reent+0xae>
 8005428:	3504      	adds	r5, #4
 800542a:	2d80      	cmp	r5, #128	@ 0x80
 800542c:	d1f7      	bne.n	800541e <_reclaim_reent+0x1a>
 800542e:	69e3      	ldr	r3, [r4, #28]
 8005430:	0020      	movs	r0, r4
 8005432:	68d9      	ldr	r1, [r3, #12]
 8005434:	f000 f87c 	bl	8005530 <_free_r>
 8005438:	69e3      	ldr	r3, [r4, #28]
 800543a:	6819      	ldr	r1, [r3, #0]
 800543c:	2900      	cmp	r1, #0
 800543e:	d002      	beq.n	8005446 <_reclaim_reent+0x42>
 8005440:	0020      	movs	r0, r4
 8005442:	f000 f875 	bl	8005530 <_free_r>
 8005446:	6961      	ldr	r1, [r4, #20]
 8005448:	2900      	cmp	r1, #0
 800544a:	d002      	beq.n	8005452 <_reclaim_reent+0x4e>
 800544c:	0020      	movs	r0, r4
 800544e:	f000 f86f 	bl	8005530 <_free_r>
 8005452:	69e1      	ldr	r1, [r4, #28]
 8005454:	2900      	cmp	r1, #0
 8005456:	d002      	beq.n	800545e <_reclaim_reent+0x5a>
 8005458:	0020      	movs	r0, r4
 800545a:	f000 f869 	bl	8005530 <_free_r>
 800545e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005460:	2900      	cmp	r1, #0
 8005462:	d002      	beq.n	800546a <_reclaim_reent+0x66>
 8005464:	0020      	movs	r0, r4
 8005466:	f000 f863 	bl	8005530 <_free_r>
 800546a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800546c:	2900      	cmp	r1, #0
 800546e:	d002      	beq.n	8005476 <_reclaim_reent+0x72>
 8005470:	0020      	movs	r0, r4
 8005472:	f000 f85d 	bl	8005530 <_free_r>
 8005476:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005478:	2900      	cmp	r1, #0
 800547a:	d002      	beq.n	8005482 <_reclaim_reent+0x7e>
 800547c:	0020      	movs	r0, r4
 800547e:	f000 f857 	bl	8005530 <_free_r>
 8005482:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005484:	2900      	cmp	r1, #0
 8005486:	d002      	beq.n	800548e <_reclaim_reent+0x8a>
 8005488:	0020      	movs	r0, r4
 800548a:	f000 f851 	bl	8005530 <_free_r>
 800548e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005490:	2900      	cmp	r1, #0
 8005492:	d002      	beq.n	800549a <_reclaim_reent+0x96>
 8005494:	0020      	movs	r0, r4
 8005496:	f000 f84b 	bl	8005530 <_free_r>
 800549a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800549c:	2900      	cmp	r1, #0
 800549e:	d002      	beq.n	80054a6 <_reclaim_reent+0xa2>
 80054a0:	0020      	movs	r0, r4
 80054a2:	f000 f845 	bl	8005530 <_free_r>
 80054a6:	6a23      	ldr	r3, [r4, #32]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <_reclaim_reent+0xac>
 80054ac:	0020      	movs	r0, r4
 80054ae:	4798      	blx	r3
 80054b0:	bd70      	pop	{r4, r5, r6, pc}
 80054b2:	680e      	ldr	r6, [r1, #0]
 80054b4:	0020      	movs	r0, r4
 80054b6:	f000 f83b 	bl	8005530 <_free_r>
 80054ba:	0031      	movs	r1, r6
 80054bc:	e7b2      	b.n	8005424 <_reclaim_reent+0x20>
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	20000010 	.word	0x20000010

080054c4 <__errno>:
 80054c4:	4b01      	ldr	r3, [pc, #4]	@ (80054cc <__errno+0x8>)
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	4770      	bx	lr
 80054ca:	46c0      	nop			@ (mov r8, r8)
 80054cc:	20000010 	.word	0x20000010

080054d0 <__libc_init_array>:
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	2600      	movs	r6, #0
 80054d4:	4c0c      	ldr	r4, [pc, #48]	@ (8005508 <__libc_init_array+0x38>)
 80054d6:	4d0d      	ldr	r5, [pc, #52]	@ (800550c <__libc_init_array+0x3c>)
 80054d8:	1b64      	subs	r4, r4, r5
 80054da:	10a4      	asrs	r4, r4, #2
 80054dc:	42a6      	cmp	r6, r4
 80054de:	d109      	bne.n	80054f4 <__libc_init_array+0x24>
 80054e0:	2600      	movs	r6, #0
 80054e2:	f001 f90f 	bl	8006704 <_init>
 80054e6:	4c0a      	ldr	r4, [pc, #40]	@ (8005510 <__libc_init_array+0x40>)
 80054e8:	4d0a      	ldr	r5, [pc, #40]	@ (8005514 <__libc_init_array+0x44>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	42a6      	cmp	r6, r4
 80054f0:	d105      	bne.n	80054fe <__libc_init_array+0x2e>
 80054f2:	bd70      	pop	{r4, r5, r6, pc}
 80054f4:	00b3      	lsls	r3, r6, #2
 80054f6:	58eb      	ldr	r3, [r5, r3]
 80054f8:	4798      	blx	r3
 80054fa:	3601      	adds	r6, #1
 80054fc:	e7ee      	b.n	80054dc <__libc_init_array+0xc>
 80054fe:	00b3      	lsls	r3, r6, #2
 8005500:	58eb      	ldr	r3, [r5, r3]
 8005502:	4798      	blx	r3
 8005504:	3601      	adds	r6, #1
 8005506:	e7f2      	b.n	80054ee <__libc_init_array+0x1e>
 8005508:	080069cc 	.word	0x080069cc
 800550c:	080069cc 	.word	0x080069cc
 8005510:	080069d0 	.word	0x080069d0
 8005514:	080069cc 	.word	0x080069cc

08005518 <__retarget_lock_acquire_recursive>:
 8005518:	4770      	bx	lr

0800551a <__retarget_lock_release_recursive>:
 800551a:	4770      	bx	lr

0800551c <memcpy>:
 800551c:	2300      	movs	r3, #0
 800551e:	b510      	push	{r4, lr}
 8005520:	429a      	cmp	r2, r3
 8005522:	d100      	bne.n	8005526 <memcpy+0xa>
 8005524:	bd10      	pop	{r4, pc}
 8005526:	5ccc      	ldrb	r4, [r1, r3]
 8005528:	54c4      	strb	r4, [r0, r3]
 800552a:	3301      	adds	r3, #1
 800552c:	e7f8      	b.n	8005520 <memcpy+0x4>
	...

08005530 <_free_r>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	0005      	movs	r5, r0
 8005534:	1e0c      	subs	r4, r1, #0
 8005536:	d010      	beq.n	800555a <_free_r+0x2a>
 8005538:	3c04      	subs	r4, #4
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da00      	bge.n	8005542 <_free_r+0x12>
 8005540:	18e4      	adds	r4, r4, r3
 8005542:	0028      	movs	r0, r5
 8005544:	f000 f8e0 	bl	8005708 <__malloc_lock>
 8005548:	4a1d      	ldr	r2, [pc, #116]	@ (80055c0 <_free_r+0x90>)
 800554a:	6813      	ldr	r3, [r2, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <_free_r+0x2c>
 8005550:	6063      	str	r3, [r4, #4]
 8005552:	6014      	str	r4, [r2, #0]
 8005554:	0028      	movs	r0, r5
 8005556:	f000 f8df 	bl	8005718 <__malloc_unlock>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	42a3      	cmp	r3, r4
 800555e:	d908      	bls.n	8005572 <_free_r+0x42>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	1821      	adds	r1, r4, r0
 8005564:	428b      	cmp	r3, r1
 8005566:	d1f3      	bne.n	8005550 <_free_r+0x20>
 8005568:	6819      	ldr	r1, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	1809      	adds	r1, r1, r0
 800556e:	6021      	str	r1, [r4, #0]
 8005570:	e7ee      	b.n	8005550 <_free_r+0x20>
 8005572:	001a      	movs	r2, r3
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <_free_r+0x4e>
 800557a:	42a3      	cmp	r3, r4
 800557c:	d9f9      	bls.n	8005572 <_free_r+0x42>
 800557e:	6811      	ldr	r1, [r2, #0]
 8005580:	1850      	adds	r0, r2, r1
 8005582:	42a0      	cmp	r0, r4
 8005584:	d10b      	bne.n	800559e <_free_r+0x6e>
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1809      	adds	r1, r1, r0
 800558a:	1850      	adds	r0, r2, r1
 800558c:	6011      	str	r1, [r2, #0]
 800558e:	4283      	cmp	r3, r0
 8005590:	d1e0      	bne.n	8005554 <_free_r+0x24>
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	1841      	adds	r1, r0, r1
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	6053      	str	r3, [r2, #4]
 800559c:	e7da      	b.n	8005554 <_free_r+0x24>
 800559e:	42a0      	cmp	r0, r4
 80055a0:	d902      	bls.n	80055a8 <_free_r+0x78>
 80055a2:	230c      	movs	r3, #12
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	e7d5      	b.n	8005554 <_free_r+0x24>
 80055a8:	6820      	ldr	r0, [r4, #0]
 80055aa:	1821      	adds	r1, r4, r0
 80055ac:	428b      	cmp	r3, r1
 80055ae:	d103      	bne.n	80055b8 <_free_r+0x88>
 80055b0:	6819      	ldr	r1, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	1809      	adds	r1, r1, r0
 80055b6:	6021      	str	r1, [r4, #0]
 80055b8:	6063      	str	r3, [r4, #4]
 80055ba:	6054      	str	r4, [r2, #4]
 80055bc:	e7ca      	b.n	8005554 <_free_r+0x24>
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	20001e4c 	.word	0x20001e4c

080055c4 <sbrk_aligned>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4e0f      	ldr	r6, [pc, #60]	@ (8005604 <sbrk_aligned+0x40>)
 80055c8:	000d      	movs	r5, r1
 80055ca:	6831      	ldr	r1, [r6, #0]
 80055cc:	0004      	movs	r4, r0
 80055ce:	2900      	cmp	r1, #0
 80055d0:	d102      	bne.n	80055d8 <sbrk_aligned+0x14>
 80055d2:	f000 ff2f 	bl	8006434 <_sbrk_r>
 80055d6:	6030      	str	r0, [r6, #0]
 80055d8:	0029      	movs	r1, r5
 80055da:	0020      	movs	r0, r4
 80055dc:	f000 ff2a 	bl	8006434 <_sbrk_r>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d103      	bne.n	80055ec <sbrk_aligned+0x28>
 80055e4:	2501      	movs	r5, #1
 80055e6:	426d      	negs	r5, r5
 80055e8:	0028      	movs	r0, r5
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	2303      	movs	r3, #3
 80055ee:	1cc5      	adds	r5, r0, #3
 80055f0:	439d      	bics	r5, r3
 80055f2:	42a8      	cmp	r0, r5
 80055f4:	d0f8      	beq.n	80055e8 <sbrk_aligned+0x24>
 80055f6:	1a29      	subs	r1, r5, r0
 80055f8:	0020      	movs	r0, r4
 80055fa:	f000 ff1b 	bl	8006434 <_sbrk_r>
 80055fe:	3001      	adds	r0, #1
 8005600:	d1f2      	bne.n	80055e8 <sbrk_aligned+0x24>
 8005602:	e7ef      	b.n	80055e4 <sbrk_aligned+0x20>
 8005604:	20001e48 	.word	0x20001e48

08005608 <_malloc_r>:
 8005608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800560a:	2203      	movs	r2, #3
 800560c:	1ccb      	adds	r3, r1, #3
 800560e:	4393      	bics	r3, r2
 8005610:	3308      	adds	r3, #8
 8005612:	0005      	movs	r5, r0
 8005614:	001f      	movs	r7, r3
 8005616:	2b0c      	cmp	r3, #12
 8005618:	d234      	bcs.n	8005684 <_malloc_r+0x7c>
 800561a:	270c      	movs	r7, #12
 800561c:	42b9      	cmp	r1, r7
 800561e:	d833      	bhi.n	8005688 <_malloc_r+0x80>
 8005620:	0028      	movs	r0, r5
 8005622:	f000 f871 	bl	8005708 <__malloc_lock>
 8005626:	4e37      	ldr	r6, [pc, #220]	@ (8005704 <_malloc_r+0xfc>)
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	001c      	movs	r4, r3
 800562c:	2c00      	cmp	r4, #0
 800562e:	d12f      	bne.n	8005690 <_malloc_r+0x88>
 8005630:	0039      	movs	r1, r7
 8005632:	0028      	movs	r0, r5
 8005634:	f7ff ffc6 	bl	80055c4 <sbrk_aligned>
 8005638:	0004      	movs	r4, r0
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	d15f      	bne.n	80056fe <_malloc_r+0xf6>
 800563e:	6834      	ldr	r4, [r6, #0]
 8005640:	9400      	str	r4, [sp, #0]
 8005642:	9b00      	ldr	r3, [sp, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d14a      	bne.n	80056de <_malloc_r+0xd6>
 8005648:	2c00      	cmp	r4, #0
 800564a:	d052      	beq.n	80056f2 <_malloc_r+0xea>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	0028      	movs	r0, r5
 8005650:	18e3      	adds	r3, r4, r3
 8005652:	9900      	ldr	r1, [sp, #0]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	f000 feed 	bl	8006434 <_sbrk_r>
 800565a:	9b01      	ldr	r3, [sp, #4]
 800565c:	4283      	cmp	r3, r0
 800565e:	d148      	bne.n	80056f2 <_malloc_r+0xea>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	0028      	movs	r0, r5
 8005664:	1aff      	subs	r7, r7, r3
 8005666:	0039      	movs	r1, r7
 8005668:	f7ff ffac 	bl	80055c4 <sbrk_aligned>
 800566c:	3001      	adds	r0, #1
 800566e:	d040      	beq.n	80056f2 <_malloc_r+0xea>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	19db      	adds	r3, r3, r7
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	6833      	ldr	r3, [r6, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	2a00      	cmp	r2, #0
 800567c:	d133      	bne.n	80056e6 <_malloc_r+0xde>
 800567e:	9b00      	ldr	r3, [sp, #0]
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	e019      	b.n	80056b8 <_malloc_r+0xb0>
 8005684:	2b00      	cmp	r3, #0
 8005686:	dac9      	bge.n	800561c <_malloc_r+0x14>
 8005688:	230c      	movs	r3, #12
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	2000      	movs	r0, #0
 800568e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005690:	6821      	ldr	r1, [r4, #0]
 8005692:	1bc9      	subs	r1, r1, r7
 8005694:	d420      	bmi.n	80056d8 <_malloc_r+0xd0>
 8005696:	290b      	cmp	r1, #11
 8005698:	d90a      	bls.n	80056b0 <_malloc_r+0xa8>
 800569a:	19e2      	adds	r2, r4, r7
 800569c:	6027      	str	r7, [r4, #0]
 800569e:	42a3      	cmp	r3, r4
 80056a0:	d104      	bne.n	80056ac <_malloc_r+0xa4>
 80056a2:	6032      	str	r2, [r6, #0]
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	6011      	str	r1, [r2, #0]
 80056a8:	6053      	str	r3, [r2, #4]
 80056aa:	e005      	b.n	80056b8 <_malloc_r+0xb0>
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e7f9      	b.n	80056a4 <_malloc_r+0x9c>
 80056b0:	6862      	ldr	r2, [r4, #4]
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	d10e      	bne.n	80056d4 <_malloc_r+0xcc>
 80056b6:	6032      	str	r2, [r6, #0]
 80056b8:	0028      	movs	r0, r5
 80056ba:	f000 f82d 	bl	8005718 <__malloc_unlock>
 80056be:	0020      	movs	r0, r4
 80056c0:	2207      	movs	r2, #7
 80056c2:	300b      	adds	r0, #11
 80056c4:	1d23      	adds	r3, r4, #4
 80056c6:	4390      	bics	r0, r2
 80056c8:	1ac2      	subs	r2, r0, r3
 80056ca:	4298      	cmp	r0, r3
 80056cc:	d0df      	beq.n	800568e <_malloc_r+0x86>
 80056ce:	1a1b      	subs	r3, r3, r0
 80056d0:	50a3      	str	r3, [r4, r2]
 80056d2:	e7dc      	b.n	800568e <_malloc_r+0x86>
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	e7ef      	b.n	80056b8 <_malloc_r+0xb0>
 80056d8:	0023      	movs	r3, r4
 80056da:	6864      	ldr	r4, [r4, #4]
 80056dc:	e7a6      	b.n	800562c <_malloc_r+0x24>
 80056de:	9c00      	ldr	r4, [sp, #0]
 80056e0:	6863      	ldr	r3, [r4, #4]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	e7ad      	b.n	8005642 <_malloc_r+0x3a>
 80056e6:	001a      	movs	r2, r3
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	d1fb      	bne.n	80056e6 <_malloc_r+0xde>
 80056ee:	2300      	movs	r3, #0
 80056f0:	e7da      	b.n	80056a8 <_malloc_r+0xa0>
 80056f2:	230c      	movs	r3, #12
 80056f4:	0028      	movs	r0, r5
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f000 f80e 	bl	8005718 <__malloc_unlock>
 80056fc:	e7c6      	b.n	800568c <_malloc_r+0x84>
 80056fe:	6007      	str	r7, [r0, #0]
 8005700:	e7da      	b.n	80056b8 <_malloc_r+0xb0>
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	20001e4c 	.word	0x20001e4c

08005708 <__malloc_lock>:
 8005708:	b510      	push	{r4, lr}
 800570a:	4802      	ldr	r0, [pc, #8]	@ (8005714 <__malloc_lock+0xc>)
 800570c:	f7ff ff04 	bl	8005518 <__retarget_lock_acquire_recursive>
 8005710:	bd10      	pop	{r4, pc}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	20001e44 	.word	0x20001e44

08005718 <__malloc_unlock>:
 8005718:	b510      	push	{r4, lr}
 800571a:	4802      	ldr	r0, [pc, #8]	@ (8005724 <__malloc_unlock+0xc>)
 800571c:	f7ff fefd 	bl	800551a <__retarget_lock_release_recursive>
 8005720:	bd10      	pop	{r4, pc}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	20001e44 	.word	0x20001e44

08005728 <__ssputs_r>:
 8005728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800572a:	688e      	ldr	r6, [r1, #8]
 800572c:	b085      	sub	sp, #20
 800572e:	001f      	movs	r7, r3
 8005730:	000c      	movs	r4, r1
 8005732:	680b      	ldr	r3, [r1, #0]
 8005734:	9002      	str	r0, [sp, #8]
 8005736:	9203      	str	r2, [sp, #12]
 8005738:	42be      	cmp	r6, r7
 800573a:	d830      	bhi.n	800579e <__ssputs_r+0x76>
 800573c:	210c      	movs	r1, #12
 800573e:	5e62      	ldrsh	r2, [r4, r1]
 8005740:	2190      	movs	r1, #144	@ 0x90
 8005742:	00c9      	lsls	r1, r1, #3
 8005744:	420a      	tst	r2, r1
 8005746:	d028      	beq.n	800579a <__ssputs_r+0x72>
 8005748:	2003      	movs	r0, #3
 800574a:	6921      	ldr	r1, [r4, #16]
 800574c:	1a5b      	subs	r3, r3, r1
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	6963      	ldr	r3, [r4, #20]
 8005752:	4343      	muls	r3, r0
 8005754:	9801      	ldr	r0, [sp, #4]
 8005756:	0fdd      	lsrs	r5, r3, #31
 8005758:	18ed      	adds	r5, r5, r3
 800575a:	1c7b      	adds	r3, r7, #1
 800575c:	181b      	adds	r3, r3, r0
 800575e:	106d      	asrs	r5, r5, #1
 8005760:	42ab      	cmp	r3, r5
 8005762:	d900      	bls.n	8005766 <__ssputs_r+0x3e>
 8005764:	001d      	movs	r5, r3
 8005766:	0552      	lsls	r2, r2, #21
 8005768:	d528      	bpl.n	80057bc <__ssputs_r+0x94>
 800576a:	0029      	movs	r1, r5
 800576c:	9802      	ldr	r0, [sp, #8]
 800576e:	f7ff ff4b 	bl	8005608 <_malloc_r>
 8005772:	1e06      	subs	r6, r0, #0
 8005774:	d02c      	beq.n	80057d0 <__ssputs_r+0xa8>
 8005776:	9a01      	ldr	r2, [sp, #4]
 8005778:	6921      	ldr	r1, [r4, #16]
 800577a:	f7ff fecf 	bl	800551c <memcpy>
 800577e:	89a2      	ldrh	r2, [r4, #12]
 8005780:	4b18      	ldr	r3, [pc, #96]	@ (80057e4 <__ssputs_r+0xbc>)
 8005782:	401a      	ands	r2, r3
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	4313      	orrs	r3, r2
 8005788:	81a3      	strh	r3, [r4, #12]
 800578a:	9b01      	ldr	r3, [sp, #4]
 800578c:	6126      	str	r6, [r4, #16]
 800578e:	18f6      	adds	r6, r6, r3
 8005790:	6026      	str	r6, [r4, #0]
 8005792:	003e      	movs	r6, r7
 8005794:	6165      	str	r5, [r4, #20]
 8005796:	1aed      	subs	r5, r5, r3
 8005798:	60a5      	str	r5, [r4, #8]
 800579a:	42be      	cmp	r6, r7
 800579c:	d900      	bls.n	80057a0 <__ssputs_r+0x78>
 800579e:	003e      	movs	r6, r7
 80057a0:	0032      	movs	r2, r6
 80057a2:	9903      	ldr	r1, [sp, #12]
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	f000 fe31 	bl	800640c <memmove>
 80057aa:	2000      	movs	r0, #0
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	1b9b      	subs	r3, r3, r6
 80057b0:	60a3      	str	r3, [r4, #8]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	199b      	adds	r3, r3, r6
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	b005      	add	sp, #20
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057bc:	002a      	movs	r2, r5
 80057be:	9802      	ldr	r0, [sp, #8]
 80057c0:	f000 fe55 	bl	800646e <_realloc_r>
 80057c4:	1e06      	subs	r6, r0, #0
 80057c6:	d1e0      	bne.n	800578a <__ssputs_r+0x62>
 80057c8:	6921      	ldr	r1, [r4, #16]
 80057ca:	9802      	ldr	r0, [sp, #8]
 80057cc:	f7ff feb0 	bl	8005530 <_free_r>
 80057d0:	230c      	movs	r3, #12
 80057d2:	2001      	movs	r0, #1
 80057d4:	9a02      	ldr	r2, [sp, #8]
 80057d6:	4240      	negs	r0, r0
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	89a2      	ldrh	r2, [r4, #12]
 80057dc:	3334      	adds	r3, #52	@ 0x34
 80057de:	4313      	orrs	r3, r2
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	e7e9      	b.n	80057b8 <__ssputs_r+0x90>
 80057e4:	fffffb7f 	.word	0xfffffb7f

080057e8 <_svfiprintf_r>:
 80057e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ea:	b0a1      	sub	sp, #132	@ 0x84
 80057ec:	9003      	str	r0, [sp, #12]
 80057ee:	001d      	movs	r5, r3
 80057f0:	898b      	ldrh	r3, [r1, #12]
 80057f2:	000f      	movs	r7, r1
 80057f4:	0016      	movs	r6, r2
 80057f6:	061b      	lsls	r3, r3, #24
 80057f8:	d511      	bpl.n	800581e <_svfiprintf_r+0x36>
 80057fa:	690b      	ldr	r3, [r1, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10e      	bne.n	800581e <_svfiprintf_r+0x36>
 8005800:	2140      	movs	r1, #64	@ 0x40
 8005802:	f7ff ff01 	bl	8005608 <_malloc_r>
 8005806:	6038      	str	r0, [r7, #0]
 8005808:	6138      	str	r0, [r7, #16]
 800580a:	2800      	cmp	r0, #0
 800580c:	d105      	bne.n	800581a <_svfiprintf_r+0x32>
 800580e:	230c      	movs	r3, #12
 8005810:	9a03      	ldr	r2, [sp, #12]
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	2001      	movs	r0, #1
 8005816:	4240      	negs	r0, r0
 8005818:	e0cf      	b.n	80059ba <_svfiprintf_r+0x1d2>
 800581a:	2340      	movs	r3, #64	@ 0x40
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	2300      	movs	r3, #0
 8005820:	ac08      	add	r4, sp, #32
 8005822:	6163      	str	r3, [r4, #20]
 8005824:	3320      	adds	r3, #32
 8005826:	7663      	strb	r3, [r4, #25]
 8005828:	3310      	adds	r3, #16
 800582a:	76a3      	strb	r3, [r4, #26]
 800582c:	9507      	str	r5, [sp, #28]
 800582e:	0035      	movs	r5, r6
 8005830:	782b      	ldrb	r3, [r5, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <_svfiprintf_r+0x52>
 8005836:	2b25      	cmp	r3, #37	@ 0x25
 8005838:	d148      	bne.n	80058cc <_svfiprintf_r+0xe4>
 800583a:	1bab      	subs	r3, r5, r6
 800583c:	9305      	str	r3, [sp, #20]
 800583e:	42b5      	cmp	r5, r6
 8005840:	d00b      	beq.n	800585a <_svfiprintf_r+0x72>
 8005842:	0032      	movs	r2, r6
 8005844:	0039      	movs	r1, r7
 8005846:	9803      	ldr	r0, [sp, #12]
 8005848:	f7ff ff6e 	bl	8005728 <__ssputs_r>
 800584c:	3001      	adds	r0, #1
 800584e:	d100      	bne.n	8005852 <_svfiprintf_r+0x6a>
 8005850:	e0ae      	b.n	80059b0 <_svfiprintf_r+0x1c8>
 8005852:	6963      	ldr	r3, [r4, #20]
 8005854:	9a05      	ldr	r2, [sp, #20]
 8005856:	189b      	adds	r3, r3, r2
 8005858:	6163      	str	r3, [r4, #20]
 800585a:	782b      	ldrb	r3, [r5, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d100      	bne.n	8005862 <_svfiprintf_r+0x7a>
 8005860:	e0a6      	b.n	80059b0 <_svfiprintf_r+0x1c8>
 8005862:	2201      	movs	r2, #1
 8005864:	2300      	movs	r3, #0
 8005866:	4252      	negs	r2, r2
 8005868:	6062      	str	r2, [r4, #4]
 800586a:	a904      	add	r1, sp, #16
 800586c:	3254      	adds	r2, #84	@ 0x54
 800586e:	1852      	adds	r2, r2, r1
 8005870:	1c6e      	adds	r6, r5, #1
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	60e3      	str	r3, [r4, #12]
 8005876:	60a3      	str	r3, [r4, #8]
 8005878:	7013      	strb	r3, [r2, #0]
 800587a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800587c:	4b54      	ldr	r3, [pc, #336]	@ (80059d0 <_svfiprintf_r+0x1e8>)
 800587e:	2205      	movs	r2, #5
 8005880:	0018      	movs	r0, r3
 8005882:	7831      	ldrb	r1, [r6, #0]
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	f000 fde7 	bl	8006458 <memchr>
 800588a:	1c75      	adds	r5, r6, #1
 800588c:	2800      	cmp	r0, #0
 800588e:	d11f      	bne.n	80058d0 <_svfiprintf_r+0xe8>
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	06d3      	lsls	r3, r2, #27
 8005894:	d504      	bpl.n	80058a0 <_svfiprintf_r+0xb8>
 8005896:	2353      	movs	r3, #83	@ 0x53
 8005898:	a904      	add	r1, sp, #16
 800589a:	185b      	adds	r3, r3, r1
 800589c:	2120      	movs	r1, #32
 800589e:	7019      	strb	r1, [r3, #0]
 80058a0:	0713      	lsls	r3, r2, #28
 80058a2:	d504      	bpl.n	80058ae <_svfiprintf_r+0xc6>
 80058a4:	2353      	movs	r3, #83	@ 0x53
 80058a6:	a904      	add	r1, sp, #16
 80058a8:	185b      	adds	r3, r3, r1
 80058aa:	212b      	movs	r1, #43	@ 0x2b
 80058ac:	7019      	strb	r1, [r3, #0]
 80058ae:	7833      	ldrb	r3, [r6, #0]
 80058b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80058b2:	d016      	beq.n	80058e2 <_svfiprintf_r+0xfa>
 80058b4:	0035      	movs	r5, r6
 80058b6:	2100      	movs	r1, #0
 80058b8:	200a      	movs	r0, #10
 80058ba:	68e3      	ldr	r3, [r4, #12]
 80058bc:	782a      	ldrb	r2, [r5, #0]
 80058be:	1c6e      	adds	r6, r5, #1
 80058c0:	3a30      	subs	r2, #48	@ 0x30
 80058c2:	2a09      	cmp	r2, #9
 80058c4:	d950      	bls.n	8005968 <_svfiprintf_r+0x180>
 80058c6:	2900      	cmp	r1, #0
 80058c8:	d111      	bne.n	80058ee <_svfiprintf_r+0x106>
 80058ca:	e017      	b.n	80058fc <_svfiprintf_r+0x114>
 80058cc:	3501      	adds	r5, #1
 80058ce:	e7af      	b.n	8005830 <_svfiprintf_r+0x48>
 80058d0:	9b05      	ldr	r3, [sp, #20]
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	1ac0      	subs	r0, r0, r3
 80058d6:	2301      	movs	r3, #1
 80058d8:	4083      	lsls	r3, r0
 80058da:	4313      	orrs	r3, r2
 80058dc:	002e      	movs	r6, r5
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	e7cc      	b.n	800587c <_svfiprintf_r+0x94>
 80058e2:	9b07      	ldr	r3, [sp, #28]
 80058e4:	1d19      	adds	r1, r3, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	9107      	str	r1, [sp, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	db01      	blt.n	80058f2 <_svfiprintf_r+0x10a>
 80058ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058f0:	e004      	b.n	80058fc <_svfiprintf_r+0x114>
 80058f2:	425b      	negs	r3, r3
 80058f4:	60e3      	str	r3, [r4, #12]
 80058f6:	2302      	movs	r3, #2
 80058f8:	4313      	orrs	r3, r2
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	782b      	ldrb	r3, [r5, #0]
 80058fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005900:	d10c      	bne.n	800591c <_svfiprintf_r+0x134>
 8005902:	786b      	ldrb	r3, [r5, #1]
 8005904:	2b2a      	cmp	r3, #42	@ 0x2a
 8005906:	d134      	bne.n	8005972 <_svfiprintf_r+0x18a>
 8005908:	9b07      	ldr	r3, [sp, #28]
 800590a:	3502      	adds	r5, #2
 800590c:	1d1a      	adds	r2, r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	9207      	str	r2, [sp, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	da01      	bge.n	800591a <_svfiprintf_r+0x132>
 8005916:	2301      	movs	r3, #1
 8005918:	425b      	negs	r3, r3
 800591a:	9309      	str	r3, [sp, #36]	@ 0x24
 800591c:	4e2d      	ldr	r6, [pc, #180]	@ (80059d4 <_svfiprintf_r+0x1ec>)
 800591e:	2203      	movs	r2, #3
 8005920:	0030      	movs	r0, r6
 8005922:	7829      	ldrb	r1, [r5, #0]
 8005924:	f000 fd98 	bl	8006458 <memchr>
 8005928:	2800      	cmp	r0, #0
 800592a:	d006      	beq.n	800593a <_svfiprintf_r+0x152>
 800592c:	2340      	movs	r3, #64	@ 0x40
 800592e:	1b80      	subs	r0, r0, r6
 8005930:	4083      	lsls	r3, r0
 8005932:	6822      	ldr	r2, [r4, #0]
 8005934:	3501      	adds	r5, #1
 8005936:	4313      	orrs	r3, r2
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	7829      	ldrb	r1, [r5, #0]
 800593c:	2206      	movs	r2, #6
 800593e:	4826      	ldr	r0, [pc, #152]	@ (80059d8 <_svfiprintf_r+0x1f0>)
 8005940:	1c6e      	adds	r6, r5, #1
 8005942:	7621      	strb	r1, [r4, #24]
 8005944:	f000 fd88 	bl	8006458 <memchr>
 8005948:	2800      	cmp	r0, #0
 800594a:	d038      	beq.n	80059be <_svfiprintf_r+0x1d6>
 800594c:	4b23      	ldr	r3, [pc, #140]	@ (80059dc <_svfiprintf_r+0x1f4>)
 800594e:	2b00      	cmp	r3, #0
 8005950:	d122      	bne.n	8005998 <_svfiprintf_r+0x1b0>
 8005952:	2207      	movs	r2, #7
 8005954:	9b07      	ldr	r3, [sp, #28]
 8005956:	3307      	adds	r3, #7
 8005958:	4393      	bics	r3, r2
 800595a:	3308      	adds	r3, #8
 800595c:	9307      	str	r3, [sp, #28]
 800595e:	6963      	ldr	r3, [r4, #20]
 8005960:	9a04      	ldr	r2, [sp, #16]
 8005962:	189b      	adds	r3, r3, r2
 8005964:	6163      	str	r3, [r4, #20]
 8005966:	e762      	b.n	800582e <_svfiprintf_r+0x46>
 8005968:	4343      	muls	r3, r0
 800596a:	0035      	movs	r5, r6
 800596c:	2101      	movs	r1, #1
 800596e:	189b      	adds	r3, r3, r2
 8005970:	e7a4      	b.n	80058bc <_svfiprintf_r+0xd4>
 8005972:	2300      	movs	r3, #0
 8005974:	200a      	movs	r0, #10
 8005976:	0019      	movs	r1, r3
 8005978:	3501      	adds	r5, #1
 800597a:	6063      	str	r3, [r4, #4]
 800597c:	782a      	ldrb	r2, [r5, #0]
 800597e:	1c6e      	adds	r6, r5, #1
 8005980:	3a30      	subs	r2, #48	@ 0x30
 8005982:	2a09      	cmp	r2, #9
 8005984:	d903      	bls.n	800598e <_svfiprintf_r+0x1a6>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0c8      	beq.n	800591c <_svfiprintf_r+0x134>
 800598a:	9109      	str	r1, [sp, #36]	@ 0x24
 800598c:	e7c6      	b.n	800591c <_svfiprintf_r+0x134>
 800598e:	4341      	muls	r1, r0
 8005990:	0035      	movs	r5, r6
 8005992:	2301      	movs	r3, #1
 8005994:	1889      	adds	r1, r1, r2
 8005996:	e7f1      	b.n	800597c <_svfiprintf_r+0x194>
 8005998:	aa07      	add	r2, sp, #28
 800599a:	9200      	str	r2, [sp, #0]
 800599c:	0021      	movs	r1, r4
 800599e:	003a      	movs	r2, r7
 80059a0:	4b0f      	ldr	r3, [pc, #60]	@ (80059e0 <_svfiprintf_r+0x1f8>)
 80059a2:	9803      	ldr	r0, [sp, #12]
 80059a4:	e000      	b.n	80059a8 <_svfiprintf_r+0x1c0>
 80059a6:	bf00      	nop
 80059a8:	9004      	str	r0, [sp, #16]
 80059aa:	9b04      	ldr	r3, [sp, #16]
 80059ac:	3301      	adds	r3, #1
 80059ae:	d1d6      	bne.n	800595e <_svfiprintf_r+0x176>
 80059b0:	89bb      	ldrh	r3, [r7, #12]
 80059b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80059b4:	065b      	lsls	r3, r3, #25
 80059b6:	d500      	bpl.n	80059ba <_svfiprintf_r+0x1d2>
 80059b8:	e72c      	b.n	8005814 <_svfiprintf_r+0x2c>
 80059ba:	b021      	add	sp, #132	@ 0x84
 80059bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059be:	aa07      	add	r2, sp, #28
 80059c0:	9200      	str	r2, [sp, #0]
 80059c2:	0021      	movs	r1, r4
 80059c4:	003a      	movs	r2, r7
 80059c6:	4b06      	ldr	r3, [pc, #24]	@ (80059e0 <_svfiprintf_r+0x1f8>)
 80059c8:	9803      	ldr	r0, [sp, #12]
 80059ca:	f000 fa39 	bl	8005e40 <_printf_i>
 80059ce:	e7eb      	b.n	80059a8 <_svfiprintf_r+0x1c0>
 80059d0:	0800687c 	.word	0x0800687c
 80059d4:	08006882 	.word	0x08006882
 80059d8:	08006886 	.word	0x08006886
 80059dc:	00000000 	.word	0x00000000
 80059e0:	08005729 	.word	0x08005729

080059e4 <_sungetc_r>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	0014      	movs	r4, r2
 80059e8:	1c4b      	adds	r3, r1, #1
 80059ea:	d103      	bne.n	80059f4 <_sungetc_r+0x10>
 80059ec:	2501      	movs	r5, #1
 80059ee:	426d      	negs	r5, r5
 80059f0:	0028      	movs	r0, r5
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	8993      	ldrh	r3, [r2, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	4393      	bics	r3, r2
 80059fa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80059fc:	81a3      	strh	r3, [r4, #12]
 80059fe:	b2ce      	uxtb	r6, r1
 8005a00:	6863      	ldr	r3, [r4, #4]
 8005a02:	b2cd      	uxtb	r5, r1
 8005a04:	2a00      	cmp	r2, #0
 8005a06:	d010      	beq.n	8005a2a <_sungetc_r+0x46>
 8005a08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	dd07      	ble.n	8005a1e <_sungetc_r+0x3a>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	701e      	strb	r6, [r3, #0]
 8005a16:	6863      	ldr	r3, [r4, #4]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	6063      	str	r3, [r4, #4]
 8005a1c:	e7e8      	b.n	80059f0 <_sungetc_r+0xc>
 8005a1e:	0021      	movs	r1, r4
 8005a20:	f000 fcb6 	bl	8006390 <__submore>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0f2      	beq.n	8005a0e <_sungetc_r+0x2a>
 8005a28:	e7e0      	b.n	80059ec <_sungetc_r+0x8>
 8005a2a:	6921      	ldr	r1, [r4, #16]
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d007      	beq.n	8005a42 <_sungetc_r+0x5e>
 8005a32:	4291      	cmp	r1, r2
 8005a34:	d205      	bcs.n	8005a42 <_sungetc_r+0x5e>
 8005a36:	1e51      	subs	r1, r2, #1
 8005a38:	7808      	ldrb	r0, [r1, #0]
 8005a3a:	42a8      	cmp	r0, r5
 8005a3c:	d101      	bne.n	8005a42 <_sungetc_r+0x5e>
 8005a3e:	6021      	str	r1, [r4, #0]
 8005a40:	e7ea      	b.n	8005a18 <_sungetc_r+0x34>
 8005a42:	6423      	str	r3, [r4, #64]	@ 0x40
 8005a44:	0023      	movs	r3, r4
 8005a46:	3344      	adds	r3, #68	@ 0x44
 8005a48:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005a4e:	0023      	movs	r3, r4
 8005a50:	3346      	adds	r3, #70	@ 0x46
 8005a52:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8005a54:	701e      	strb	r6, [r3, #0]
 8005a56:	6023      	str	r3, [r4, #0]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e7de      	b.n	8005a1a <_sungetc_r+0x36>

08005a5c <__ssrefill_r>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	000c      	movs	r4, r1
 8005a60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005a62:	2900      	cmp	r1, #0
 8005a64:	d00e      	beq.n	8005a84 <__ssrefill_r+0x28>
 8005a66:	0023      	movs	r3, r4
 8005a68:	3344      	adds	r3, #68	@ 0x44
 8005a6a:	4299      	cmp	r1, r3
 8005a6c:	d001      	beq.n	8005a72 <__ssrefill_r+0x16>
 8005a6e:	f7ff fd5f 	bl	8005530 <_free_r>
 8005a72:	2000      	movs	r0, #0
 8005a74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a76:	6360      	str	r0, [r4, #52]	@ 0x34
 8005a78:	6063      	str	r3, [r4, #4]
 8005a7a:	4283      	cmp	r3, r0
 8005a7c:	d002      	beq.n	8005a84 <__ssrefill_r+0x28>
 8005a7e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	bd10      	pop	{r4, pc}
 8005a84:	6923      	ldr	r3, [r4, #16]
 8005a86:	2001      	movs	r0, #1
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	89a2      	ldrh	r2, [r4, #12]
 8005a8e:	6063      	str	r3, [r4, #4]
 8005a90:	3320      	adds	r3, #32
 8005a92:	4313      	orrs	r3, r2
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	4240      	negs	r0, r0
 8005a98:	e7f3      	b.n	8005a82 <__ssrefill_r+0x26>
	...

08005a9c <__ssvfiscanf_r>:
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	4caa      	ldr	r4, [pc, #680]	@ (8005d48 <__ssvfiscanf_r+0x2ac>)
 8005aa0:	44a5      	add	sp, r4
 8005aa2:	000c      	movs	r4, r1
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	9001      	str	r0, [sp, #4]
 8005aa8:	20be      	movs	r0, #190	@ 0xbe
 8005aaa:	9146      	str	r1, [sp, #280]	@ 0x118
 8005aac:	9147      	str	r1, [sp, #284]	@ 0x11c
 8005aae:	a903      	add	r1, sp, #12
 8005ab0:	9148      	str	r1, [sp, #288]	@ 0x120
 8005ab2:	49a6      	ldr	r1, [pc, #664]	@ (8005d4c <__ssvfiscanf_r+0x2b0>)
 8005ab4:	0040      	lsls	r0, r0, #1
 8005ab6:	ad43      	add	r5, sp, #268	@ 0x10c
 8005ab8:	5029      	str	r1, [r5, r0]
 8005aba:	49a5      	ldr	r1, [pc, #660]	@ (8005d50 <__ssvfiscanf_r+0x2b4>)
 8005abc:	3004      	adds	r0, #4
 8005abe:	ad43      	add	r5, sp, #268	@ 0x10c
 8005ac0:	5029      	str	r1, [r5, r0]
 8005ac2:	9302      	str	r3, [sp, #8]
 8005ac4:	7813      	ldrb	r3, [r2, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d100      	bne.n	8005acc <__ssvfiscanf_r+0x30>
 8005aca:	e13a      	b.n	8005d42 <__ssvfiscanf_r+0x2a6>
 8005acc:	2108      	movs	r1, #8
 8005ace:	2708      	movs	r7, #8
 8005ad0:	4ea0      	ldr	r6, [pc, #640]	@ (8005d54 <__ssvfiscanf_r+0x2b8>)
 8005ad2:	1c55      	adds	r5, r2, #1
 8005ad4:	5cf0      	ldrb	r0, [r6, r3]
 8005ad6:	4001      	ands	r1, r0
 8005ad8:	4238      	tst	r0, r7
 8005ada:	d01c      	beq.n	8005b16 <__ssvfiscanf_r+0x7a>
 8005adc:	6863      	ldr	r3, [r4, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	dd0f      	ble.n	8005b02 <__ssvfiscanf_r+0x66>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	5cb2      	ldrb	r2, [r6, r2]
 8005ae8:	423a      	tst	r2, r7
 8005aea:	d101      	bne.n	8005af0 <__ssvfiscanf_r+0x54>
 8005aec:	002a      	movs	r2, r5
 8005aee:	e7e9      	b.n	8005ac4 <__ssvfiscanf_r+0x28>
 8005af0:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005af2:	3301      	adds	r3, #1
 8005af4:	3201      	adds	r2, #1
 8005af6:	9247      	str	r2, [sp, #284]	@ 0x11c
 8005af8:	6862      	ldr	r2, [r4, #4]
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	3a01      	subs	r2, #1
 8005afe:	6062      	str	r2, [r4, #4]
 8005b00:	e7ec      	b.n	8005adc <__ssvfiscanf_r+0x40>
 8005b02:	22c0      	movs	r2, #192	@ 0xc0
 8005b04:	ab43      	add	r3, sp, #268	@ 0x10c
 8005b06:	0052      	lsls	r2, r2, #1
 8005b08:	0021      	movs	r1, r4
 8005b0a:	589b      	ldr	r3, [r3, r2]
 8005b0c:	9801      	ldr	r0, [sp, #4]
 8005b0e:	4798      	blx	r3
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d0e6      	beq.n	8005ae2 <__ssvfiscanf_r+0x46>
 8005b14:	e7ea      	b.n	8005aec <__ssvfiscanf_r+0x50>
 8005b16:	001e      	movs	r6, r3
 8005b18:	2b25      	cmp	r3, #37	@ 0x25
 8005b1a:	d160      	bne.n	8005bde <__ssvfiscanf_r+0x142>
 8005b1c:	9145      	str	r1, [sp, #276]	@ 0x114
 8005b1e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005b20:	7853      	ldrb	r3, [r2, #1]
 8005b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b24:	d102      	bne.n	8005b2c <__ssvfiscanf_r+0x90>
 8005b26:	3b1a      	subs	r3, #26
 8005b28:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005b2a:	1c95      	adds	r5, r2, #2
 8005b2c:	002e      	movs	r6, r5
 8005b2e:	220a      	movs	r2, #10
 8005b30:	7831      	ldrb	r1, [r6, #0]
 8005b32:	1c75      	adds	r5, r6, #1
 8005b34:	000b      	movs	r3, r1
 8005b36:	3b30      	subs	r3, #48	@ 0x30
 8005b38:	2b09      	cmp	r3, #9
 8005b3a:	d91d      	bls.n	8005b78 <__ssvfiscanf_r+0xdc>
 8005b3c:	4f86      	ldr	r7, [pc, #536]	@ (8005d58 <__ssvfiscanf_r+0x2bc>)
 8005b3e:	2203      	movs	r2, #3
 8005b40:	0038      	movs	r0, r7
 8005b42:	f000 fc89 	bl	8006458 <memchr>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d006      	beq.n	8005b58 <__ssvfiscanf_r+0xbc>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	1bc0      	subs	r0, r0, r7
 8005b4e:	4083      	lsls	r3, r0
 8005b50:	002e      	movs	r6, r5
 8005b52:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005b54:	4313      	orrs	r3, r2
 8005b56:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005b58:	1c75      	adds	r5, r6, #1
 8005b5a:	7836      	ldrb	r6, [r6, #0]
 8005b5c:	2e78      	cmp	r6, #120	@ 0x78
 8005b5e:	d806      	bhi.n	8005b6e <__ssvfiscanf_r+0xd2>
 8005b60:	2e57      	cmp	r6, #87	@ 0x57
 8005b62:	d810      	bhi.n	8005b86 <__ssvfiscanf_r+0xea>
 8005b64:	2e25      	cmp	r6, #37	@ 0x25
 8005b66:	d03a      	beq.n	8005bde <__ssvfiscanf_r+0x142>
 8005b68:	d834      	bhi.n	8005bd4 <__ssvfiscanf_r+0x138>
 8005b6a:	2e00      	cmp	r6, #0
 8005b6c:	d055      	beq.n	8005c1a <__ssvfiscanf_r+0x17e>
 8005b6e:	2303      	movs	r3, #3
 8005b70:	9349      	str	r3, [sp, #292]	@ 0x124
 8005b72:	3307      	adds	r3, #7
 8005b74:	9344      	str	r3, [sp, #272]	@ 0x110
 8005b76:	e069      	b.n	8005c4c <__ssvfiscanf_r+0x1b0>
 8005b78:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005b7a:	002e      	movs	r6, r5
 8005b7c:	4353      	muls	r3, r2
 8005b7e:	3b30      	subs	r3, #48	@ 0x30
 8005b80:	185b      	adds	r3, r3, r1
 8005b82:	9345      	str	r3, [sp, #276]	@ 0x114
 8005b84:	e7d4      	b.n	8005b30 <__ssvfiscanf_r+0x94>
 8005b86:	0030      	movs	r0, r6
 8005b88:	3858      	subs	r0, #88	@ 0x58
 8005b8a:	2820      	cmp	r0, #32
 8005b8c:	d8ef      	bhi.n	8005b6e <__ssvfiscanf_r+0xd2>
 8005b8e:	f7fa fac3 	bl	8000118 <__gnu_thumb1_case_shi>
 8005b92:	004b      	.short	0x004b
 8005b94:	ffeeffee 	.word	0xffeeffee
 8005b98:	ffee007d 	.word	0xffee007d
 8005b9c:	ffeeffee 	.word	0xffeeffee
 8005ba0:	ffeeffee 	.word	0xffeeffee
 8005ba4:	ffeeffee 	.word	0xffeeffee
 8005ba8:	007b0088 	.word	0x007b0088
 8005bac:	00240024 	.word	0x00240024
 8005bb0:	ffee0024 	.word	0xffee0024
 8005bb4:	ffee0055 	.word	0xffee0055
 8005bb8:	ffeeffee 	.word	0xffeeffee
 8005bbc:	0090ffee 	.word	0x0090ffee
 8005bc0:	00470059 	.word	0x00470059
 8005bc4:	ffeeffee 	.word	0xffeeffee
 8005bc8:	ffee008e 	.word	0xffee008e
 8005bcc:	ffee007b 	.word	0xffee007b
 8005bd0:	004bffee 	.word	0x004bffee
 8005bd4:	3e45      	subs	r6, #69	@ 0x45
 8005bd6:	2e02      	cmp	r6, #2
 8005bd8:	d8c9      	bhi.n	8005b6e <__ssvfiscanf_r+0xd2>
 8005bda:	2305      	movs	r3, #5
 8005bdc:	e035      	b.n	8005c4a <__ssvfiscanf_r+0x1ae>
 8005bde:	6863      	ldr	r3, [r4, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dd0d      	ble.n	8005c00 <__ssvfiscanf_r+0x164>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	42b2      	cmp	r2, r6
 8005bea:	d000      	beq.n	8005bee <__ssvfiscanf_r+0x152>
 8005bec:	e0a9      	b.n	8005d42 <__ssvfiscanf_r+0x2a6>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6862      	ldr	r2, [r4, #4]
 8005bf2:	6023      	str	r3, [r4, #0]
 8005bf4:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005bf6:	3a01      	subs	r2, #1
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	6062      	str	r2, [r4, #4]
 8005bfc:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005bfe:	e775      	b.n	8005aec <__ssvfiscanf_r+0x50>
 8005c00:	23c0      	movs	r3, #192	@ 0xc0
 8005c02:	aa43      	add	r2, sp, #268	@ 0x10c
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	0021      	movs	r1, r4
 8005c08:	58d3      	ldr	r3, [r2, r3]
 8005c0a:	9801      	ldr	r0, [sp, #4]
 8005c0c:	4798      	blx	r3
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0e8      	beq.n	8005be4 <__ssvfiscanf_r+0x148>
 8005c12:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d000      	beq.n	8005c1a <__ssvfiscanf_r+0x17e>
 8005c18:	e08b      	b.n	8005d32 <__ssvfiscanf_r+0x296>
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	4240      	negs	r0, r0
 8005c1e:	e08c      	b.n	8005d3a <__ssvfiscanf_r+0x29e>
 8005c20:	2320      	movs	r3, #32
 8005c22:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005c24:	4313      	orrs	r3, r2
 8005c26:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005c28:	2380      	movs	r3, #128	@ 0x80
 8005c2a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005c32:	2310      	movs	r3, #16
 8005c34:	9344      	str	r3, [sp, #272]	@ 0x110
 8005c36:	2e6e      	cmp	r6, #110	@ 0x6e
 8005c38:	d902      	bls.n	8005c40 <__ssvfiscanf_r+0x1a4>
 8005c3a:	e005      	b.n	8005c48 <__ssvfiscanf_r+0x1ac>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9344      	str	r3, [sp, #272]	@ 0x110
 8005c40:	2303      	movs	r3, #3
 8005c42:	e002      	b.n	8005c4a <__ssvfiscanf_r+0x1ae>
 8005c44:	2308      	movs	r3, #8
 8005c46:	9344      	str	r3, [sp, #272]	@ 0x110
 8005c48:	2304      	movs	r3, #4
 8005c4a:	9349      	str	r3, [sp, #292]	@ 0x124
 8005c4c:	6863      	ldr	r3, [r4, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	dd3e      	ble.n	8005cd0 <__ssvfiscanf_r+0x234>
 8005c52:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005c54:	065b      	lsls	r3, r3, #25
 8005c56:	d408      	bmi.n	8005c6a <__ssvfiscanf_r+0x1ce>
 8005c58:	27c0      	movs	r7, #192	@ 0xc0
 8005c5a:	2608      	movs	r6, #8
 8005c5c:	007f      	lsls	r7, r7, #1
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	493c      	ldr	r1, [pc, #240]	@ (8005d54 <__ssvfiscanf_r+0x2b8>)
 8005c62:	781a      	ldrb	r2, [r3, #0]
 8005c64:	5c8a      	ldrb	r2, [r1, r2]
 8005c66:	4232      	tst	r2, r6
 8005c68:	d13c      	bne.n	8005ce4 <__ssvfiscanf_r+0x248>
 8005c6a:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	dc4c      	bgt.n	8005d0a <__ssvfiscanf_r+0x26e>
 8005c70:	0022      	movs	r2, r4
 8005c72:	9801      	ldr	r0, [sp, #4]
 8005c74:	ab02      	add	r3, sp, #8
 8005c76:	a943      	add	r1, sp, #268	@ 0x10c
 8005c78:	f000 f9f0 	bl	800605c <_scanf_chars>
 8005c7c:	2801      	cmp	r0, #1
 8005c7e:	d060      	beq.n	8005d42 <__ssvfiscanf_r+0x2a6>
 8005c80:	2802      	cmp	r0, #2
 8005c82:	d000      	beq.n	8005c86 <__ssvfiscanf_r+0x1ea>
 8005c84:	e732      	b.n	8005aec <__ssvfiscanf_r+0x50>
 8005c86:	e7c4      	b.n	8005c12 <__ssvfiscanf_r+0x176>
 8005c88:	230a      	movs	r3, #10
 8005c8a:	e7d3      	b.n	8005c34 <__ssvfiscanf_r+0x198>
 8005c8c:	0029      	movs	r1, r5
 8005c8e:	a803      	add	r0, sp, #12
 8005c90:	f000 fb44 	bl	800631c <__sccl>
 8005c94:	2340      	movs	r3, #64	@ 0x40
 8005c96:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005c98:	0005      	movs	r5, r0
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e7d3      	b.n	8005c4a <__ssvfiscanf_r+0x1ae>
 8005ca2:	2340      	movs	r3, #64	@ 0x40
 8005ca4:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005caa:	2300      	movs	r3, #0
 8005cac:	e7cd      	b.n	8005c4a <__ssvfiscanf_r+0x1ae>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e7cb      	b.n	8005c4a <__ssvfiscanf_r+0x1ae>
 8005cb2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005cb4:	06d3      	lsls	r3, r2, #27
 8005cb6:	d500      	bpl.n	8005cba <__ssvfiscanf_r+0x21e>
 8005cb8:	e718      	b.n	8005aec <__ssvfiscanf_r+0x50>
 8005cba:	9b02      	ldr	r3, [sp, #8]
 8005cbc:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8005cbe:	1d18      	adds	r0, r3, #4
 8005cc0:	9002      	str	r0, [sp, #8]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	07d6      	lsls	r6, r2, #31
 8005cc6:	d501      	bpl.n	8005ccc <__ssvfiscanf_r+0x230>
 8005cc8:	8019      	strh	r1, [r3, #0]
 8005cca:	e70f      	b.n	8005aec <__ssvfiscanf_r+0x50>
 8005ccc:	6019      	str	r1, [r3, #0]
 8005cce:	e70d      	b.n	8005aec <__ssvfiscanf_r+0x50>
 8005cd0:	23c0      	movs	r3, #192	@ 0xc0
 8005cd2:	aa43      	add	r2, sp, #268	@ 0x10c
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	0021      	movs	r1, r4
 8005cd8:	58d3      	ldr	r3, [r2, r3]
 8005cda:	9801      	ldr	r0, [sp, #4]
 8005cdc:	4798      	blx	r3
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d0b7      	beq.n	8005c52 <__ssvfiscanf_r+0x1b6>
 8005ce2:	e796      	b.n	8005c12 <__ssvfiscanf_r+0x176>
 8005ce4:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005ce6:	3201      	adds	r2, #1
 8005ce8:	9247      	str	r2, [sp, #284]	@ 0x11c
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	3a01      	subs	r2, #1
 8005cee:	6062      	str	r2, [r4, #4]
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	dd02      	ble.n	8005cfa <__ssvfiscanf_r+0x25e>
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	e7b1      	b.n	8005c5e <__ssvfiscanf_r+0x1c2>
 8005cfa:	ab43      	add	r3, sp, #268	@ 0x10c
 8005cfc:	0021      	movs	r1, r4
 8005cfe:	59db      	ldr	r3, [r3, r7]
 8005d00:	9801      	ldr	r0, [sp, #4]
 8005d02:	4798      	blx	r3
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d0aa      	beq.n	8005c5e <__ssvfiscanf_r+0x1c2>
 8005d08:	e783      	b.n	8005c12 <__ssvfiscanf_r+0x176>
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	dc06      	bgt.n	8005d1c <__ssvfiscanf_r+0x280>
 8005d0e:	0022      	movs	r2, r4
 8005d10:	9801      	ldr	r0, [sp, #4]
 8005d12:	ab02      	add	r3, sp, #8
 8005d14:	a943      	add	r1, sp, #268	@ 0x10c
 8005d16:	f000 fa01 	bl	800611c <_scanf_i>
 8005d1a:	e7af      	b.n	8005c7c <__ssvfiscanf_r+0x1e0>
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d5c <__ssvfiscanf_r+0x2c0>)
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d100      	bne.n	8005d24 <__ssvfiscanf_r+0x288>
 8005d22:	e6e3      	b.n	8005aec <__ssvfiscanf_r+0x50>
 8005d24:	0022      	movs	r2, r4
 8005d26:	9801      	ldr	r0, [sp, #4]
 8005d28:	ab02      	add	r3, sp, #8
 8005d2a:	a943      	add	r1, sp, #268	@ 0x10c
 8005d2c:	e000      	b.n	8005d30 <__ssvfiscanf_r+0x294>
 8005d2e:	bf00      	nop
 8005d30:	e7a4      	b.n	8005c7c <__ssvfiscanf_r+0x1e0>
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	065b      	lsls	r3, r3, #25
 8005d36:	d500      	bpl.n	8005d3a <__ssvfiscanf_r+0x29e>
 8005d38:	e76f      	b.n	8005c1a <__ssvfiscanf_r+0x17e>
 8005d3a:	23a5      	movs	r3, #165	@ 0xa5
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	449d      	add	sp, r3
 8005d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d42:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005d44:	e7f9      	b.n	8005d3a <__ssvfiscanf_r+0x29e>
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	fffffd6c 	.word	0xfffffd6c
 8005d4c:	080059e5 	.word	0x080059e5
 8005d50:	08005a5d 	.word	0x08005a5d
 8005d54:	080068cb 	.word	0x080068cb
 8005d58:	08006882 	.word	0x08006882
 8005d5c:	00000000 	.word	0x00000000

08005d60 <_printf_common>:
 8005d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d62:	0016      	movs	r6, r2
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	688a      	ldr	r2, [r1, #8]
 8005d68:	690b      	ldr	r3, [r1, #16]
 8005d6a:	000c      	movs	r4, r1
 8005d6c:	9000      	str	r0, [sp, #0]
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	da00      	bge.n	8005d74 <_printf_common+0x14>
 8005d72:	0013      	movs	r3, r2
 8005d74:	0022      	movs	r2, r4
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	3243      	adds	r2, #67	@ 0x43
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	d001      	beq.n	8005d84 <_printf_common+0x24>
 8005d80:	3301      	adds	r3, #1
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	069b      	lsls	r3, r3, #26
 8005d88:	d502      	bpl.n	8005d90 <_printf_common+0x30>
 8005d8a:	6833      	ldr	r3, [r6, #0]
 8005d8c:	3302      	adds	r3, #2
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	2306      	movs	r3, #6
 8005d94:	0015      	movs	r5, r2
 8005d96:	401d      	ands	r5, r3
 8005d98:	421a      	tst	r2, r3
 8005d9a:	d027      	beq.n	8005dec <_printf_common+0x8c>
 8005d9c:	0023      	movs	r3, r4
 8005d9e:	3343      	adds	r3, #67	@ 0x43
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	1e5a      	subs	r2, r3, #1
 8005da4:	4193      	sbcs	r3, r2
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	0692      	lsls	r2, r2, #26
 8005daa:	d430      	bmi.n	8005e0e <_printf_common+0xae>
 8005dac:	0022      	movs	r2, r4
 8005dae:	9901      	ldr	r1, [sp, #4]
 8005db0:	9800      	ldr	r0, [sp, #0]
 8005db2:	9d08      	ldr	r5, [sp, #32]
 8005db4:	3243      	adds	r2, #67	@ 0x43
 8005db6:	47a8      	blx	r5
 8005db8:	3001      	adds	r0, #1
 8005dba:	d025      	beq.n	8005e08 <_printf_common+0xa8>
 8005dbc:	2206      	movs	r2, #6
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	2500      	movs	r5, #0
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d105      	bne.n	8005dd4 <_printf_common+0x74>
 8005dc8:	6833      	ldr	r3, [r6, #0]
 8005dca:	68e5      	ldr	r5, [r4, #12]
 8005dcc:	1aed      	subs	r5, r5, r3
 8005dce:	43eb      	mvns	r3, r5
 8005dd0:	17db      	asrs	r3, r3, #31
 8005dd2:	401d      	ands	r5, r3
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	6922      	ldr	r2, [r4, #16]
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	dd01      	ble.n	8005de0 <_printf_common+0x80>
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	18ed      	adds	r5, r5, r3
 8005de0:	2600      	movs	r6, #0
 8005de2:	42b5      	cmp	r5, r6
 8005de4:	d120      	bne.n	8005e28 <_printf_common+0xc8>
 8005de6:	2000      	movs	r0, #0
 8005de8:	e010      	b.n	8005e0c <_printf_common+0xac>
 8005dea:	3501      	adds	r5, #1
 8005dec:	68e3      	ldr	r3, [r4, #12]
 8005dee:	6832      	ldr	r2, [r6, #0]
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	42ab      	cmp	r3, r5
 8005df4:	ddd2      	ble.n	8005d9c <_printf_common+0x3c>
 8005df6:	0022      	movs	r2, r4
 8005df8:	2301      	movs	r3, #1
 8005dfa:	9901      	ldr	r1, [sp, #4]
 8005dfc:	9800      	ldr	r0, [sp, #0]
 8005dfe:	9f08      	ldr	r7, [sp, #32]
 8005e00:	3219      	adds	r2, #25
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	d1f0      	bne.n	8005dea <_printf_common+0x8a>
 8005e08:	2001      	movs	r0, #1
 8005e0a:	4240      	negs	r0, r0
 8005e0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e0e:	2030      	movs	r0, #48	@ 0x30
 8005e10:	18e1      	adds	r1, r4, r3
 8005e12:	3143      	adds	r1, #67	@ 0x43
 8005e14:	7008      	strb	r0, [r1, #0]
 8005e16:	0021      	movs	r1, r4
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	3145      	adds	r1, #69	@ 0x45
 8005e1c:	7809      	ldrb	r1, [r1, #0]
 8005e1e:	18a2      	adds	r2, r4, r2
 8005e20:	3243      	adds	r2, #67	@ 0x43
 8005e22:	3302      	adds	r3, #2
 8005e24:	7011      	strb	r1, [r2, #0]
 8005e26:	e7c1      	b.n	8005dac <_printf_common+0x4c>
 8005e28:	0022      	movs	r2, r4
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	9901      	ldr	r1, [sp, #4]
 8005e2e:	9800      	ldr	r0, [sp, #0]
 8005e30:	9f08      	ldr	r7, [sp, #32]
 8005e32:	321a      	adds	r2, #26
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	d0e6      	beq.n	8005e08 <_printf_common+0xa8>
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	e7d1      	b.n	8005de2 <_printf_common+0x82>
	...

08005e40 <_printf_i>:
 8005e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e42:	b08b      	sub	sp, #44	@ 0x2c
 8005e44:	9206      	str	r2, [sp, #24]
 8005e46:	000a      	movs	r2, r1
 8005e48:	3243      	adds	r2, #67	@ 0x43
 8005e4a:	9307      	str	r3, [sp, #28]
 8005e4c:	9005      	str	r0, [sp, #20]
 8005e4e:	9203      	str	r2, [sp, #12]
 8005e50:	7e0a      	ldrb	r2, [r1, #24]
 8005e52:	000c      	movs	r4, r1
 8005e54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e56:	2a78      	cmp	r2, #120	@ 0x78
 8005e58:	d809      	bhi.n	8005e6e <_printf_i+0x2e>
 8005e5a:	2a62      	cmp	r2, #98	@ 0x62
 8005e5c:	d80b      	bhi.n	8005e76 <_printf_i+0x36>
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d100      	bne.n	8005e64 <_printf_i+0x24>
 8005e62:	e0bc      	b.n	8005fde <_printf_i+0x19e>
 8005e64:	497b      	ldr	r1, [pc, #492]	@ (8006054 <_printf_i+0x214>)
 8005e66:	9104      	str	r1, [sp, #16]
 8005e68:	2a58      	cmp	r2, #88	@ 0x58
 8005e6a:	d100      	bne.n	8005e6e <_printf_i+0x2e>
 8005e6c:	e090      	b.n	8005f90 <_printf_i+0x150>
 8005e6e:	0025      	movs	r5, r4
 8005e70:	3542      	adds	r5, #66	@ 0x42
 8005e72:	702a      	strb	r2, [r5, #0]
 8005e74:	e022      	b.n	8005ebc <_printf_i+0x7c>
 8005e76:	0010      	movs	r0, r2
 8005e78:	3863      	subs	r0, #99	@ 0x63
 8005e7a:	2815      	cmp	r0, #21
 8005e7c:	d8f7      	bhi.n	8005e6e <_printf_i+0x2e>
 8005e7e:	f7fa f94b 	bl	8000118 <__gnu_thumb1_case_shi>
 8005e82:	0016      	.short	0x0016
 8005e84:	fff6001f 	.word	0xfff6001f
 8005e88:	fff6fff6 	.word	0xfff6fff6
 8005e8c:	001ffff6 	.word	0x001ffff6
 8005e90:	fff6fff6 	.word	0xfff6fff6
 8005e94:	fff6fff6 	.word	0xfff6fff6
 8005e98:	003600a1 	.word	0x003600a1
 8005e9c:	fff60080 	.word	0xfff60080
 8005ea0:	00b2fff6 	.word	0x00b2fff6
 8005ea4:	0036fff6 	.word	0x0036fff6
 8005ea8:	fff6fff6 	.word	0xfff6fff6
 8005eac:	0084      	.short	0x0084
 8005eae:	0025      	movs	r5, r4
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	3542      	adds	r5, #66	@ 0x42
 8005eb4:	1d11      	adds	r1, r2, #4
 8005eb6:	6019      	str	r1, [r3, #0]
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	702b      	strb	r3, [r5, #0]
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0a0      	b.n	8006002 <_printf_i+0x1c2>
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	6809      	ldr	r1, [r1, #0]
 8005ec4:	1d02      	adds	r2, r0, #4
 8005ec6:	060d      	lsls	r5, r1, #24
 8005ec8:	d50b      	bpl.n	8005ee2 <_printf_i+0xa2>
 8005eca:	6806      	ldr	r6, [r0, #0]
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	da03      	bge.n	8005eda <_printf_i+0x9a>
 8005ed2:	232d      	movs	r3, #45	@ 0x2d
 8005ed4:	9a03      	ldr	r2, [sp, #12]
 8005ed6:	4276      	negs	r6, r6
 8005ed8:	7013      	strb	r3, [r2, #0]
 8005eda:	4b5e      	ldr	r3, [pc, #376]	@ (8006054 <_printf_i+0x214>)
 8005edc:	270a      	movs	r7, #10
 8005ede:	9304      	str	r3, [sp, #16]
 8005ee0:	e018      	b.n	8005f14 <_printf_i+0xd4>
 8005ee2:	6806      	ldr	r6, [r0, #0]
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	0649      	lsls	r1, r1, #25
 8005ee8:	d5f1      	bpl.n	8005ece <_printf_i+0x8e>
 8005eea:	b236      	sxth	r6, r6
 8005eec:	e7ef      	b.n	8005ece <_printf_i+0x8e>
 8005eee:	6808      	ldr	r0, [r1, #0]
 8005ef0:	6819      	ldr	r1, [r3, #0]
 8005ef2:	c940      	ldmia	r1!, {r6}
 8005ef4:	0605      	lsls	r5, r0, #24
 8005ef6:	d402      	bmi.n	8005efe <_printf_i+0xbe>
 8005ef8:	0640      	lsls	r0, r0, #25
 8005efa:	d500      	bpl.n	8005efe <_printf_i+0xbe>
 8005efc:	b2b6      	uxth	r6, r6
 8005efe:	6019      	str	r1, [r3, #0]
 8005f00:	4b54      	ldr	r3, [pc, #336]	@ (8006054 <_printf_i+0x214>)
 8005f02:	270a      	movs	r7, #10
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	2a6f      	cmp	r2, #111	@ 0x6f
 8005f08:	d100      	bne.n	8005f0c <_printf_i+0xcc>
 8005f0a:	3f02      	subs	r7, #2
 8005f0c:	0023      	movs	r3, r4
 8005f0e:	2200      	movs	r2, #0
 8005f10:	3343      	adds	r3, #67	@ 0x43
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	60a3      	str	r3, [r4, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	db03      	blt.n	8005f24 <_printf_i+0xe4>
 8005f1c:	2104      	movs	r1, #4
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	438a      	bics	r2, r1
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	2e00      	cmp	r6, #0
 8005f26:	d102      	bne.n	8005f2e <_printf_i+0xee>
 8005f28:	9d03      	ldr	r5, [sp, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <_printf_i+0x108>
 8005f2e:	9d03      	ldr	r5, [sp, #12]
 8005f30:	0030      	movs	r0, r6
 8005f32:	0039      	movs	r1, r7
 8005f34:	f7fa f980 	bl	8000238 <__aeabi_uidivmod>
 8005f38:	9b04      	ldr	r3, [sp, #16]
 8005f3a:	3d01      	subs	r5, #1
 8005f3c:	5c5b      	ldrb	r3, [r3, r1]
 8005f3e:	702b      	strb	r3, [r5, #0]
 8005f40:	0033      	movs	r3, r6
 8005f42:	0006      	movs	r6, r0
 8005f44:	429f      	cmp	r7, r3
 8005f46:	d9f3      	bls.n	8005f30 <_printf_i+0xf0>
 8005f48:	2f08      	cmp	r7, #8
 8005f4a:	d109      	bne.n	8005f60 <_printf_i+0x120>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	07db      	lsls	r3, r3, #31
 8005f50:	d506      	bpl.n	8005f60 <_printf_i+0x120>
 8005f52:	6862      	ldr	r2, [r4, #4]
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	dc02      	bgt.n	8005f60 <_printf_i+0x120>
 8005f5a:	2330      	movs	r3, #48	@ 0x30
 8005f5c:	3d01      	subs	r5, #1
 8005f5e:	702b      	strb	r3, [r5, #0]
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	1b5b      	subs	r3, r3, r5
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	0021      	movs	r1, r4
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	9805      	ldr	r0, [sp, #20]
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	aa09      	add	r2, sp, #36	@ 0x24
 8005f72:	f7ff fef5 	bl	8005d60 <_printf_common>
 8005f76:	3001      	adds	r0, #1
 8005f78:	d148      	bne.n	800600c <_printf_i+0x1cc>
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	4240      	negs	r0, r0
 8005f7e:	b00b      	add	sp, #44	@ 0x2c
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f82:	2220      	movs	r2, #32
 8005f84:	6809      	ldr	r1, [r1, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	2278      	movs	r2, #120	@ 0x78
 8005f8c:	4932      	ldr	r1, [pc, #200]	@ (8006058 <_printf_i+0x218>)
 8005f8e:	9104      	str	r1, [sp, #16]
 8005f90:	0021      	movs	r1, r4
 8005f92:	3145      	adds	r1, #69	@ 0x45
 8005f94:	700a      	strb	r2, [r1, #0]
 8005f96:	6819      	ldr	r1, [r3, #0]
 8005f98:	6822      	ldr	r2, [r4, #0]
 8005f9a:	c940      	ldmia	r1!, {r6}
 8005f9c:	0610      	lsls	r0, r2, #24
 8005f9e:	d402      	bmi.n	8005fa6 <_printf_i+0x166>
 8005fa0:	0650      	lsls	r0, r2, #25
 8005fa2:	d500      	bpl.n	8005fa6 <_printf_i+0x166>
 8005fa4:	b2b6      	uxth	r6, r6
 8005fa6:	6019      	str	r1, [r3, #0]
 8005fa8:	07d3      	lsls	r3, r2, #31
 8005faa:	d502      	bpl.n	8005fb2 <_printf_i+0x172>
 8005fac:	2320      	movs	r3, #32
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d001      	beq.n	8005fba <_printf_i+0x17a>
 8005fb6:	2710      	movs	r7, #16
 8005fb8:	e7a8      	b.n	8005f0c <_printf_i+0xcc>
 8005fba:	2220      	movs	r2, #32
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	4393      	bics	r3, r2
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	e7f8      	b.n	8005fb6 <_printf_i+0x176>
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	680d      	ldr	r5, [r1, #0]
 8005fc8:	1d10      	adds	r0, r2, #4
 8005fca:	6949      	ldr	r1, [r1, #20]
 8005fcc:	6018      	str	r0, [r3, #0]
 8005fce:	6813      	ldr	r3, [r2, #0]
 8005fd0:	062e      	lsls	r6, r5, #24
 8005fd2:	d501      	bpl.n	8005fd8 <_printf_i+0x198>
 8005fd4:	6019      	str	r1, [r3, #0]
 8005fd6:	e002      	b.n	8005fde <_printf_i+0x19e>
 8005fd8:	066d      	lsls	r5, r5, #25
 8005fda:	d5fb      	bpl.n	8005fd4 <_printf_i+0x194>
 8005fdc:	8019      	strh	r1, [r3, #0]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9d03      	ldr	r5, [sp, #12]
 8005fe2:	6123      	str	r3, [r4, #16]
 8005fe4:	e7bf      	b.n	8005f66 <_printf_i+0x126>
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	1d11      	adds	r1, r2, #4
 8005fea:	6019      	str	r1, [r3, #0]
 8005fec:	6815      	ldr	r5, [r2, #0]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	0028      	movs	r0, r5
 8005ff2:	6862      	ldr	r2, [r4, #4]
 8005ff4:	f000 fa30 	bl	8006458 <memchr>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d001      	beq.n	8006000 <_printf_i+0x1c0>
 8005ffc:	1b40      	subs	r0, r0, r5
 8005ffe:	6060      	str	r0, [r4, #4]
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	2300      	movs	r3, #0
 8006006:	9a03      	ldr	r2, [sp, #12]
 8006008:	7013      	strb	r3, [r2, #0]
 800600a:	e7ac      	b.n	8005f66 <_printf_i+0x126>
 800600c:	002a      	movs	r2, r5
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	9906      	ldr	r1, [sp, #24]
 8006012:	9805      	ldr	r0, [sp, #20]
 8006014:	9d07      	ldr	r5, [sp, #28]
 8006016:	47a8      	blx	r5
 8006018:	3001      	adds	r0, #1
 800601a:	d0ae      	beq.n	8005f7a <_printf_i+0x13a>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	079b      	lsls	r3, r3, #30
 8006020:	d415      	bmi.n	800604e <_printf_i+0x20e>
 8006022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006024:	68e0      	ldr	r0, [r4, #12]
 8006026:	4298      	cmp	r0, r3
 8006028:	daa9      	bge.n	8005f7e <_printf_i+0x13e>
 800602a:	0018      	movs	r0, r3
 800602c:	e7a7      	b.n	8005f7e <_printf_i+0x13e>
 800602e:	0022      	movs	r2, r4
 8006030:	2301      	movs	r3, #1
 8006032:	9906      	ldr	r1, [sp, #24]
 8006034:	9805      	ldr	r0, [sp, #20]
 8006036:	9e07      	ldr	r6, [sp, #28]
 8006038:	3219      	adds	r2, #25
 800603a:	47b0      	blx	r6
 800603c:	3001      	adds	r0, #1
 800603e:	d09c      	beq.n	8005f7a <_printf_i+0x13a>
 8006040:	3501      	adds	r5, #1
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	42ab      	cmp	r3, r5
 800604a:	dcf0      	bgt.n	800602e <_printf_i+0x1ee>
 800604c:	e7e9      	b.n	8006022 <_printf_i+0x1e2>
 800604e:	2500      	movs	r5, #0
 8006050:	e7f7      	b.n	8006042 <_printf_i+0x202>
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	0800688d 	.word	0x0800688d
 8006058:	0800689e 	.word	0x0800689e

0800605c <_scanf_chars>:
 800605c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800605e:	0015      	movs	r5, r2
 8006060:	688a      	ldr	r2, [r1, #8]
 8006062:	000c      	movs	r4, r1
 8006064:	9001      	str	r0, [sp, #4]
 8006066:	2a00      	cmp	r2, #0
 8006068:	d104      	bne.n	8006074 <_scanf_chars+0x18>
 800606a:	698a      	ldr	r2, [r1, #24]
 800606c:	2a00      	cmp	r2, #0
 800606e:	d117      	bne.n	80060a0 <_scanf_chars+0x44>
 8006070:	3201      	adds	r2, #1
 8006072:	60a2      	str	r2, [r4, #8]
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	06d2      	lsls	r2, r2, #27
 8006078:	d403      	bmi.n	8006082 <_scanf_chars+0x26>
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	1d11      	adds	r1, r2, #4
 800607e:	6019      	str	r1, [r3, #0]
 8006080:	6817      	ldr	r7, [r2, #0]
 8006082:	2600      	movs	r6, #0
 8006084:	69a0      	ldr	r0, [r4, #24]
 8006086:	2800      	cmp	r0, #0
 8006088:	d016      	beq.n	80060b8 <_scanf_chars+0x5c>
 800608a:	2801      	cmp	r0, #1
 800608c:	d10b      	bne.n	80060a6 <_scanf_chars+0x4a>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	6962      	ldr	r2, [r4, #20]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	5cd3      	ldrb	r3, [r2, r3]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10e      	bne.n	80060b8 <_scanf_chars+0x5c>
 800609a:	2e00      	cmp	r6, #0
 800609c:	d03b      	beq.n	8006116 <_scanf_chars+0xba>
 800609e:	e029      	b.n	80060f4 <_scanf_chars+0x98>
 80060a0:	2201      	movs	r2, #1
 80060a2:	4252      	negs	r2, r2
 80060a4:	e7e5      	b.n	8006072 <_scanf_chars+0x16>
 80060a6:	2802      	cmp	r0, #2
 80060a8:	d124      	bne.n	80060f4 <_scanf_chars+0x98>
 80060aa:	682b      	ldr	r3, [r5, #0]
 80060ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006118 <_scanf_chars+0xbc>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	5cd3      	ldrb	r3, [r2, r3]
 80060b2:	2208      	movs	r2, #8
 80060b4:	4213      	tst	r3, r2
 80060b6:	d11d      	bne.n	80060f4 <_scanf_chars+0x98>
 80060b8:	2210      	movs	r2, #16
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	3601      	adds	r6, #1
 80060be:	4213      	tst	r3, r2
 80060c0:	d103      	bne.n	80060ca <_scanf_chars+0x6e>
 80060c2:	682b      	ldr	r3, [r5, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	703b      	strb	r3, [r7, #0]
 80060c8:	3701      	adds	r7, #1
 80060ca:	682a      	ldr	r2, [r5, #0]
 80060cc:	686b      	ldr	r3, [r5, #4]
 80060ce:	3201      	adds	r2, #1
 80060d0:	602a      	str	r2, [r5, #0]
 80060d2:	68a2      	ldr	r2, [r4, #8]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	3a01      	subs	r2, #1
 80060d8:	606b      	str	r3, [r5, #4]
 80060da:	60a2      	str	r2, [r4, #8]
 80060dc:	2a00      	cmp	r2, #0
 80060de:	d009      	beq.n	80060f4 <_scanf_chars+0x98>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dccf      	bgt.n	8006084 <_scanf_chars+0x28>
 80060e4:	23c0      	movs	r3, #192	@ 0xc0
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	0029      	movs	r1, r5
 80060ea:	58e3      	ldr	r3, [r4, r3]
 80060ec:	9801      	ldr	r0, [sp, #4]
 80060ee:	4798      	blx	r3
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d0c7      	beq.n	8006084 <_scanf_chars+0x28>
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	2310      	movs	r3, #16
 80060f8:	0011      	movs	r1, r2
 80060fa:	4019      	ands	r1, r3
 80060fc:	421a      	tst	r2, r3
 80060fe:	d106      	bne.n	800610e <_scanf_chars+0xb2>
 8006100:	68e3      	ldr	r3, [r4, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60e3      	str	r3, [r4, #12]
 8006106:	69a3      	ldr	r3, [r4, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d000      	beq.n	800610e <_scanf_chars+0xb2>
 800610c:	7039      	strb	r1, [r7, #0]
 800610e:	2000      	movs	r0, #0
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	199b      	adds	r3, r3, r6
 8006114:	6123      	str	r3, [r4, #16]
 8006116:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006118:	080068cb 	.word	0x080068cb

0800611c <_scanf_i>:
 800611c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800611e:	b08b      	sub	sp, #44	@ 0x2c
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	4b78      	ldr	r3, [pc, #480]	@ (8006304 <_scanf_i+0x1e8>)
 8006124:	0016      	movs	r6, r2
 8006126:	9004      	str	r0, [sp, #16]
 8006128:	aa07      	add	r2, sp, #28
 800612a:	cba1      	ldmia	r3!, {r0, r5, r7}
 800612c:	c2a1      	stmia	r2!, {r0, r5, r7}
 800612e:	4a76      	ldr	r2, [pc, #472]	@ (8006308 <_scanf_i+0x1ec>)
 8006130:	698b      	ldr	r3, [r1, #24]
 8006132:	000c      	movs	r4, r1
 8006134:	9205      	str	r2, [sp, #20]
 8006136:	2b03      	cmp	r3, #3
 8006138:	d101      	bne.n	800613e <_scanf_i+0x22>
 800613a:	4b74      	ldr	r3, [pc, #464]	@ (800630c <_scanf_i+0x1f0>)
 800613c:	9305      	str	r3, [sp, #20]
 800613e:	22ae      	movs	r2, #174	@ 0xae
 8006140:	2000      	movs	r0, #0
 8006142:	68a3      	ldr	r3, [r4, #8]
 8006144:	0052      	lsls	r2, r2, #1
 8006146:	1e59      	subs	r1, r3, #1
 8006148:	9003      	str	r0, [sp, #12]
 800614a:	4291      	cmp	r1, r2
 800614c:	d905      	bls.n	800615a <_scanf_i+0x3e>
 800614e:	3b5e      	subs	r3, #94	@ 0x5e
 8006150:	3bff      	subs	r3, #255	@ 0xff
 8006152:	9303      	str	r3, [sp, #12]
 8006154:	235e      	movs	r3, #94	@ 0x5e
 8006156:	33ff      	adds	r3, #255	@ 0xff
 8006158:	60a3      	str	r3, [r4, #8]
 800615a:	0023      	movs	r3, r4
 800615c:	331c      	adds	r3, #28
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	23d0      	movs	r3, #208	@ 0xd0
 8006162:	2700      	movs	r7, #0
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	4313      	orrs	r3, r2
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	9302      	str	r3, [sp, #8]
 8006170:	6833      	ldr	r3, [r6, #0]
 8006172:	a807      	add	r0, sp, #28
 8006174:	7819      	ldrb	r1, [r3, #0]
 8006176:	00bb      	lsls	r3, r7, #2
 8006178:	2202      	movs	r2, #2
 800617a:	5818      	ldr	r0, [r3, r0]
 800617c:	f000 f96c 	bl	8006458 <memchr>
 8006180:	2800      	cmp	r0, #0
 8006182:	d029      	beq.n	80061d8 <_scanf_i+0xbc>
 8006184:	2f01      	cmp	r7, #1
 8006186:	d15e      	bne.n	8006246 <_scanf_i+0x12a>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <_scanf_i+0x80>
 800618e:	3308      	adds	r3, #8
 8006190:	6822      	ldr	r2, [r4, #0]
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	33f9      	adds	r3, #249	@ 0xf9
 8006196:	33ff      	adds	r3, #255	@ 0xff
 8006198:	4313      	orrs	r3, r2
 800619a:	6023      	str	r3, [r4, #0]
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	4a5c      	ldr	r2, [pc, #368]	@ (8006310 <_scanf_i+0x1f4>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	68a3      	ldr	r3, [r4, #8]
 80061a6:	1e5a      	subs	r2, r3, #1
 80061a8:	60a2      	str	r2, [r4, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d014      	beq.n	80061d8 <_scanf_i+0xbc>
 80061ae:	6833      	ldr	r3, [r6, #0]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	6032      	str	r2, [r6, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	9a02      	ldr	r2, [sp, #8]
 80061b8:	7013      	strb	r3, [r2, #0]
 80061ba:	6873      	ldr	r3, [r6, #4]
 80061bc:	1c55      	adds	r5, r2, #1
 80061be:	3b01      	subs	r3, #1
 80061c0:	6073      	str	r3, [r6, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	dc07      	bgt.n	80061d6 <_scanf_i+0xba>
 80061c6:	23c0      	movs	r3, #192	@ 0xc0
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	0031      	movs	r1, r6
 80061cc:	58e3      	ldr	r3, [r4, r3]
 80061ce:	9804      	ldr	r0, [sp, #16]
 80061d0:	4798      	blx	r3
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d17e      	bne.n	80062d4 <_scanf_i+0x1b8>
 80061d6:	9502      	str	r5, [sp, #8]
 80061d8:	3701      	adds	r7, #1
 80061da:	2f03      	cmp	r7, #3
 80061dc:	d1c8      	bne.n	8006170 <_scanf_i+0x54>
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <_scanf_i+0xcc>
 80061e4:	330a      	adds	r3, #10
 80061e6:	6063      	str	r3, [r4, #4]
 80061e8:	2700      	movs	r7, #0
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	4949      	ldr	r1, [pc, #292]	@ (8006314 <_scanf_i+0x1f8>)
 80061ee:	6960      	ldr	r0, [r4, #20]
 80061f0:	1ac9      	subs	r1, r1, r3
 80061f2:	f000 f893 	bl	800631c <__sccl>
 80061f6:	9d02      	ldr	r5, [sp, #8]
 80061f8:	68a3      	ldr	r3, [r4, #8]
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	9302      	str	r3, [sp, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d03f      	beq.n	8006282 <_scanf_i+0x166>
 8006202:	6831      	ldr	r1, [r6, #0]
 8006204:	6963      	ldr	r3, [r4, #20]
 8006206:	780a      	ldrb	r2, [r1, #0]
 8006208:	5c9b      	ldrb	r3, [r3, r2]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d039      	beq.n	8006282 <_scanf_i+0x166>
 800620e:	2a30      	cmp	r2, #48	@ 0x30
 8006210:	d128      	bne.n	8006264 <_scanf_i+0x148>
 8006212:	2380      	movs	r3, #128	@ 0x80
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	4218      	tst	r0, r3
 8006218:	d024      	beq.n	8006264 <_scanf_i+0x148>
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	3701      	adds	r7, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <_scanf_i+0x112>
 8006222:	001a      	movs	r2, r3
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	3a01      	subs	r2, #1
 8006228:	3301      	adds	r3, #1
 800622a:	9203      	str	r2, [sp, #12]
 800622c:	60a3      	str	r3, [r4, #8]
 800622e:	6873      	ldr	r3, [r6, #4]
 8006230:	3b01      	subs	r3, #1
 8006232:	6073      	str	r3, [r6, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	dd1c      	ble.n	8006272 <_scanf_i+0x156>
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	68a3      	ldr	r3, [r4, #8]
 8006240:	3b01      	subs	r3, #1
 8006242:	60a3      	str	r3, [r4, #8]
 8006244:	e7d8      	b.n	80061f8 <_scanf_i+0xdc>
 8006246:	2f02      	cmp	r7, #2
 8006248:	d1ac      	bne.n	80061a4 <_scanf_i+0x88>
 800624a:	23c0      	movs	r3, #192	@ 0xc0
 800624c:	2180      	movs	r1, #128	@ 0x80
 800624e:	6822      	ldr	r2, [r4, #0]
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4013      	ands	r3, r2
 8006254:	0089      	lsls	r1, r1, #2
 8006256:	428b      	cmp	r3, r1
 8006258:	d1c1      	bne.n	80061de <_scanf_i+0xc2>
 800625a:	2310      	movs	r3, #16
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	33f0      	adds	r3, #240	@ 0xf0
 8006260:	4313      	orrs	r3, r2
 8006262:	e79e      	b.n	80061a2 <_scanf_i+0x86>
 8006264:	4b2c      	ldr	r3, [pc, #176]	@ (8006318 <_scanf_i+0x1fc>)
 8006266:	4003      	ands	r3, r0
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	780b      	ldrb	r3, [r1, #0]
 800626c:	702b      	strb	r3, [r5, #0]
 800626e:	3501      	adds	r5, #1
 8006270:	e7dd      	b.n	800622e <_scanf_i+0x112>
 8006272:	23c0      	movs	r3, #192	@ 0xc0
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	0031      	movs	r1, r6
 8006278:	58e3      	ldr	r3, [r4, r3]
 800627a:	9804      	ldr	r0, [sp, #16]
 800627c:	4798      	blx	r3
 800627e:	2800      	cmp	r0, #0
 8006280:	d0dd      	beq.n	800623e <_scanf_i+0x122>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	05db      	lsls	r3, r3, #23
 8006286:	d50e      	bpl.n	80062a6 <_scanf_i+0x18a>
 8006288:	9b00      	ldr	r3, [sp, #0]
 800628a:	429d      	cmp	r5, r3
 800628c:	d907      	bls.n	800629e <_scanf_i+0x182>
 800628e:	23be      	movs	r3, #190	@ 0xbe
 8006290:	3d01      	subs	r5, #1
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	0032      	movs	r2, r6
 8006296:	7829      	ldrb	r1, [r5, #0]
 8006298:	58e3      	ldr	r3, [r4, r3]
 800629a:	9804      	ldr	r0, [sp, #16]
 800629c:	4798      	blx	r3
 800629e:	9b00      	ldr	r3, [sp, #0]
 80062a0:	2001      	movs	r0, #1
 80062a2:	429d      	cmp	r5, r3
 80062a4:	d029      	beq.n	80062fa <_scanf_i+0x1de>
 80062a6:	6821      	ldr	r1, [r4, #0]
 80062a8:	2310      	movs	r3, #16
 80062aa:	000a      	movs	r2, r1
 80062ac:	401a      	ands	r2, r3
 80062ae:	4219      	tst	r1, r3
 80062b0:	d11c      	bne.n	80062ec <_scanf_i+0x1d0>
 80062b2:	702a      	strb	r2, [r5, #0]
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	9900      	ldr	r1, [sp, #0]
 80062b8:	9804      	ldr	r0, [sp, #16]
 80062ba:	9e05      	ldr	r6, [sp, #20]
 80062bc:	47b0      	blx	r6
 80062be:	9b01      	ldr	r3, [sp, #4]
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	0691      	lsls	r1, r2, #26
 80062c6:	d507      	bpl.n	80062d8 <_scanf_i+0x1bc>
 80062c8:	9901      	ldr	r1, [sp, #4]
 80062ca:	1d1a      	adds	r2, r3, #4
 80062cc:	600a      	str	r2, [r1, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6018      	str	r0, [r3, #0]
 80062d2:	e008      	b.n	80062e6 <_scanf_i+0x1ca>
 80062d4:	2700      	movs	r7, #0
 80062d6:	e7d4      	b.n	8006282 <_scanf_i+0x166>
 80062d8:	1d19      	adds	r1, r3, #4
 80062da:	07d6      	lsls	r6, r2, #31
 80062dc:	d50f      	bpl.n	80062fe <_scanf_i+0x1e2>
 80062de:	9a01      	ldr	r2, [sp, #4]
 80062e0:	6011      	str	r1, [r2, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	8018      	strh	r0, [r3, #0]
 80062e6:	68e3      	ldr	r3, [r4, #12]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60e3      	str	r3, [r4, #12]
 80062ec:	2000      	movs	r0, #0
 80062ee:	9b00      	ldr	r3, [sp, #0]
 80062f0:	1aed      	subs	r5, r5, r3
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	19ed      	adds	r5, r5, r7
 80062f6:	195b      	adds	r3, r3, r5
 80062f8:	6123      	str	r3, [r4, #16]
 80062fa:	b00b      	add	sp, #44	@ 0x2c
 80062fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fe:	9a01      	ldr	r2, [sp, #4]
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	e7e4      	b.n	80062ce <_scanf_i+0x1b2>
 8006304:	080067a8 	.word	0x080067a8
 8006308:	080066ed 	.word	0x080066ed
 800630c:	080065e1 	.word	0x080065e1
 8006310:	fffffaff 	.word	0xfffffaff
 8006314:	080068bf 	.word	0x080068bf
 8006318:	fffff6ff 	.word	0xfffff6ff

0800631c <__sccl>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	780b      	ldrb	r3, [r1, #0]
 8006320:	0004      	movs	r4, r0
 8006322:	2b5e      	cmp	r3, #94	@ 0x5e
 8006324:	d018      	beq.n	8006358 <__sccl+0x3c>
 8006326:	2200      	movs	r2, #0
 8006328:	1c4d      	adds	r5, r1, #1
 800632a:	0021      	movs	r1, r4
 800632c:	1c60      	adds	r0, r4, #1
 800632e:	30ff      	adds	r0, #255	@ 0xff
 8006330:	700a      	strb	r2, [r1, #0]
 8006332:	3101      	adds	r1, #1
 8006334:	4281      	cmp	r1, r0
 8006336:	d1fb      	bne.n	8006330 <__sccl+0x14>
 8006338:	1e68      	subs	r0, r5, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <__sccl+0x3a>
 800633e:	2101      	movs	r1, #1
 8006340:	404a      	eors	r2, r1
 8006342:	0028      	movs	r0, r5
 8006344:	54e2      	strb	r2, [r4, r3]
 8006346:	7801      	ldrb	r1, [r0, #0]
 8006348:	1c45      	adds	r5, r0, #1
 800634a:	292d      	cmp	r1, #45	@ 0x2d
 800634c:	d00a      	beq.n	8006364 <__sccl+0x48>
 800634e:	295d      	cmp	r1, #93	@ 0x5d
 8006350:	d01b      	beq.n	800638a <__sccl+0x6e>
 8006352:	2900      	cmp	r1, #0
 8006354:	d104      	bne.n	8006360 <__sccl+0x44>
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	2201      	movs	r2, #1
 800635a:	784b      	ldrb	r3, [r1, #1]
 800635c:	1c8d      	adds	r5, r1, #2
 800635e:	e7e4      	b.n	800632a <__sccl+0xe>
 8006360:	000b      	movs	r3, r1
 8006362:	e7ee      	b.n	8006342 <__sccl+0x26>
 8006364:	7846      	ldrb	r6, [r0, #1]
 8006366:	2e5d      	cmp	r6, #93	@ 0x5d
 8006368:	d0fa      	beq.n	8006360 <__sccl+0x44>
 800636a:	42b3      	cmp	r3, r6
 800636c:	dcf8      	bgt.n	8006360 <__sccl+0x44>
 800636e:	0019      	movs	r1, r3
 8006370:	3002      	adds	r0, #2
 8006372:	3101      	adds	r1, #1
 8006374:	5462      	strb	r2, [r4, r1]
 8006376:	428e      	cmp	r6, r1
 8006378:	dcfb      	bgt.n	8006372 <__sccl+0x56>
 800637a:	2100      	movs	r1, #0
 800637c:	1c5d      	adds	r5, r3, #1
 800637e:	42b3      	cmp	r3, r6
 8006380:	da01      	bge.n	8006386 <__sccl+0x6a>
 8006382:	1af1      	subs	r1, r6, r3
 8006384:	3901      	subs	r1, #1
 8006386:	186b      	adds	r3, r5, r1
 8006388:	e7dd      	b.n	8006346 <__sccl+0x2a>
 800638a:	0028      	movs	r0, r5
 800638c:	e7e3      	b.n	8006356 <__sccl+0x3a>
	...

08006390 <__submore>:
 8006390:	000b      	movs	r3, r1
 8006392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006394:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8006396:	3344      	adds	r3, #68	@ 0x44
 8006398:	000c      	movs	r4, r1
 800639a:	429d      	cmp	r5, r3
 800639c:	d11c      	bne.n	80063d8 <__submore+0x48>
 800639e:	2680      	movs	r6, #128	@ 0x80
 80063a0:	00f6      	lsls	r6, r6, #3
 80063a2:	0031      	movs	r1, r6
 80063a4:	f7ff f930 	bl	8005608 <_malloc_r>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	d102      	bne.n	80063b2 <__submore+0x22>
 80063ac:	2001      	movs	r0, #1
 80063ae:	4240      	negs	r0, r0
 80063b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063b2:	0023      	movs	r3, r4
 80063b4:	6360      	str	r0, [r4, #52]	@ 0x34
 80063b6:	63a6      	str	r6, [r4, #56]	@ 0x38
 80063b8:	3346      	adds	r3, #70	@ 0x46
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	4b10      	ldr	r3, [pc, #64]	@ (8006400 <__submore+0x70>)
 80063be:	54c2      	strb	r2, [r0, r3]
 80063c0:	0023      	movs	r3, r4
 80063c2:	3345      	adds	r3, #69	@ 0x45
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006404 <__submore+0x74>)
 80063c8:	54c2      	strb	r2, [r0, r3]
 80063ca:	782a      	ldrb	r2, [r5, #0]
 80063cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <__submore+0x78>)
 80063ce:	54c2      	strb	r2, [r0, r3]
 80063d0:	18c0      	adds	r0, r0, r3
 80063d2:	6020      	str	r0, [r4, #0]
 80063d4:	2000      	movs	r0, #0
 80063d6:	e7eb      	b.n	80063b0 <__submore+0x20>
 80063d8:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 80063da:	0029      	movs	r1, r5
 80063dc:	0073      	lsls	r3, r6, #1
 80063de:	001a      	movs	r2, r3
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	f000 f844 	bl	800646e <_realloc_r>
 80063e6:	1e05      	subs	r5, r0, #0
 80063e8:	d0e0      	beq.n	80063ac <__submore+0x1c>
 80063ea:	1987      	adds	r7, r0, r6
 80063ec:	0001      	movs	r1, r0
 80063ee:	0032      	movs	r2, r6
 80063f0:	0038      	movs	r0, r7
 80063f2:	f7ff f893 	bl	800551c <memcpy>
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	6027      	str	r7, [r4, #0]
 80063fa:	6365      	str	r5, [r4, #52]	@ 0x34
 80063fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80063fe:	e7e9      	b.n	80063d4 <__submore+0x44>
 8006400:	000003ff 	.word	0x000003ff
 8006404:	000003fe 	.word	0x000003fe
 8006408:	000003fd 	.word	0x000003fd

0800640c <memmove>:
 800640c:	b510      	push	{r4, lr}
 800640e:	4288      	cmp	r0, r1
 8006410:	d806      	bhi.n	8006420 <memmove+0x14>
 8006412:	2300      	movs	r3, #0
 8006414:	429a      	cmp	r2, r3
 8006416:	d008      	beq.n	800642a <memmove+0x1e>
 8006418:	5ccc      	ldrb	r4, [r1, r3]
 800641a:	54c4      	strb	r4, [r0, r3]
 800641c:	3301      	adds	r3, #1
 800641e:	e7f9      	b.n	8006414 <memmove+0x8>
 8006420:	188b      	adds	r3, r1, r2
 8006422:	4298      	cmp	r0, r3
 8006424:	d2f5      	bcs.n	8006412 <memmove+0x6>
 8006426:	3a01      	subs	r2, #1
 8006428:	d200      	bcs.n	800642c <memmove+0x20>
 800642a:	bd10      	pop	{r4, pc}
 800642c:	5c8b      	ldrb	r3, [r1, r2]
 800642e:	5483      	strb	r3, [r0, r2]
 8006430:	e7f9      	b.n	8006426 <memmove+0x1a>
	...

08006434 <_sbrk_r>:
 8006434:	2300      	movs	r3, #0
 8006436:	b570      	push	{r4, r5, r6, lr}
 8006438:	4d06      	ldr	r5, [pc, #24]	@ (8006454 <_sbrk_r+0x20>)
 800643a:	0004      	movs	r4, r0
 800643c:	0008      	movs	r0, r1
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	f7fb fc5a 	bl	8001cf8 <_sbrk>
 8006444:	1c43      	adds	r3, r0, #1
 8006446:	d103      	bne.n	8006450 <_sbrk_r+0x1c>
 8006448:	682b      	ldr	r3, [r5, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d000      	beq.n	8006450 <_sbrk_r+0x1c>
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	20001e40 	.word	0x20001e40

08006458 <memchr>:
 8006458:	b2c9      	uxtb	r1, r1
 800645a:	1882      	adds	r2, r0, r2
 800645c:	4290      	cmp	r0, r2
 800645e:	d101      	bne.n	8006464 <memchr+0xc>
 8006460:	2000      	movs	r0, #0
 8006462:	4770      	bx	lr
 8006464:	7803      	ldrb	r3, [r0, #0]
 8006466:	428b      	cmp	r3, r1
 8006468:	d0fb      	beq.n	8006462 <memchr+0xa>
 800646a:	3001      	adds	r0, #1
 800646c:	e7f6      	b.n	800645c <memchr+0x4>

0800646e <_realloc_r>:
 800646e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006470:	0006      	movs	r6, r0
 8006472:	000c      	movs	r4, r1
 8006474:	0015      	movs	r5, r2
 8006476:	2900      	cmp	r1, #0
 8006478:	d105      	bne.n	8006486 <_realloc_r+0x18>
 800647a:	0011      	movs	r1, r2
 800647c:	f7ff f8c4 	bl	8005608 <_malloc_r>
 8006480:	0004      	movs	r4, r0
 8006482:	0020      	movs	r0, r4
 8006484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006486:	2a00      	cmp	r2, #0
 8006488:	d103      	bne.n	8006492 <_realloc_r+0x24>
 800648a:	f7ff f851 	bl	8005530 <_free_r>
 800648e:	2400      	movs	r4, #0
 8006490:	e7f7      	b.n	8006482 <_realloc_r+0x14>
 8006492:	f000 f92f 	bl	80066f4 <_malloc_usable_size_r>
 8006496:	0007      	movs	r7, r0
 8006498:	4285      	cmp	r5, r0
 800649a:	d802      	bhi.n	80064a2 <_realloc_r+0x34>
 800649c:	0843      	lsrs	r3, r0, #1
 800649e:	42ab      	cmp	r3, r5
 80064a0:	d3ef      	bcc.n	8006482 <_realloc_r+0x14>
 80064a2:	0029      	movs	r1, r5
 80064a4:	0030      	movs	r0, r6
 80064a6:	f7ff f8af 	bl	8005608 <_malloc_r>
 80064aa:	9001      	str	r0, [sp, #4]
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d0ee      	beq.n	800648e <_realloc_r+0x20>
 80064b0:	002a      	movs	r2, r5
 80064b2:	42bd      	cmp	r5, r7
 80064b4:	d900      	bls.n	80064b8 <_realloc_r+0x4a>
 80064b6:	003a      	movs	r2, r7
 80064b8:	0021      	movs	r1, r4
 80064ba:	9801      	ldr	r0, [sp, #4]
 80064bc:	f7ff f82e 	bl	800551c <memcpy>
 80064c0:	0021      	movs	r1, r4
 80064c2:	0030      	movs	r0, r6
 80064c4:	f7ff f834 	bl	8005530 <_free_r>
 80064c8:	9c01      	ldr	r4, [sp, #4]
 80064ca:	e7da      	b.n	8006482 <_realloc_r+0x14>

080064cc <_strtol_l.constprop.0>:
 80064cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ce:	b085      	sub	sp, #20
 80064d0:	0017      	movs	r7, r2
 80064d2:	001e      	movs	r6, r3
 80064d4:	9003      	str	r0, [sp, #12]
 80064d6:	9101      	str	r1, [sp, #4]
 80064d8:	2b24      	cmp	r3, #36	@ 0x24
 80064da:	d844      	bhi.n	8006566 <_strtol_l.constprop.0+0x9a>
 80064dc:	000c      	movs	r4, r1
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d041      	beq.n	8006566 <_strtol_l.constprop.0+0x9a>
 80064e2:	4b3d      	ldr	r3, [pc, #244]	@ (80065d8 <_strtol_l.constprop.0+0x10c>)
 80064e4:	2208      	movs	r2, #8
 80064e6:	469c      	mov	ip, r3
 80064e8:	0023      	movs	r3, r4
 80064ea:	4661      	mov	r1, ip
 80064ec:	781d      	ldrb	r5, [r3, #0]
 80064ee:	3401      	adds	r4, #1
 80064f0:	5d48      	ldrb	r0, [r1, r5]
 80064f2:	0001      	movs	r1, r0
 80064f4:	4011      	ands	r1, r2
 80064f6:	4210      	tst	r0, r2
 80064f8:	d1f6      	bne.n	80064e8 <_strtol_l.constprop.0+0x1c>
 80064fa:	2d2d      	cmp	r5, #45	@ 0x2d
 80064fc:	d13a      	bne.n	8006574 <_strtol_l.constprop.0+0xa8>
 80064fe:	7825      	ldrb	r5, [r4, #0]
 8006500:	1c9c      	adds	r4, r3, #2
 8006502:	2301      	movs	r3, #1
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2210      	movs	r2, #16
 8006508:	0033      	movs	r3, r6
 800650a:	4393      	bics	r3, r2
 800650c:	d109      	bne.n	8006522 <_strtol_l.constprop.0+0x56>
 800650e:	2d30      	cmp	r5, #48	@ 0x30
 8006510:	d136      	bne.n	8006580 <_strtol_l.constprop.0+0xb4>
 8006512:	2120      	movs	r1, #32
 8006514:	7823      	ldrb	r3, [r4, #0]
 8006516:	438b      	bics	r3, r1
 8006518:	2b58      	cmp	r3, #88	@ 0x58
 800651a:	d131      	bne.n	8006580 <_strtol_l.constprop.0+0xb4>
 800651c:	0016      	movs	r6, r2
 800651e:	7865      	ldrb	r5, [r4, #1]
 8006520:	3402      	adds	r4, #2
 8006522:	4a2e      	ldr	r2, [pc, #184]	@ (80065dc <_strtol_l.constprop.0+0x110>)
 8006524:	9b00      	ldr	r3, [sp, #0]
 8006526:	4694      	mov	ip, r2
 8006528:	4463      	add	r3, ip
 800652a:	0031      	movs	r1, r6
 800652c:	0018      	movs	r0, r3
 800652e:	9302      	str	r3, [sp, #8]
 8006530:	f7f9 fe82 	bl	8000238 <__aeabi_uidivmod>
 8006534:	2200      	movs	r2, #0
 8006536:	4684      	mov	ip, r0
 8006538:	0010      	movs	r0, r2
 800653a:	002b      	movs	r3, r5
 800653c:	3b30      	subs	r3, #48	@ 0x30
 800653e:	2b09      	cmp	r3, #9
 8006540:	d825      	bhi.n	800658e <_strtol_l.constprop.0+0xc2>
 8006542:	001d      	movs	r5, r3
 8006544:	42ae      	cmp	r6, r5
 8006546:	dd31      	ble.n	80065ac <_strtol_l.constprop.0+0xe0>
 8006548:	1c53      	adds	r3, r2, #1
 800654a:	d009      	beq.n	8006560 <_strtol_l.constprop.0+0x94>
 800654c:	2201      	movs	r2, #1
 800654e:	4252      	negs	r2, r2
 8006550:	4584      	cmp	ip, r0
 8006552:	d305      	bcc.n	8006560 <_strtol_l.constprop.0+0x94>
 8006554:	d101      	bne.n	800655a <_strtol_l.constprop.0+0x8e>
 8006556:	42a9      	cmp	r1, r5
 8006558:	db25      	blt.n	80065a6 <_strtol_l.constprop.0+0xda>
 800655a:	2201      	movs	r2, #1
 800655c:	4370      	muls	r0, r6
 800655e:	1828      	adds	r0, r5, r0
 8006560:	7825      	ldrb	r5, [r4, #0]
 8006562:	3401      	adds	r4, #1
 8006564:	e7e9      	b.n	800653a <_strtol_l.constprop.0+0x6e>
 8006566:	f7fe ffad 	bl	80054c4 <__errno>
 800656a:	2316      	movs	r3, #22
 800656c:	6003      	str	r3, [r0, #0]
 800656e:	2000      	movs	r0, #0
 8006570:	b005      	add	sp, #20
 8006572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006574:	9100      	str	r1, [sp, #0]
 8006576:	2d2b      	cmp	r5, #43	@ 0x2b
 8006578:	d1c5      	bne.n	8006506 <_strtol_l.constprop.0+0x3a>
 800657a:	7825      	ldrb	r5, [r4, #0]
 800657c:	1c9c      	adds	r4, r3, #2
 800657e:	e7c2      	b.n	8006506 <_strtol_l.constprop.0+0x3a>
 8006580:	2e00      	cmp	r6, #0
 8006582:	d1ce      	bne.n	8006522 <_strtol_l.constprop.0+0x56>
 8006584:	3608      	adds	r6, #8
 8006586:	2d30      	cmp	r5, #48	@ 0x30
 8006588:	d0cb      	beq.n	8006522 <_strtol_l.constprop.0+0x56>
 800658a:	3602      	adds	r6, #2
 800658c:	e7c9      	b.n	8006522 <_strtol_l.constprop.0+0x56>
 800658e:	002b      	movs	r3, r5
 8006590:	3b41      	subs	r3, #65	@ 0x41
 8006592:	2b19      	cmp	r3, #25
 8006594:	d801      	bhi.n	800659a <_strtol_l.constprop.0+0xce>
 8006596:	3d37      	subs	r5, #55	@ 0x37
 8006598:	e7d4      	b.n	8006544 <_strtol_l.constprop.0+0x78>
 800659a:	002b      	movs	r3, r5
 800659c:	3b61      	subs	r3, #97	@ 0x61
 800659e:	2b19      	cmp	r3, #25
 80065a0:	d804      	bhi.n	80065ac <_strtol_l.constprop.0+0xe0>
 80065a2:	3d57      	subs	r5, #87	@ 0x57
 80065a4:	e7ce      	b.n	8006544 <_strtol_l.constprop.0+0x78>
 80065a6:	2201      	movs	r2, #1
 80065a8:	4252      	negs	r2, r2
 80065aa:	e7d9      	b.n	8006560 <_strtol_l.constprop.0+0x94>
 80065ac:	1c53      	adds	r3, r2, #1
 80065ae:	d108      	bne.n	80065c2 <_strtol_l.constprop.0+0xf6>
 80065b0:	2322      	movs	r3, #34	@ 0x22
 80065b2:	9a03      	ldr	r2, [sp, #12]
 80065b4:	9802      	ldr	r0, [sp, #8]
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	2f00      	cmp	r7, #0
 80065ba:	d0d9      	beq.n	8006570 <_strtol_l.constprop.0+0xa4>
 80065bc:	1e63      	subs	r3, r4, #1
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	e007      	b.n	80065d2 <_strtol_l.constprop.0+0x106>
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d000      	beq.n	80065ca <_strtol_l.constprop.0+0xfe>
 80065c8:	4240      	negs	r0, r0
 80065ca:	2f00      	cmp	r7, #0
 80065cc:	d0d0      	beq.n	8006570 <_strtol_l.constprop.0+0xa4>
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	d1f4      	bne.n	80065bc <_strtol_l.constprop.0+0xf0>
 80065d2:	9b01      	ldr	r3, [sp, #4]
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	e7cb      	b.n	8006570 <_strtol_l.constprop.0+0xa4>
 80065d8:	080068cb 	.word	0x080068cb
 80065dc:	7fffffff 	.word	0x7fffffff

080065e0 <_strtol_r>:
 80065e0:	b510      	push	{r4, lr}
 80065e2:	f7ff ff73 	bl	80064cc <_strtol_l.constprop.0>
 80065e6:	bd10      	pop	{r4, pc}

080065e8 <_strtoul_l.constprop.0>:
 80065e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ea:	001e      	movs	r6, r3
 80065ec:	4b3e      	ldr	r3, [pc, #248]	@ (80066e8 <_strtoul_l.constprop.0+0x100>)
 80065ee:	0017      	movs	r7, r2
 80065f0:	000c      	movs	r4, r1
 80065f2:	469c      	mov	ip, r3
 80065f4:	2208      	movs	r2, #8
 80065f6:	b085      	sub	sp, #20
 80065f8:	9003      	str	r0, [sp, #12]
 80065fa:	9100      	str	r1, [sp, #0]
 80065fc:	0023      	movs	r3, r4
 80065fe:	4661      	mov	r1, ip
 8006600:	781d      	ldrb	r5, [r3, #0]
 8006602:	3401      	adds	r4, #1
 8006604:	5d48      	ldrb	r0, [r1, r5]
 8006606:	0001      	movs	r1, r0
 8006608:	4011      	ands	r1, r2
 800660a:	4210      	tst	r0, r2
 800660c:	d1f6      	bne.n	80065fc <_strtoul_l.constprop.0+0x14>
 800660e:	2d2d      	cmp	r5, #45	@ 0x2d
 8006610:	d137      	bne.n	8006682 <_strtoul_l.constprop.0+0x9a>
 8006612:	7825      	ldrb	r5, [r4, #0]
 8006614:	1c9c      	adds	r4, r3, #2
 8006616:	2301      	movs	r3, #1
 8006618:	9302      	str	r3, [sp, #8]
 800661a:	2210      	movs	r2, #16
 800661c:	0033      	movs	r3, r6
 800661e:	4393      	bics	r3, r2
 8006620:	d109      	bne.n	8006636 <_strtoul_l.constprop.0+0x4e>
 8006622:	2d30      	cmp	r5, #48	@ 0x30
 8006624:	d133      	bne.n	800668e <_strtoul_l.constprop.0+0xa6>
 8006626:	2120      	movs	r1, #32
 8006628:	7823      	ldrb	r3, [r4, #0]
 800662a:	438b      	bics	r3, r1
 800662c:	2b58      	cmp	r3, #88	@ 0x58
 800662e:	d12e      	bne.n	800668e <_strtoul_l.constprop.0+0xa6>
 8006630:	0016      	movs	r6, r2
 8006632:	7865      	ldrb	r5, [r4, #1]
 8006634:	3402      	adds	r4, #2
 8006636:	2001      	movs	r0, #1
 8006638:	0031      	movs	r1, r6
 800663a:	4240      	negs	r0, r0
 800663c:	f7f9 fd76 	bl	800012c <__udivsi3>
 8006640:	9001      	str	r0, [sp, #4]
 8006642:	2001      	movs	r0, #1
 8006644:	0031      	movs	r1, r6
 8006646:	4240      	negs	r0, r0
 8006648:	f7f9 fdf6 	bl	8000238 <__aeabi_uidivmod>
 800664c:	2300      	movs	r3, #0
 800664e:	2201      	movs	r2, #1
 8006650:	0018      	movs	r0, r3
 8006652:	4694      	mov	ip, r2
 8006654:	002a      	movs	r2, r5
 8006656:	3a30      	subs	r2, #48	@ 0x30
 8006658:	2a09      	cmp	r2, #9
 800665a:	d81f      	bhi.n	800669c <_strtoul_l.constprop.0+0xb4>
 800665c:	0015      	movs	r5, r2
 800665e:	42ae      	cmp	r6, r5
 8006660:	dd2b      	ble.n	80066ba <_strtoul_l.constprop.0+0xd2>
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	d00a      	beq.n	800667c <_strtoul_l.constprop.0+0x94>
 8006666:	2301      	movs	r3, #1
 8006668:	9a01      	ldr	r2, [sp, #4]
 800666a:	425b      	negs	r3, r3
 800666c:	4282      	cmp	r2, r0
 800666e:	d305      	bcc.n	800667c <_strtoul_l.constprop.0+0x94>
 8006670:	d101      	bne.n	8006676 <_strtoul_l.constprop.0+0x8e>
 8006672:	42a9      	cmp	r1, r5
 8006674:	db1e      	blt.n	80066b4 <_strtoul_l.constprop.0+0xcc>
 8006676:	4663      	mov	r3, ip
 8006678:	4370      	muls	r0, r6
 800667a:	1828      	adds	r0, r5, r0
 800667c:	7825      	ldrb	r5, [r4, #0]
 800667e:	3401      	adds	r4, #1
 8006680:	e7e8      	b.n	8006654 <_strtoul_l.constprop.0+0x6c>
 8006682:	9102      	str	r1, [sp, #8]
 8006684:	2d2b      	cmp	r5, #43	@ 0x2b
 8006686:	d1c8      	bne.n	800661a <_strtoul_l.constprop.0+0x32>
 8006688:	7825      	ldrb	r5, [r4, #0]
 800668a:	1c9c      	adds	r4, r3, #2
 800668c:	e7c5      	b.n	800661a <_strtoul_l.constprop.0+0x32>
 800668e:	2e00      	cmp	r6, #0
 8006690:	d1d1      	bne.n	8006636 <_strtoul_l.constprop.0+0x4e>
 8006692:	3608      	adds	r6, #8
 8006694:	2d30      	cmp	r5, #48	@ 0x30
 8006696:	d0ce      	beq.n	8006636 <_strtoul_l.constprop.0+0x4e>
 8006698:	3602      	adds	r6, #2
 800669a:	e7cc      	b.n	8006636 <_strtoul_l.constprop.0+0x4e>
 800669c:	002a      	movs	r2, r5
 800669e:	3a41      	subs	r2, #65	@ 0x41
 80066a0:	2a19      	cmp	r2, #25
 80066a2:	d801      	bhi.n	80066a8 <_strtoul_l.constprop.0+0xc0>
 80066a4:	3d37      	subs	r5, #55	@ 0x37
 80066a6:	e7da      	b.n	800665e <_strtoul_l.constprop.0+0x76>
 80066a8:	002a      	movs	r2, r5
 80066aa:	3a61      	subs	r2, #97	@ 0x61
 80066ac:	2a19      	cmp	r2, #25
 80066ae:	d804      	bhi.n	80066ba <_strtoul_l.constprop.0+0xd2>
 80066b0:	3d57      	subs	r5, #87	@ 0x57
 80066b2:	e7d4      	b.n	800665e <_strtoul_l.constprop.0+0x76>
 80066b4:	2301      	movs	r3, #1
 80066b6:	425b      	negs	r3, r3
 80066b8:	e7e0      	b.n	800667c <_strtoul_l.constprop.0+0x94>
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	d107      	bne.n	80066ce <_strtoul_l.constprop.0+0xe6>
 80066be:	2222      	movs	r2, #34	@ 0x22
 80066c0:	9903      	ldr	r1, [sp, #12]
 80066c2:	0018      	movs	r0, r3
 80066c4:	600a      	str	r2, [r1, #0]
 80066c6:	2f00      	cmp	r7, #0
 80066c8:	d109      	bne.n	80066de <_strtoul_l.constprop.0+0xf6>
 80066ca:	b005      	add	sp, #20
 80066cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ce:	9a02      	ldr	r2, [sp, #8]
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d000      	beq.n	80066d6 <_strtoul_l.constprop.0+0xee>
 80066d4:	4240      	negs	r0, r0
 80066d6:	2f00      	cmp	r7, #0
 80066d8:	d0f7      	beq.n	80066ca <_strtoul_l.constprop.0+0xe2>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <_strtoul_l.constprop.0+0xfa>
 80066de:	1e63      	subs	r3, r4, #1
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	9b00      	ldr	r3, [sp, #0]
 80066e4:	603b      	str	r3, [r7, #0]
 80066e6:	e7f0      	b.n	80066ca <_strtoul_l.constprop.0+0xe2>
 80066e8:	080068cb 	.word	0x080068cb

080066ec <_strtoul_r>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	f7ff ff7b 	bl	80065e8 <_strtoul_l.constprop.0>
 80066f2:	bd10      	pop	{r4, pc}

080066f4 <_malloc_usable_size_r>:
 80066f4:	1f0b      	subs	r3, r1, #4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	1f18      	subs	r0, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da01      	bge.n	8006702 <_malloc_usable_size_r+0xe>
 80066fe:	580b      	ldr	r3, [r1, r0]
 8006700:	18c0      	adds	r0, r0, r3
 8006702:	4770      	bx	lr

08006704 <_init>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	46c0      	nop			@ (mov r8, r8)
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr

08006710 <_fini>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr
